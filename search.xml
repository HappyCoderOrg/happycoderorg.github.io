<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>電腦科學概論：演算法概要</title>
    <url>/2019/01/27/algorithm-introduction/</url>
    <content><![CDATA[<p><img src="/images/cs101/algorithm/algorithm-cover.png" alt="電腦科學概論：演算法入門概要"></p>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>隨著資訊科技發展，演算法已經無所不在存在我們的生活當中。舉凡上網 google 搜尋資料、下載檔案的壓縮方法、檔案的加密傳輸等，都可以看到演算法運作的蹤跡。一般來說資料結構和演算法是程式設計最基本的內涵，所以有人說：<code>程式設計 = 資料結構 + 演算法</code>。那究竟什麼是演算法&#x2F;算法呢？</p>
<p>咱們維基百科給了個非常需要慧根才能理解的解釋：</p>
<blockquote>
<p>演算法（algorithm），在數學（算學）和電腦科學之中，為任何良定義的具體計算步驟的一個序列，常用於計算、資料處理和自動推理。精確而言，演算法是一個表示爲有限長，列表的有效方法。演算法應包含清晰定義的指令，用於計算函式。</p>
</blockquote>
<p>我們把它翻譯成人話吧：</p>
<blockquote>
<p>演算法是一個有輸入且有輸出的解決問題的步驟，它具有明確和有限步驟且有效的特性</p>
</blockquote>
<p>舉例來說，我們今天要創作一道蔥花蛋或菜脯蛋，我的步驟會是把材料當做輸入：</p>
<ol>
<li>放點油</li>
<li>打蛋</li>
<li>如果喜歡蔥花可以加入蔥花，如果喜歡菜脯可以加入菜脯（程式術語：<code>if...else</code> 條件判斷）</li>
<li>放入少許鹽巴</li>
<li>中火快炒，翻五次面（程式術語：<code>for</code> 迴圈）</li>
<li>當看到蛋面呈現金黃色時可以起鍋，結束料理（程式術語：<code>while</code> 迴圈）</li>
<li>好吃的蔥花蛋或菜脯蛋上桌</li>
</ol>
<p>透過清楚明確的有限步驟，我們可以解決我們想解決的問題並產出我們要的輸出結果</p>
<h1 id="演算法的定義"><a href="#演算法的定義" class="headerlink" title="演算法的定義"></a>演算法的定義</h1><p>一般演算法嚴謹的條件必須符合：</p>
<ol>
<li>輸入（Input）：0 或多個輸入</li>
<li>輸出（Output）：至少有一個回傳結果（有可能回傳 0 或是 null）</li>
<li>明確性（Definiteness）：每一個指令步驟必須明確</li>
<li>有限性（Finiteness）：在有限步驟後一定會結束不會進入無窮迴圈</li>
<li>有效性（Effectiveness）：步驟清楚可行，能使用紙筆計算求解</li>
</ol>
<p>舉個例子：</p>
<p>下面是一個 Python 判斷是否可以投票的演算法（假設可以投票為 18 歲），仔細看下面的算法雖然簡單但有輸入也有輸出，且有明確有限步驟，步驟可行</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">check_can_vote</span>(<span class="params">age</span>):</span><br><span class="line">    <span class="keyword">if</span> age &gt;= <span class="number">18</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">check_can_vote(<span class="number">20</span>)</span><br></pre></td></tr></table></figure>

<h1 id="評估複雜度"><a href="#評估複雜度" class="headerlink" title="評估複雜度"></a>評估複雜度</h1><p>事實上，解決一個問題不一定只有一種演算法。那我們怎麼評估演算法的好壞呢？一般來說會有兩種方式：時間複雜度和空間複雜度，比較常見的是使用時間複雜度</p>
<h2 id="時間複雜度（Time-Complexity）"><a href="#時間複雜度（Time-Complexity）" class="headerlink" title="時間複雜度（Time Complexity）"></a>時間複雜度（Time Complexity）</h2><p>想要評估一個演算法執行速度快慢，最直覺的方式是測量演算法計算的時間。但由於執行時間會受不同電腦&#x2F;計算機機器硬體規格與實作方式影響，很難放諸四海皆準，因此學術上傾向於統計演算法步驟數目，當做時間複雜度可考量。</p>
<p>最常見的評估演算法好壞就是時間複雜度，時間複雜度是指運用概量（漸近分析 asymptotic analysis，例如：當 f(n) &#x3D; n^2 + 3n 這個函數 n 很大時，3n 會比 n^2 小很多，可以忽略不計。當 n 趨近無限大時，f(n) 等價於 n^2）而非絕對時間（因為會牽涉到電腦&#x2F;計算機環境變因，所以絕對時間不容易準確），通常我們使用 <code>Big O notation</code> <a href="https://zh.wikipedia.org/wiki/%E5%A4%A7O%E7%AC%A6%E5%8F%B7">大 O 符號</a>來表示時間複雜度。假設算法函式所需執行時間為 <code>T(n)</code> ，則我們將其時間複雜度表示為 <code>O(f(n))</code>。<code>f(n)</code> 又稱為執行時間的成長率，是影響速度最大的變數。</p>
<p>首先我們先來看 O(1) 的例子，這個演算法執行的步驟是固定的，跟輸入的值無關：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 不管 n 輸入為多少，這個程式永遠只會執行一次</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">print_num</span>(<span class="params">num</span>):</span><br><span class="line">    <span class="built_in">print</span>(num)</span><br><span class="line"></span><br><span class="line">print_num(<span class="number">10</span>)</span><br></pre></td></tr></table></figure>

<p>下面這個例子就是 O(n) 的例子，時間複雜度跟輸入的次數有關，隨著 num 變大所需要跑 num 次，是線性時間的成長。這邊 <code>f(n)</code> 等於 <code>n</code>，所以 <code>O(f(n))</code> 就是 <code>O(n)</code></p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">sum_number</span>(<span class="params">num</span>):</span><br><span class="line">    total = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> num:</span><br><span class="line">        total += num</span><br><span class="line">    <span class="keyword">return</span> total</span><br><span class="line"></span><br><span class="line">sum_number(<span class="number">10</span>)</span><br></pre></td></tr></table></figure>

<p>O(nlog(n))</p>
<p>一般常見的時間複雜度如下圖表是：<br><img src="/images/cs101/algorithm/big-o.jpeg" alt="電腦科學概論：演算法入門概要"></p>
<h2 id="空間複雜度"><a href="#空間複雜度" class="headerlink" title="空間複雜度"></a>空間複雜度</h2><p>演算法的空間複雜度是指演算法所需要消耗的儲存記憶體資源。其計算和表示方法與時間複雜度類似，一般都用複雜度的漸近性來表示（asymptotic analysis）。</p>
<p>例如下面這個函式，不管程式跑了多少遍，都不會影響使用的變數數量，故該函式的空間複雜度為 O(1)：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">sum_number</span>(<span class="params">num</span>):</span><br><span class="line">    total = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> num:</span><br><span class="line">        total += num</span><br><span class="line">    <span class="keyword">return</span> total</span><br><span class="line"></span><br><span class="line">sum_number(<span class="number">10</span>)</span><br></pre></td></tr></table></figure>

<p>但下面這個函式，會隨著丟進去的數字而影響變數的量，例如：</p>
<p>輸入為 n，就換產生 n 個變數空間需要儲存，故該函式空間複雜度為 O(n)</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">sum_number</span>(<span class="params">num</span>):</span><br><span class="line">    total = []</span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> num:</span><br><span class="line">        total.append(num)</span><br><span class="line"></span><br><span class="line">sum_number(<span class="number">10</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h1><p>以上簡單介紹了演算法入門教學。隨著資訊科技發展，演算法已經無所不在存在我們的生活當中。舉凡上網 google 搜尋資料、下載檔案的壓縮方法、檔案的加密傳輸等，都可以看到演算法運作的蹤跡，所以值得我們細細品味，接下來我們將介紹常見的經典演算法範例。</p>
<h1 id="參考文件"><a href="#參考文件" class="headerlink" title="參考文件"></a>參考文件</h1><ol>
<li><a href="http://www.csie.ntnu.edu.tw/~u91029/">台師大演算法筆記</a></li>
<li><a href="http://alrightchiu.github.io/SecondRound/mu-lu-yan-suan-fa-yu-zi-liao-jie-gou.html">演算法與資料結構</a></li>
<li><a href="https://zh.wikipedia.org/wiki/%E5%A4%A7O%E7%AC%A6%E5%8F%B7">大O符號</a></li>
<li><a href="http://www.csie.ntnu.edu.tw/~u91029/AlgorithmAnalysis.html">Algorithm Analysis</a></li>
<li><a href="https://medium.freecodecamp.org/all-you-need-to-know-about-big-o-notation-to-crack-your-next-coding-interview-9d575e7eec4">All you need to know about “Big O Notation” to crack your next coding interview</a></li>
</ol>
<p>image via <a href="https://blog.pandorafms.org/what-is-an-algorithm/">pandorafms</a>、<a href="https://cdn-images-1.medium.com/max/1600/1*KfZYFUT2OKfjekJlCeYvuQ.jpeg">freecodecamp</a></p>
]]></content>
      <tags>
        <tag>自學程式</tag>
        <tag>自學程式設計</tag>
        <tag>程式設計</tag>
        <tag>coding</tag>
        <tag>programming</tag>
        <tag>computer science</tag>
        <tag>電腦科學</tag>
        <tag>演算法</tag>
        <tag>算法</tag>
        <tag>algorithm</tag>
        <tag>程式教學</tag>
      </tags>
  </entry>
  <entry>
    <title>自學程式設計與電腦科學入門實戰：Linux Command 命令列指令與基本操作入門教學</title>
    <url>/2017/11/18/cs101-learning-programming-and-coding-with-python-linux-commnd-line-tutorial/</url>
    <content><![CDATA[<p><img src="/images/cs101/terminal.jpg" alt="自學程式設計與電腦科學入門實戰：Linux Command 命令列指令與基本操作入門教學"></p>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>要成為一個真正的軟體工程師（Software Engineer）不一定一定要使用 vim 之類的編輯器進行開發，但熟悉使用終端機（terminal）操作和常用的 Linux 命令列指令碼操作則是必須的。因此接著我們將介紹軟體工程師在開發上常用的 Linux 命令列指令碼給讀者參考。若讀者使用的是 Windows 建議安裝 VirtualBox 並在上面跑 Linux&#x2F;Ubuntu 來進行指令碼操作，或是使用像是 Cmder 的工具來進行操作。關於相關工具安裝可以參考 <a href="/2017/11/17/how-to-setup-python-development-environment-in-windows/">如何在 Windows 打造 Python 開發環境設定基礎入門教學</a> 這篇教學文章。好，那我們就準備開始吧！</p>
<p><img src="/images/cs101/linux.jpg" alt="自學程式設計與電腦科學入門實戰：Linux Command 命令列指令與基本操作入門教學"></p>
<h1 id="什麼是-Linux？"><a href="#什麼是-Linux？" class="headerlink" title="什麼是 Linux？"></a>什麼是 Linux？</h1><p><a href="https://zh.wikipedia.org/wiki/Linux">Linux</a> 是一種自由開放原始碼的<a href="https://zh.wikipedia.org/wiki/%E7%B1%BBUnix%E7%B3%BB%E7%BB%9F">類 Unix</a> 的作業系統，其廣泛運用於伺服器和嵌入式系統中。目前主流的 Linux 發佈版本（Linux distributions，係指可完整安裝使用的套件版本）包括：Debian、Fedora、CentOS、Ubuntu 等。以下我們主要將會聚焦在 Linux&#x2F;Ubuntu 常用指令和基礎操作的入門教學介紹上（每個指令前使用 <code>$</code> 當作提示字元，不用輸入）。</p>
<p><img src="/images/cs101/ubuntu.png" alt="自學程式設計與電腦科學入門實戰：Linux Command 命令列指令與基本操作入門教學"></p>
<h1 id="Linux-檔案系統架構"><a href="#Linux-檔案系統架構" class="headerlink" title="Linux 檔案系統架構"></a>Linux 檔案系統架構</h1><p>理論上所有的 Linux 發佈版本應該都要遵守檔案系統的標準（Filesystem Hierarchy Standard, FHS），但根據發佈版本不同或有差異，不過大致上檔案系統架構如下：</p>
<ol>
<li><p>&#x2F;bin, &#x2F;sbin<br><code>/bin</code> 主要放置一般使用者可以操作的指令，<code>/sbin</code> 放置系統管理員可以操作的指令。連結到 <code>/usr/bin</code>，<code>/usr/sbin</code> </p>
</li>
<li><p>&#x2F;boot<br>主要放置開機相關檔案  </p>
</li>
<li><p>&#x2F;dev<br>放置 device 裝置檔案，包話滑鼠鍵盤等</p>
</li>
<li><p>&#x2F;etc<br>主要放置系統檔案</p>
</li>
<li><p>&#x2F;home, &#x2F;root<br><code>/home</code> 主要是一般帳戶的家目錄，<code>/root</code> 為系統管理者的家目錄</p>
</li>
<li><p>&#x2F;lib, &#x2F;lib64<br>主要為系統函式庫和核心函式庫，若是 64 位元則放在 <code>/lib64</code>。連結到 <code>/usr/lib</code>, <code>/usr/lib64</code></p>
</li>
<li><p>&#x2F;proc<br>將記憶體內的資料做成檔案類型</p>
</li>
<li><p>&#x2F;sys<br>與 <code>/proc</code> 類似，但主要針對硬體相關參數</p>
</li>
<li><p>&#x2F;usr<br><code>/usr</code> 全名為 <code>unix software resource</code> 縮寫，放置系統相關軟體、服務（注意不是 user 的縮寫喔！）</p>
</li>
<li><p>&#x2F;var<br>全名為 <code>variable</code>，放置一些變數或記錄檔</p>
</li>
<li><p>&#x2F;tmp<br>全名為 <code>temporary</code>，放置暫存檔案</p>
</li>
<li><p>&#x2F;media, &#x2F;mnt<br>放置隨插即用的裝置慣用目錄， <code>/mnt</code> 為管理員&#x2F;使用者手動掛上（mount）的目錄</p>
</li>
<li><p>&#x2F;opt<br>全名為 <code>optional</code>，通常為第三方廠商放置軟體處</p>
</li>
<li><p>&#x2F;run<br>系統進行服務軟體運作管理處</p>
</li>
<li><p>&#x2F;srv<br>通常是放置開發的服務（service），如：網站服務 <code>www</code> 等</p>
</li>
</ol>
<h1 id="檔案與目錄管理指令"><a href="#檔案與目錄管理指令" class="headerlink" title="檔案與目錄管理指令"></a>檔案與目錄管理指令</h1><p>在 Ubuntu 中我們可以打開終端機進行指令操作，就可以透過指令來管理檔案。</p>
<p>一般指令格式如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ 指令 [選項] [選項值]</span><br></pre></td></tr></table></figure>

<p><img src="/images/cs101/linux-ls-g.png" alt="自學程式設計與電腦科學入門實戰：Linux Command 命令列指令與基本操作入門教學"></p>
<ol>
<li><p>ls：list，查看檔案及子目錄</p>
<p> 列出基本資料夾資料：</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ls</span><br></pre></td></tr></table></figure>

<p> 列出詳細資料和隱藏資料：</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// -l 列出詳細資料 -a 列出隱藏資料</span><br><span class="line">$ ls -la</span><br></pre></td></tr></table></figure>

<p> 列出部分檔案：</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 列出為 .js 的檔案</span><br><span class="line">$ ls *.js</span><br></pre></td></tr></table></figure>
</li>
<li><p>pwd：print work directory，印出目前工作目錄</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ pwd</span><br><span class="line">// /Users/happycoder/Desktop/projects/HappyCoder</span><br></pre></td></tr></table></figure>
</li>
<li><p>cd：change directory，移動進入資料夾</p>
<p> 移動到目前資料夾下的 examples 資料夾：</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ cd ./examples</span><br></pre></td></tr></table></figure>

<p> 移動到家目錄：<code>~</code>：</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ cd ~</span><br></pre></td></tr></table></figure>

<p> 移動到上一層目錄 <code>..</code>：</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ cd ..</span><br></pre></td></tr></table></figure>

<p> 移動到根目錄 <code>/</code>：</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ cd /</span><br></pre></td></tr></table></figure>
</li>
<li><p>mkdir：make directory，創建新資料夾</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ mkdir examples</span><br></pre></td></tr></table></figure>
</li>
<li><p>cp：copy，複製檔案</p>
<p> 先將字串 TEST 存入 README.md 文件中</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ echo &quot;TEST&quot; &gt; README.md</span><br></pre></td></tr></table></figure>

 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ cp README.md</span><br></pre></td></tr></table></figure>
</li>
<li><p>mv：move (rename) files，移動檔案或是重新命名檔案</p>
<p> 移動檔案：</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ mv README.md /examples/README.md</span><br></pre></td></tr></table></figure>

<p> 重新命名</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ mv README.md README_MV.md</span><br></pre></td></tr></table></figure>
</li>
<li><p>rm：remove file，刪除檔案</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ rm README.md</span><br></pre></td></tr></table></figure>

<p> 刪除目前資料夾下副檔名為 .js 檔案：</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ rm *.js</span><br></pre></td></tr></table></figure>

<p> 刪除資料夾和所有檔案：</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ rm -f examples</span><br></pre></td></tr></table></figure>
</li>
<li><p>touch：用來更新已存在文件的 timestamp 時間戳記或是新增空白檔案</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ touch README.md</span><br></pre></td></tr></table></figure>
</li>
<li><p>cat：將文件印出在終端機上</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ cat README.md</span><br></pre></td></tr></table></figure>
</li>
<li><p>tail：顯示檔案最後幾行內容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ tail README.md</span><br></pre></td></tr></table></figure>

<p>持續顯示更新內容，常用於 web server 看 log debug 使用：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ tail -f README.md</span><br></pre></td></tr></table></figure>
</li>
<li><p>more：將檔案一頁頁印在終端機上</p>
<p>可以使用上下移動換頁，按 q 離開：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ more README.md</span><br></pre></td></tr></table></figure>
</li>
<li><p>file：檢查檔案類型</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ file README.md</span><br><span class="line">// README.md: HTML document text, UTF-8 Unicode text</span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="編輯文字檔案"><a href="#編輯文字檔案" class="headerlink" title="編輯文字檔案"></a>編輯文字檔案</h1><ol>
<li><p>nano：在終端機編輯文字檔案</p>
<p> 編輯或是新增文字檔案：</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ nano README.md</span><br></pre></td></tr></table></figure>

<p> 啟動編輯完後可以使用 Ctrl + X 離開，Ctrl + V 移動到上一頁，Ctrl + Y 移動到下一頁，Ctrl + W 搜尋文字內容 </p>
</li>
<li><p>vim：在終端機編輯文字檔案</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ vim README.md</span><br></pre></td></tr></table></figure>

<p> 啟動後，使用 i 進入編輯，esc 離開編輯模式，<code>:q</code> 不儲存離開，<code>:wq</code> 儲存離開，<code>:q!</code> 強制離開</p>
</li>
</ol>
<h1 id="檔案權限設定"><a href="#檔案權限設定" class="headerlink" title="檔案權限設定"></a>檔案權限設定</h1><p>在 Linux 系統中，每一個 Linux 檔案都具有四種存取權限：</p>
<ol>
<li>可讀取<code>（r，Readable）</code>，用數字 4 表示</li>
<li>可寫入<code>（w，writable）</code>，用數字 2 表示</li>
<li>可執行：<code>（x，eXecute）</code>，用數字 1 表示</li>
<li>無權限（-），用數字 0 表示</li>
</ol>
<p>系統管理者依據使用者需求來設定檔案權限，若我們想檢視檔案權限可以使用 <code>$ ls -l</code> 來查看</p>
<p><img src="/images/cs101/linux-ls-al.png" alt="自學程式設計與電腦科學入門實戰：Linux Command 命令列指令與基本操作入門教學"></p>
<ol>
<li><p>第一欄：使用者權限<br> 由 10 個字元組成，第一個字元表示檔案型態（- 為檔案，d 表示目錄，1 表示連結檔案）。字元 2、3、4 表示檔案擁有者的存取權限。字元 5、6、7 表示檔案擁有者所屬群組成員的存取權限。字元 8、9、10 表示其他使用者的存取權限</p>
<p> 舉例來說 -rwxrwxr–，代表這是一格檔案，擁有者和群組都具備讀取、寫入和執行權限，其他使用者只擁有讀取權限</p>
</li>
<li><p>第二欄：檔案數量</p>
</li>
<li><p>第三欄：擁有者</p>
</li>
<li><p>第四欄：群組</p>
</li>
<li><p>第五欄：檔案大小</p>
</li>
<li><p>第六欄：檔案建立時間</p>
</li>
<li><p>第七欄：檔案名稱</p>
</li>
</ol>
<p>接下來介紹如何透過指令修改權限：</p>
<ol>
<li><p>chmod：修改檔案權限</p>
<p> 將權限設為 <code>rw-rw-r--</code>：</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ chmod 664 README.md</span><br></pre></td></tr></table></figure>

<p> 將檔案的使用者和群組加入執行權限</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ chmod ug+x README.md</span><br></pre></td></tr></table></figure>
</li>
<li><p>chown：修改檔案擁有者與群組</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ chown www-data:www-data README.md</span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="系統管理"><a href="#系統管理" class="headerlink" title="系統管理"></a>系統管理</h1><ol>
<li><p>sudo：使用最高權限（superuser）執行指令，會要求輸入自己密碼，使用上必須非常小心</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sudo git clone xxx.py</span><br></pre></td></tr></table></figure>
</li>
<li><p>su：su 指令可以讓一般的 Linux 使用者輸入 root 密碼取得 root 權限，暫時取得 root 權限的使用者就如同 root 一樣可以對系統進行各種變更動作</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ su</span><br></pre></td></tr></table></figure>
</li>
<li><p>kill：根據 Process ID 指定要終止程式</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ kill PID</span><br></pre></td></tr></table></figure>

<p> 立即強制執行：</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ kill -9 PID</span><br></pre></td></tr></table></figure>
</li>
<li><p>killall：直接使用程式的名稱來指定要終止的程式</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ killall hello.py</span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="套件管理"><a href="#套件管理" class="headerlink" title="套件管理"></a>套件管理</h1><ol>
<li><p>apt-get：套件管理工具</p>
<p> 更新套件資料庫列表：</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sudo apt-get update</span><br></pre></td></tr></table></figure>

<p> 升級套件並下載安裝套件：</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sudo apt-get upgrade</span><br></pre></td></tr></table></figure>

<p> 搜尋相關軟體套件（使用名稱）：</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ apt-cache search --names-only fortune</span><br></pre></td></tr></table></figure>

<p> 安裝套件：</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sudo apt-get install fortune</span><br></pre></td></tr></table></figure>

<p> 移除套件：</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sudo apt-get remove fortune</span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="網際網路相關操作"><a href="#網際網路相關操作" class="headerlink" title="網際網路相關操作"></a>網際網路相關操作</h1><ol>
<li><p>ping：網路檢測工具，透過發送 <code>ICMP ECHO_REQUEST</code> 的封包，檢查自己與特定設備之間的網路是否暢通，速度是否正常</p>
<p> 可輸入 hostname 或是 IP：</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ ping google.com</span><br></pre></td></tr></table></figure>


<p> PING google.com (172.217.160.110): 56 data bytes<br> 64 bytes from 172.217.160.110: icmp_seq&#x3D;0 ttl&#x3D;57 time&#x3D;7.037 ms<br> 64 bytes from 172.217.160.110: icmp_seq&#x3D;1 ttl&#x3D;57 time&#x3D;9.411 ms<br> 64 bytes from 172.217.160.110: icmp_seq&#x3D;2 ttl&#x3D;57 time&#x3D;22.690 ms<br> 64 bytes from 172.217.160.110: icmp_seq&#x3D;3 ttl&#x3D;57 time&#x3D;6.561 ms<br> 64 bytes from 172.217.160.110: icmp_seq&#x3D;4 ttl&#x3D;57 time&#x3D;6.909 ms<br> 64 bytes from 172.217.160.110: icmp_seq&#x3D;5 ttl&#x3D;57 time&#x3D;6.311 ms<br> 64 bytes from 172.217.160.110: icmp_seq&#x3D;6 ttl&#x3D;57 time&#x3D;6.860 ms<br> 64 bytes from 172.217.160.110: icmp_seq&#x3D;7 ttl&#x3D;57 time&#x3D;6.583 ms</p>
</li>
<li><p>traceroutes：檢查從你的電腦到網路另一端的主機是走的什麼路徑</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ traceroute google.com</span><br></pre></td></tr></table></figure>

<p> traceroute to google.com (172.217.27.142), 64 hops max, 52 byte packets<br> 1  zyxel.home (192.168.1.1)  2.047 ms  1.208 ms  1.888 ms<br> 2  h254.s98.ts.hinet.net (168.95.98.254)  6.189 ms  8.556 ms  5.875 ms<br> 3  168-95-85-2.hinet-ip.hinet.net (168.95.85.2)  7.057 ms  5.796 ms  5.998 ms<br> 4  211-22-226-1.hinet-ip.hinet.net (211.22.226.1)  9.766 ms  10.422 ms<br> 72.14.222.94 (72.14.222.94)  9.744 ms<br> 5  108.170.244.97 (108.170.244.97)  8.386 ms<br> 108.170.244.129 (108.170.244.129)  11.500 ms  12.247 ms<br> 6  209.85.142.13 (209.85.142.13)  7.015 ms  7.505 ms<br> 209.85.240.15 (209.85.240.15)  6.750 ms<br> 7  tsa03s02-in-f142.1e100.net (172.217.27.142)  11.478 ms  6.608 ms  6.893 ms</p>
</li>
<li><p>nslookup：查詢 DNS 回應是否正常</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ nslookup google.com</span><br></pre></td></tr></table></figure>

<p> Server:		192.168.1.1<br> Address:	192.168.1.1#53</p>
<p> Non-authoritative answer:<br> Name:	google.com<br> Address: 216.58.200.238</p>
</li>
</ol>
<h1 id="其他好用指令"><a href="#其他好用指令" class="headerlink" title="其他好用指令"></a>其他好用指令</h1><ol>
<li><p>man：查詢 Linux 線上手冊（man page）</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ man</span><br></pre></td></tr></table></figure>

<p> 例如我們可以使用 <code>man</code> 來查詢 <code>ls</code> 的使用用法：</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ man ls</span><br></pre></td></tr></table></figure>
</li>
<li><p>find：查詢檔案</p>
<p> 在目前目錄下尋找檔名為 README.md 檔案</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ find . -name README.md</span><br></pre></td></tr></table></figure>
</li>
<li><p>grep：強大文件字串搜尋工具</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ grep &#x27;找這個字串&#x27; file_name</span><br></pre></td></tr></table></figure>

<p> 找所有目錄（含子目錄）下檔案</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ grep -r &#x27;字串&#x27; *</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>crontab：例行性工作排程</p>
<p> 編輯 crontab</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ crontab -e</span><br></pre></td></tr></table></figure>

<p> crontab 格式：</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">分 時 日 月 星期 要執行的指令</span><br><span class="line"></span><br><span class="line">30 12   *   *   *  python /projects/hello.py &amp;</span><br><span class="line"></span><br><span class="line">在 12:30 時執行 hello.py，&amp; 表示背景執行</span><br><span class="line">* 號表示每日每月每星期都執行</span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="撰寫第一個-shell-script"><a href="#撰寫第一個-shell-script" class="headerlink" title="撰寫第一個 shell script"></a>撰寫第一個 shell script</h1><p>Shell 是我們和 Linux 系統的介面，我們可以透過終端機在上面輸入指令和作業系統互動，讓他做我們想做的事情。在 Linux 中標準的 Shell 為（Bourne Again Shell），檔案路徑為 <code>/bin/sh</code>，我們可以透過 <code>$ echo $SHELL</code> 去印出目前使用的 shell</p>
<p>其中 Shell Script 為使用 shell 所提供的語法所撰寫的程式碼，其為直譯式不用編譯。可以讓你將複雜或是重複性的指令寫成程式碼檔案</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ vim example.sh</span><br></pre></td></tr></table></figure>

<p>在編輯模式輸入以下程式碼，：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line"># 這是註解，上面所使用的 shell</span><br><span class="line"></span><br><span class="line">echo &quot;日期&quot;</span><br><span class="line">date</span><br><span class="line">echo &quot;印出檔案列表&quot;</span><br><span class="line">ls -l</span><br></pre></td></tr></table></figure>

<p>修改權限成可以執行：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ chmod u+x example.sh</span><br></pre></td></tr></table></figure>

<p>接著執行，若是一切順利就可以在終端機看到時間日期和檔案列表！恭喜你完成你的第一個 shell script！</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ ./example.sh</span><br></pre></td></tr></table></figure>

<h1 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h1><p>以上介紹了 Linux&#x2F;Ubuntu 常用指令和基礎操作的入門教學介紹上，實際上讀者不用刻意去背誦，而是在實際上操作中練習，多累積撰寫程式並使用指令碼去加快程式開發的速度自然而然就會把指令碼記憶起來了，若是真的忘記再去網路上查找就好，加油！</p>
<h1 id="參考文件"><a href="#參考文件" class="headerlink" title="參考文件"></a>參考文件</h1><ol>
<li><a href="http://blog.csdn.net/ljianhui/article/details/11100625">初窥Linux 之 我最常用的20条命令</a></li>
<li><a href="http://blog.xuite.net/chingwei/blog/16285667-%E3%80%90%EF%BC%AC%E3%80%91Linux+%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4%E9%9B%86">【Ｌ】Linux 常用指令集</a></li>
<li><a href="https://blog.gtwang.org/linux/sudo-su-command-tutorial-examples/">Linux 的 su 與 sudo 指令教學與範例</a></li>
<li><a href="http://www.vixual.net/blog/archives/100">dig、host 與 nslookup 指令的查詢語法</a></li>
<li><a href="https://www.phpini.com/linux/nslookup-query-dns-command">nslookup — 查詢 DNS 指令</a></li>
<li><a href="https://blog.miniasp.com/post/2010/08/27/Linux-find-command-tips-and-notice.aspx">在 Linux 下使用 find 指令查詢目錄與檔案的速查筆記</a></li>
<li><a href="https://www.phpini.com/linux/grep-directory-all-files">grep 搜尋目錄下所有檔案字串</a></li>
<li><a href="http://linux.vbird.org/linux_basic/0430cron.php">第十五章、例行性工作排程(crontab)</a></li>
</ol>
<p>（image via <a href="https://www.javatpoint.com/linux/images/linux-ls-g.png">unixmen</a>、<a href="https://s3.amazonaws.com/cloudxlab/static/images/aha/ls-al.png">cloudxlab</a>、<a href="https://i.ytimg.com/vi/GGorVpzZQwA/maxresdefault.jpg">ytimg</a>、<a href="https://i.ytimg.com/vi/DPIPC25xzUM/maxresdefault.jpg">ytimg</a>、<a href="https://3c1703fe8d.site.internapcdn.net/newman/gfx/news/hires/2014/linux.jpg">linux</a>、<a href="https://i.stack.imgur.com/RUIIq.png">imgur</a>）</p>
]]></content>
      <tags>
        <tag>自學程式</tag>
        <tag>自學程式設計</tag>
        <tag>程式設計</tag>
        <tag>線上自學</tag>
        <tag>coding</tag>
        <tag>coder</tag>
        <tag>programming</tag>
        <tag>computer</tag>
        <tag>computer science</tag>
        <tag>code</tag>
        <tag>電腦科學</tag>
        <tag>學寫程式</tag>
        <tag>學程式</tag>
        <tag>linux</tag>
        <tag>指令</tag>
        <tag>命令列</tag>
        <tag>command line</tag>
        <tag>軟體工程師</tag>
        <tag>軟體工程</tag>
        <tag>software engineering</tag>
        <tag>bash</tag>
        <tag>shell</tag>
        <tag>script</tag>
        <tag>unix</tag>
        <tag>mac</tag>
        <tag>os</tag>
        <tag>windows</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker 入門實戰教學：如何使用 Docker Compose 建置 Python Flask + Redis 記數器</title>
    <url>/2018/09/06/docker101-docker-compose-practice-introduction-python-flask-redis-counter/</url>
    <content><![CDATA[<p><img src="/images/docker101/docker-compose-logo.png" alt="Docker101"></p>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>身為一個開發者最惱人的莫過於環境建置和部屬應用程式。隨著 Docker 容器和虛擬化技術進步以及 DevOps、Infrastructure as Code 文化的推廣，讓我們可以更容易在不同環境開發部屬並調度（Orchestration）我們的專案應用程式。在 Docker 中，除了 Docker 指令和 Docker Engine 背後的技術外，最重要的莫過於 Docker Machine、Docker Compose 和 Docker Swarm 三劍客了。接下來我們將透過 Docker Compose 來啟動並執行 Python Flask + Redis 網頁人數統計的專案，讓讀者能夠理解 Docker Compose 的優勢和使用方式。那就讓我們開始吧！</p>
<p><img src="/images/docker101/docker-compose-services.png" alt="Docker101"></p>
<h1 id="Docker-Compose-簡介"><a href="#Docker-Compose-簡介" class="headerlink" title="Docker Compose 簡介"></a>Docker Compose 簡介</h1><p>一開始我們先了解 Docker Compose 是一個工具可以讓你可以透過一個指令就可以控制所有專案（project）中所需要的 services。Docker Compose 是用 <code>YAML</code> 檔案格式來描述和定義 project 中 services 運作關係，白話來說就是用來管理 Container 的文件檔。</p>
<p>什麼意思呢？</p>
<p>試想一下，我們在開發一個典型的 Web project 時通常不是只有一個 service，有可能需要 app server、database、cache，甚至是 reverse proxy 等 service 才能構成一個可以上線運行的專案，這些 service 往往會需要多個 container 來運行。此時若是使用 Docker CLI 需要手動輸入多少行才能正式啟動一個 project？這時候就是 Docker Compose 發揮功能的時候啦！</p>
<p>我們先來看看，一個基本的 docker-compose.yml 檔案長這樣（YAML 檔案格式，使用空格來縮排，附檔名為 .yml）：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span> <span class="comment"># 目前使用的版本，可以參考官網：</span></span><br><span class="line"><span class="attr">services:</span> <span class="comment"># services 關鍵字後面列出 web, redis 兩項專案中的服務</span></span><br><span class="line">  <span class="attr">web:</span></span><br><span class="line">    <span class="attr">build:</span> <span class="string">.</span> <span class="comment"># Build 在同一資料夾的 Dockerfile（描述 Image 要組成的 yaml 檔案）成 container</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;5000:5000&quot;</span> <span class="comment"># 外部露出開放的 port 對應到 docker container 的 port</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">.:/code</span> <span class="comment"># 要從本地資料夾 mount 掛載進去的資料</span></span><br><span class="line">    <span class="attr">links:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">redis</span> <span class="comment"># 連結到 redis，讓兩個 container 可以互通網路</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">redis</span> <span class="comment"># 從 redis image build 出 container</span></span><br></pre></td></tr></table></figure>

<h1 id="Dockerfile-和-Docker-Compose-的差異是？"><a href="#Dockerfile-和-Docker-Compose-的差異是？" class="headerlink" title="Dockerfile 和 Docker Compose 的差異是？"></a>Dockerfile 和 Docker Compose 的差異是？</h1><p>在了解到 Docker Compose 主要是用來描述 Service 之間的相依性和調度方式後，我們來看看同樣初學者會比較容易搞混的觀念：Dockerfile。事實上 Dockerfile 是用來描述映像檔（image）的文件。</p>
<p>所謂的 <code>Image</code>，就是生產 <code>Container</code> 的模版，你可以從 Docker Hub 官方下載或是根據官方的 Image 自己加工後打包成 Image 或是完全自己使用 Dockerfile 描述 Image 內容來製作 Image。而 Container 則是透過 Image 產生隔離的執行環境，稱之為 Container，也就是我們一般用來提供 microservice 的最小單位。</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 這是一個創建 ubuntu 並安裝 nginx 的 image</span></span><br><span class="line"><span class="keyword">FROM</span> ubuntu:<span class="number">16.04</span> <span class="comment"># 從 Docker hub 下載基礎的 image，可能是作業系統環境或是程式語言環境，這邊是 ubuntu 16.04</span></span><br><span class="line"><span class="keyword">MAINTAINER</span> demo@gmail.com <span class="comment"># 維護者</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt-get update <span class="comment"># 執行 CMD 指令跑的指令，更新 apt 套件包資訊</span></span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt-get install –y nginx <span class="comment"># 執行 CMD 指令跑的指令，安裝 nginx</span></span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;echo&quot;</span>, <span class="string">&quot;Nginx Image created&quot;</span>] </span></span><br></pre></td></tr></table></figure>

<p>以上為簡單的 Dockerfile。我們可以看到，只需一個文字檔，就清楚描述一個 Docker image。利於使用版本控制，也可以減少 shell script 的工作量。</p>
<h1 id="透過-Docker-建立-Python-Pageview-App"><a href="#透過-Docker-建立-Python-Pageview-App" class="headerlink" title="透過 Docker 建立 Python Pageview App"></a>透過 Docker 建立 Python Pageview App</h1><p>在建立了 Dockerfile 和 Docker Compose 的基礎觀念後，我們來透過一個簡單 Python Flask + Redis 網頁人數統計的專案讓讀者可以更深刻理解 Docker Compose 的威力。</p>
<p>環境準備：<br>Lniux&#x2F;MacOS 為主<br>可以輸入指令的終端機（若為 windows 可以使用 <a href="http://cmder.net/">cmder</a>）<br>到官網安裝 <a href="https://docs.docker.com/install/">Docker</a><br>基本 Docker 和 Web 知識</p>
<ol>
<li><p>創建專案資料夾</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">mkdir</span> docker-compose-python-flask-redis-counter</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span> docker-compose-python-flask-redis-counter</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在資料夾下建立 app.py 當做 web app 進入點，裡面有 flask 和 redis 操作，當使用者瀏覽首頁時，redis 會記錄次數，若有 exception 則有 retry 機制</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> redis</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">cache = redis.Redis(host=<span class="string">&#x27;redis&#x27;</span>, port=<span class="number">6379</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_hit_count</span>():</span><br><span class="line">    retries = <span class="number">5</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">return</span> cache.incr(<span class="string">&#x27;hits&#x27;</span>)</span><br><span class="line">        <span class="keyword">except</span> redis.exceptions.ConnectionError <span class="keyword">as</span> exc:</span><br><span class="line">            <span class="keyword">if</span> retries == <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">raise</span> exc</span><br><span class="line">            retries -= <span class="number">1</span></span><br><span class="line">            time.sleep(<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_index</span>():</span><br><span class="line">    count = get_hit_count()</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Yo! 你是第 &#123;&#125; 次瀏覽\n&#x27;</span>.<span class="built_in">format</span>(count)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app.run(host=<span class="string">&quot;0.0.0.0&quot;</span>, debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>

</li>
<li><p>建立套件 requirements.txt 安裝資訊讓 Dockerfile 可以下指令安裝套件</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flask</span><br><span class="line">redis</span><br></pre></td></tr></table></figure>
</li>
<li><p>建立 Web App 的 Dockerfile</p>
 <figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> python:<span class="number">3.4</span>-alpine <span class="comment"># 從 python3.4 基礎上加工</span></span><br><span class="line"><span class="keyword">ADD</span><span class="language-bash"> . /code <span class="comment"># 將本地端程式碼複製到 container 裡面 ./code 資料夾</span></span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /code <span class="comment"># container 裡面的工作目錄</span></span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> pip install -r requirements.txt</span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;python&quot;</span>, <span class="string">&quot;app.py&quot;</span>]</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>用 Docker Compose file 描述 services 運作狀況，我們的專案共有 web 和 redis 兩個 service</p>
 <figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"><span class="attr">web:</span></span><br><span class="line">    <span class="attr">build:</span> <span class="string">.</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&quot;5000:5000&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">.:/code</span> <span class="comment"># 把當前資料夾 mount 掛載進去 container，這樣你可以直接在本地端專案資料夾改動檔案，container 裡面的檔案也會更動也不用重新 build image！</span></span><br><span class="line"><span class="attr">redis:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">&quot;redis:alpine&quot;</span> <span class="comment"># 從 Docker Hub registry 來的 image</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>用 Docker Compose 執行你的 Web app（-d detached 是在背景執行，可以使用 $ docker ps -a 觀看目前所有 docker container 狀況，使用 <code>$ docker-compose ps</code> 觀看 docker-compose process 狀況）</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker-compose up -d</span></span><br></pre></td></tr></table></figure>

<p> 若要終止並移除 container 則可以使用 <code>$ docker-compose down</code></p>
</li>
<li><p>到 <a href="http://127.0.0.1:5000/">http://127.0.0.1:5000/</a> 觀看成果</p>
</li>
</ol>
<p><img src="/images/docker101/docker-compose-flask-redis-demo.png" alt="Docker101"></p>
<h1 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h1><p>以上透過 Docker Compose 來啟動並執行 Python Flask + Redis 網頁人數統計的專案，讓讀者能夠理解 Docker Compose 的優勢和使用方式（Docker Compose 是一個工具可以讓你可以透過一個指令就可以控制所有專案（project）中所需要的 services）。同時也複習了 Dockerfile、Docker Image、Container 相關知識。Ya，自從有了 Docker Compose 在本地開發測試專案更加方便，考試都考一百分了！</p>
<h1 id="參考文件"><a href="#參考文件" class="headerlink" title="參考文件"></a>參考文件</h1><ol>
<li><a href="https://docs.docker.com/compose/gettingstarted/#step-8-experiment-with-some-other-commands">Get started with Docker Compose</a></li>
<li><a href="https://oomusou.io/docker/dockerfile-dockercompose/">深入淺出 Dockerfile 與 Docker Compose</a></li>
<li><a href="http://www.netadmin.com.tw/article_content.aspx?sn=1712060002">部署Docker Compose　實例示範定義檔撰寫</a></li>
<li><a href="http://blog.maxkit.com.tw/2017/03/docker-compose.html">Docker Compose 初步閱讀與學習記錄</a></li>
</ol>
<p>（image via <a href="https://medium.com/skillshare-team/from-docker-compose-to-minikube-d94cbe97acda">cuelogic</a>、<a href="https://share.zabbix.com/virtualization/docker/docker-compose-yml-v2-format-for-zabbix-3-0">Zabbix</a>）</p>
]]></content>
      <tags>
        <tag>docker</tag>
        <tag>容器</tag>
        <tag>docker machine</tag>
        <tag>docker compose</tag>
        <tag>docker swarm</tag>
        <tag>vm</tag>
      </tags>
  </entry>
  <entry>
    <title>Go Web 程式設計入門教學：語法基礎之流程控制（flow control）篇</title>
    <url>/2017/07/01/golang101-tutorial-basic-flow-control/</url>
    <content><![CDATA[<p><img src="/images/golang101/logo.png" alt="Go Web 程式設計入門教學"></p>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>前面單元我們介紹了如何建置 Go 變數和資料型別的使用，接下來的單元我們將透過 Golang Web 程式設計來學習 Go 這個程式語言。而在這個單元中我們將介紹 Go 的流程控制的使用。程式語言唯有動手作才能學的好，你可以參考之前的文章建置開發環境或是<a href="https://play.golang.org/">使用線上開發環境</a>進行學習。</p>
<h1 id="流程控制簡介"><a href="#流程控制簡介" class="headerlink" title="流程控制簡介"></a>流程控制簡介</h1><p>一般而言，程式語言是由上往下執行，若我們需要程式依照我們設計的邏輯方向執行就需要流程控制的協助。在這邊主要談的流程控制有三部分：條件判斷、迴圈循環、跳躍控制。</p>
<p>我們使用制做菜脯蛋食譜步驟來講解範例：</p>
<ol>
<li>放點油</li>
<li>打蛋</li>
<li>如果喜歡蔥花可以加入蔥花，如果喜歡菜脯可以加入菜脯（程式術語：<code>if...else</code> 條件判斷）</li>
<li>放入少許鹽巴</li>
<li>中火快炒，翻五次面（程式術語：<code>for</code> 迴圈）</li>
<li>當看到蛋面呈現金黃色時可以起鍋，結束料理（程式術語：<code>while</code> 迴圈）</li>
<li>好吃的蔥花蛋或菜脯蛋上桌</li>
</ol>
<p>首先介紹，條件判斷，如果 if…。條件判斷是一種邏輯判斷，當符合條件就怎麼樣，不符合條件就怎麼樣。</p>
<ol>
<li><p>if…else</p>
 <figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> taste = <span class="string">&quot;菜脯蛋&quot;</span> <span class="comment">// 喜歡菜脯蛋</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> taste == <span class="string">&quot;菜脯蛋&quot;</span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;加入菜脯&quot;</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;加入蔥花&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> Go 語言中除了條件判斷不用加 <code>()</code> 外，也可以在條件判斷敘述宣告變數，但只會存活於條件邏輯區塊使用上。</p>
 <figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> taste := <span class="string">&quot;蔥花蛋&quot;</span>; taste == <span class="string">&quot;菜脯蛋&quot;</span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;加入菜脯&quot;</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;加入蔥花&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(taste) <span class="comment">// 編譯錯誤，條件判斷敘述宣告的變數，只會存活於條件邏輯區塊使用上</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>goto<br> Go 中還提供了 <code>goto</code> 語法，讓你可以直接跳躍到某定義區塊，但建議小心使用。</p>
 <figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    num := <span class="number">91</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> num &gt;= <span class="number">60</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;hi true&quot;</span>)</span><br><span class="line">        <span class="keyword">goto</span> PASS</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;hi false&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    PASS:</span><br><span class="line">        fmt.Println(<span class="string">&quot;hi pass&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>for 迴圈<br> 在 go 中 for 迴圈的功能強大，既可以被當做循環讀取資料，又可以當做 while 來控制邏輯，還能反覆操作運算，以下介紹 for 語法：</p>
 <figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> 變數宣告或函式回傳值; 條件判斷; 每輪結束時操作 &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> 我們接著使用食譜範例，中火快炒，翻五次面：</p>
 <figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> index := <span class="number">0</span>; index &lt; <span class="number">5</span>; index++ &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;翻面&quot;</span>, index + <span class="number">1</span>, <span class="string">&quot;次&quot;</span>)        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> 當我們不知道具體要迴圈幾次時可以使用 <code>while</code>，但由於 Go 中沒有 <code>while</code> 關鍵字，當忽略了 <code>;</code>，就可以當 <code>while</code> 迴圈使用：</p>
 <figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 從 1 加到 10</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    sum := <span class="number">0</span></span><br><span class="line">    i := <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i &lt;= <span class="number">10</span> &#123;</span><br><span class="line">        sum += i</span><br><span class="line">        i++</span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Println(sum)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> 使用 break 和 continue 可以跳出整個循環和跳過當下：</p>
 <figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 從 1 加到 10</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    sum := <span class="number">0</span></span><br><span class="line">    i := <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i &lt;= <span class="number">10</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> i == <span class="number">3</span> &#123;</span><br><span class="line">            <span class="keyword">break</span>; <span class="comment">// continue 跳過 3，break 到 3 整個循環跳出</span></span><br><span class="line">        &#125;</span><br><span class="line">        sum += i</span><br><span class="line">        i++</span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Println(sum)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> 善用 <code>for</code> 也可以把 <code>slice</code> 和 <code>map</code> 資料一一取出：</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import &quot;fmt&quot;</span><br><span class="line"></span><br><span class="line">for key, value := range map &#123; // 也可以忽略其中一值，for _, value := range map</span><br><span class="line">    fmt.Println(key, value)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>switch<br> 當我們需要寫很多 <code>if...else</code> 時就是使用 <code>switch</code> 的好時機：</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import &quot;fmt&quot;</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">    i := 2</span><br><span class="line">    switch i &#123;</span><br><span class="line">        case 1:</span><br><span class="line">            fmt.Println(&quot;hello:&quot;, i) // go 中不用加 break 會自己跳出不會往下執行</span><br><span class="line">        case 2:</span><br><span class="line">            fmt.Println(&quot;hello:&quot;, i) // 加上 fallthrough 可以強制往下執行</span><br><span class="line">            fallthrough</span><br><span class="line">        default:</span><br><span class="line">            fmt.Println(&quot;hello: default&quot;)        </span><br><span class="line">    &#125;	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h1><p>以上就是關於 Go 程式語言的基本語法中流程控制介紹，接下來的文章我們將透過 Golang Web 程式設計來學習 Go 這個程式語言的方方面面。</p>
<h1 id="參考文件"><a href="#參考文件" class="headerlink" title="參考文件"></a>參考文件</h1><ol>
<li><a href="https://tour.golang.org/welcome/1">A tour of go</a></li>
<li><a href="https://www.tutorialspoint.com/go/">Go Tutorial</a></li>
<li><a href="https://gobyexample.com/">Go by Example</a></li>
<li><a href="https://www.toptal.com/go/go-programming-a-step-by-step-introductory-tutorial">Go Programming Language: An Introductory Tutorial</a></li>
<li><a href="https://github.com/davidhoo/go-tour">Go tour Exercise</a></li>
<li><a href="https://github.com/golang/go/wiki/Ubuntu">Ubuntu Go install</a></li>
<li><a href="http://www.ithome.com.tw/voice/99698">從Go看現代程式語言</a></li>
</ol>
<p>（image via <a href="http://www.cuelogic.com/blog/wp-content/uploads/2017/06/go_lang1.png">cuelogic</a>）</p>
]]></content>
      <tags>
        <tag>GO, GO lang, golang, web, go web, 自學程式, 自學程式設計, 程式設計, 線上自學, coding, coder, programming, computer, computer science, code, 電腦科學, 學寫程式, 學程式</tag>
      </tags>
  </entry>
  <entry>
    <title>Go Web 程式設計入門教學：語法基礎之函式（function）篇</title>
    <url>/2017/07/01/golang101-tutorial-basic-function/</url>
    <content><![CDATA[<p><img src="/images/golang101/logo.png" alt="Go Web 程式設計入門教學"></p>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>前面單元我們介紹了如何使用流程控制改變我們的程式執行順序，接下來的單元我們將透過 Golang Web 程式設計來學習 Go 這個程式語言。而在這個單元中我們將介紹 Go 函式的使用。程式語言唯有動手作才能學的好，你可以參考之前的文章建置開發環境或是<a href="https://play.golang.org/">使用線上開發環境</a>進行學習。</p>
<h1 id="函式簡介"><a href="#函式簡介" class="headerlink" title="函式簡介"></a>函式簡介</h1><p>有經驗的程式設計都知道程式撰寫的維護性很重要，其中模組化就是很重要的元素。當我們有一組程式出現過兩三次，那就很適合把它當做函式包裝起來。在程式語言中函式和數學上的函數有蠻多類似之處。我們可以把函式想成是一個黑盒子，透過呼叫函式可以完成我們想要做的工作，可能是傳入參數相加或是執行某段沒有回傳值的程式碼。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 有一個關鍵字 func 其後接函式命名，可以傳入參數名稱和其資料型別（也可以不傳參數），後面是帶若有回傳值時的回傳值名稱和資料型別（也可以沒有回傳值）</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">funcName</span><span class="params">(input1 type1, input2 type2)</span></span> (output1 type1, output2 type2) &#123;</span><br><span class="line">    <span class="comment">// 若有回傳值</span></span><br><span class="line">    <span class="keyword">return</span> value1, value2</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li><p>基本函式<br> 基本款的函式就是有函式名稱，傳入參數和回傳值：</p>
 <figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">(a, b <span class="type">int</span>)</span></span> <span class="type">int</span> &#123; <span class="comment">// 當只傳一個回傳值且沒有定義回傳值變數時可以簡化括號</span></span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(add(<span class="number">1</span>, <span class="number">2</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>多回傳值</p>
 <figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">addAndProduct</span><span class="params">(a, b <span class="type">int</span>)</span></span> (<span class="type">int</span>, <span class="type">int</span>) &#123; <span class="comment">// 多回傳值要用括號括起</span></span><br><span class="line">    <span class="keyword">return</span> a + b, a * b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(addAndProduct(<span class="number">1</span>, <span class="number">2</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>長度不固定參數</p>
 <figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">argFunc</span><span class="params">(arg ...<span class="type">int</span>)</span></span> &#123;&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>傳值與傳指標<br> 一般來說我們傳入函式的參數是複製一份傳入，改動參數不會影響原有值。若今天我們傳入的不是複製值而是記憶體位置的指標，則會更改到原有值。</p>
 <figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">(a <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a + <span class="number">10</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    a := <span class="number">1</span></span><br><span class="line">    fmt.Println(add(a)) <span class="comment">// 11</span></span><br><span class="line">    fmt.Println(a) <span class="comment">// 1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> 換傳指標進去：</p>
 <figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">(a *<span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    *a = *a + <span class="number">10</span></span><br><span class="line">    <span class="keyword">return</span> *a</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    a := <span class="number">1</span></span><br><span class="line">    fmt.Println(add(&amp;a)) <span class="comment">// 11</span></span><br><span class="line">    fmt.Println(a) <span class="comment">// 11</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>defer<br> 採用後進先出方式在函式全部執行結束前執行，常用於開啟資源後關閉檔案：</p>
 <figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ReadFile</span><span class="params">()</span></span> <span class="type">bool</span> &#123;</span><br><span class="line">    file.Open(<span class="string">&quot;./file.txt&quot;</span>)</span><br><span class="line">    <span class="keyword">defer</span> file.Close()</span><br><span class="line">    <span class="keyword">if</span> failureA &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> failureB &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>函式當做值和類型</p>
 <figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> test <span class="function"><span class="keyword">func</span><span class="params">(<span class="type">int</span>)</span></span> (<span class="type">bool</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">testIt</span><span class="params">(f test, a <span class="type">int</span>)</span></span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Panic、Recover<br> 中斷程式進入 panic 狀態，用 Recover 可以恢復</p>
</li>
</ol>
<h1 id="模組"><a href="#模組" class="headerlink" title="模組"></a>模組</h1><ol>
<li><p>main 函式和 init 函式</p>
<p> 當程式很複雜時，可以拆成不同 package 和檔案，其中 package main 為必要，其於 package 可以放置其他函式，在 Go 中函式或變數開頭大寫代表公有露出可以讓其他套件使用，反之為私有。其中 main 和 init 是保留函式，init 函式可以用於所有 package，main 用於 package main。Go 語言會自動呼叫兩者，init 是可選的，程式初始化是從 main 開始，如果有匯入其他套件會在編譯時依序匯入。如果有一個套件被引入多次，只會被引入一次。</p>
<p> 相對路徑：</p>
 <figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;./model&quot;</span> <span class="comment">// 同一目錄的 model 下</span></span><br></pre></td></tr></table></figure>

<p> 絕對路徑：</p>
 <figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;xxx/model&quot;</span> <span class="comment">// gopath/src/xxx/model</span></span><br></pre></td></tr></table></figure>

<p> 一般引用套件用法：</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import (</span><br><span class="line">    &quot;fmt&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">fmt.Println(&quot;hi&quot;)</span><br></pre></td></tr></table></figure>

<p> 點用法：</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import (</span><br><span class="line">   . &quot;fmt&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">Println(&quot;hi&quot;)</span><br></pre></td></tr></table></figure>

<p> 別名：</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import (</span><br><span class="line">   f &quot;fmt&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">f.Println(&quot;hi&quot;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p> 只執行套件中 init，不使用裡面函式：</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import (</span><br><span class="line">   _ &quot;fmt&quot;</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h1><p>以上就是關於 Go 程式語言的基本語法中流程控制介紹，接下來的文章我們將透過 Golang Web 程式設計來學習 Go 這個程式語言的方方面面。</p>
<h1 id="參考文件"><a href="#參考文件" class="headerlink" title="參考文件"></a>參考文件</h1><ol>
<li><a href="https://tour.golang.org/welcome/1">A tour of go</a></li>
<li><a href="https://www.tutorialspoint.com/go/">Go Tutorial</a></li>
<li><a href="https://gobyexample.com/">Go by Example</a></li>
<li><a href="https://www.toptal.com/go/go-programming-a-step-by-step-introductory-tutorial">Go Programming Language: An Introductory Tutorial</a></li>
<li><a href="https://github.com/davidhoo/go-tour">Go tour Exercise</a></li>
<li><a href="https://github.com/golang/go/wiki/Ubuntu">Ubuntu Go install</a></li>
<li><a href="http://www.ithome.com.tw/voice/99698">從Go看現代程式語言</a></li>
</ol>
<p>（image via <a href="http://www.cuelogic.com/blog/wp-content/uploads/2017/06/go_lang1.png">cuelogic</a>）</p>
]]></content>
      <tags>
        <tag>GO, GO lang, golang, web, go web, 自學程式, 自學程式設計, 程式設計, 線上自學, coding, coder, programming, computer, computer science, code, 電腦科學, 學寫程式, 學程式</tag>
      </tags>
  </entry>
  <entry>
    <title>Go Web 程式設計入門教學：語法基礎之變數（variable）和資料型別（type）篇</title>
    <url>/2017/07/01/golang101-tutorial-basic-variable/</url>
    <content><![CDATA[<p><img src="/images/golang101/logo.png" alt="Go Web 程式設計入門教學"></p>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>前面單元我們介紹了如何建置 Go 開發環境，接下來的單元我們將透過 Golang Web 程式設計來學習 Go 這個程式語言。而在這個單元中我們將介紹 Go 的變數和常數宣告以及資料型別的使用。程式語言唯有動手作才能學的好，你可以參考之前的文章建置開發環境或是<a href="https://play.golang.org/">使用線上開發環境</a>進行學習。</p>
<h1 id="定義變數和使用"><a href="#定義變數和使用" class="headerlink" title="定義變數和使用"></a>定義變數和使用</h1><p>變數是程式語言中暫存資料的盒子，在 Go 中比較特別的是定義變數有多種方式（特別的是 Go 語言和 C 語言在設計上比較不同的地方是 Go 語言把變數型別宣告放在變數名稱後面），以下列出比較常見的變數使用方式：</p>
<ol>
<li><p>一般變數宣告</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// var 關鍵字 變數名稱 資料型別</span><br><span class="line">var varName type</span><br></pre></td></tr></table></figure>

<p> 範例：</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var str string</span><br></pre></td></tr></table></figure>
</li>
<li><p>定義多個變數</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var var1Name, varName2 type</span><br></pre></td></tr></table></figure>

<p> 範例：</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var str1, str2 string</span><br></pre></td></tr></table></figure>
</li>
<li><p>定義變數並初始化</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var varName type = value</span><br></pre></td></tr></table></figure>
</li>
<li><p>同時初始化多個變數</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var varName1, varName2, varName3 type = v1, v2, v3</span><br></pre></td></tr></table></figure>
</li>
<li><p>簡化宣告</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var varName1. varName2, varName3 = v1, v2, v3</span><br></pre></td></tr></table></figure>

<p> 另外一種是使用 <code>:=</code> 符號取代 <code>var</code> 和 <code>type</code>，但要注意的是這樣的方式只能在函式內部使用，若是在全域使用會出現編譯錯誤，一般使用 <code>var</code> 定義全域變數。它的變數生命週期為 <code>block</code> 內。</p>
 <figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 編譯錯誤</span></span><br><span class="line">str0 := <span class="string">&quot;world&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> str1 = <span class="string">&quot;hello&quot;</span></span><br><span class="line">    str2 := <span class="string">&quot;world&quot;</span></span><br><span class="line">    fmt.Println(num)</span><br><span class="line">    fmt.Println(str1)</span><br><span class="line">    fmt.Println(str2)</span><br><span class="line">    <span class="keyword">if</span> <span class="literal">true</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> str3 = <span class="string">&quot;XD&quot;</span> <span class="comment">// str3 := &quot;XD&quot;</span></span><br><span class="line">        fmt.Println(num)</span><br><span class="line">        fmt.Println(str1)</span><br><span class="line">        fmt.Println(str2)</span><br><span class="line">        fmt.Println(str3)</span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Println(num)</span><br><span class="line">    fmt.Println(str1)</span><br><span class="line">    fmt.Println(str2)</span><br><span class="line">    <span class="comment">// 變數生命週期結束 undefined 錯誤</span></span><br><span class="line">    fmt.Println(str3)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> 值得注意的若是在函式內宣告但沒使用會出現編譯錯誤：</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import &quot;fmt&quot;</span><br><span class="line"></span><br><span class="line">var num = 10</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">    var str = &quot;hello&quot;</span><br><span class="line">    fmt.Println(str)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./main.go:10:6: str declared and not used</span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="定義常數"><a href="#定義常數" class="headerlink" title="定義常數"></a>定義常數</h1><p>常數和變數不同是在編譯時就確認值，在程式執行期間不可以更改值。在 Go 程式語言使用 <code>const</code> 定義常數，其語法如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const constName = value</span><br><span class="line">const Pi = 3.14</span><br><span class="line">const Name string = &quot;Mark&quot;</span><br></pre></td></tr></table></figure>

<h1 id="內建簡單資料型別"><a href="#內建簡單資料型別" class="headerlink" title="內建簡單資料型別"></a>內建簡單資料型別</h1><ol>
<li><p>布林值<br> 在 Go 布林值是 <code>true</code> 或 <code>false</code>，預設為 <code>false</code>。</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var isActived = true</span><br></pre></td></tr></table></figure>
</li>
<li><p>數字<br> 在 Go 語言中主要分為 <code>int</code> 和 <code>uint</code> 兩類型數字資料型別，個別之間還有位元可以做選擇，例如：<code>int32</code>。注意兩種數字資料型別不能互相設定或操作（例如：相加）</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var num = 12</span><br></pre></td></tr></table></figure>
</li>
<li><p>字串<br> Go 語言中使用 UTF-8 字元編碼，使用 <code>&quot;&quot;</code> 來包裹字串：</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var str string = &quot;hello&quot;</span><br><span class="line">str[1] // e</span><br><span class="line"></span><br><span class="line">ch = []byte(str)</span><br><span class="line">ch[1] = &#x27;w&#x27;</span><br><span class="line">str2 = string(ch)</span><br><span class="line">fmt.Println(str2) // hwllo</span><br></pre></td></tr></table></figure>
</li>
<li><p>錯誤類型<br> 在 Go 語言中有一個 <code>error</code> 類型，在套件中也有個 <code>errors</code> 負責處理錯誤訊息：</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import errors</span><br><span class="line">err := errors.New(&quot;throw error&quot;)</span><br><span class="line"></span><br><span class="line">if err != nil &#123;</span><br><span class="line">    fmt.Println(err)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="複雜資料型別"><a href="#複雜資料型別" class="headerlink" title="複雜資料型別"></a>複雜資料型別</h1><ol>
<li><p>array<br> array 就是一般程式語言的陣列，基本上和其他程式語言相同：</p>
 <figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 變數名稱 [長度]類別</span></span><br><span class="line"><span class="keyword">var</span> arrayName [n]<span class="keyword">type</span></span><br></pre></td></tr></table></figure>

<p> 陣列長度宣告後不能改變，傳入函式為副本，若需要傳指標進去可以使用 <code>slice</code>。實際使用方式：</p>
 <figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 宣告長度為 10 類型為 int 的陣列</span></span><br><span class="line"><span class="keyword">var</span> arr [<span class="number">10</span>]<span class="type">int</span></span><br><span class="line">arr[<span class="number">0</span>] = <span class="number">7</span></span><br><span class="line">arr[<span class="number">1</span>] = <span class="number">13</span></span><br><span class="line"></span><br><span class="line">a := [<span class="number">3</span>]<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">b := [<span class="number">10</span>]<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line"><span class="comment">// 自動計算元素長度</span></span><br><span class="line">c := [...]<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line"><span class="comment">// 二維陣列</span></span><br><span class="line">dArry := [<span class="number">2</span>][<span class="number">4</span>]&#123;[<span class="number">3</span>]&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;, [<span class="number">3</span>]&#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>slice<br> 有時候我們不會一開始就知道需要宣告多長的陣列，這時就需要使用動態陣列（是一個參考類型，總是指向底層 array）：slice，其使用方式：</p>
 <figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> sliceName = []<span class="keyword">type</span></span><br></pre></td></tr></table></figure>

<p> 實際使用：</p>
 <figure class="highlight go"><table><tr><td class="code"><pre><span class="line">slice = []<span class="type">byte</span>&#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line">array = [<span class="number">3</span>]<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line">bySlice := </span><br></pre></td></tr></table></figure>
</li>
<li><p>map<br> map 和其他程式語言的 dict 和 hash map 相似，使用方式：</p>
 <figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> mapName = <span class="keyword">map</span>[keyType]valueType</span><br></pre></td></tr></table></figure>

<p> key 可以是除了 int 外其他類型，取值使用 key 取值：</p>
 <figure class="highlight go"><table><tr><td class="code"><pre><span class="line">   <span class="comment">// 第一種宣告方式</span></span><br><span class="line">   <span class="keyword">var</span> numbers <span class="keyword">map</span>[<span class="type">string</span>] <span class="type">int</span></span><br><span class="line">   <span class="comment">// 第二種宣告方式</span></span><br><span class="line">   numbers := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">string</span>]<span class="type">int</span>)</span><br><span class="line">   numbers[<span class="string">&quot;one&quot;</span>] = <span class="number">1</span></span><br><span class="line">   numbers[<span class="string">&quot;two&quot;</span>] = <span class="number">7</span></span><br><span class="line">   numbers[<span class="string">&quot;three&quot;</span>] = <span class="number">13</span></span><br><span class="line">   fmt.Println(<span class="string">&quot;three&quot;</span>, numbers[<span class="string">&quot;three&quot;</span>])</span><br><span class="line"></span><br><span class="line">   <span class="comment">// key 數量</span></span><br><span class="line">m := <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">int</span> &#123;<span class="string">&quot;1&quot;</span>: <span class="number">1</span>, <span class="string">&quot;3&quot;</span>: <span class="number">2</span>&#125;</span><br><span class="line">fmt.Println(<span class="built_in">len</span>(m))</span><br><span class="line"></span><br><span class="line">   <span class="comment">// map 新增、刪除、修改、查找</span></span><br><span class="line">   numbers[<span class="string">&quot;three&quot;</span>] = <span class="number">13</span></span><br><span class="line">   value, ok := numbers[<span class="string">&quot;three&quot;</span>]</span><br><span class="line">   numbers[<span class="string">&quot;three&quot;</span>] = <span class="number">17</span></span><br><span class="line">   <span class="built_in">delete</span>(numbers[<span class="string">&quot;three&quot;</span>])</span><br></pre></td></tr></table></figure>

<p> 此外 map 是無序的，也是個參考類型指到底層：</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">numbers := make(map[string]int)</span><br><span class="line"></span><br><span class="line">numbers[&quot;three&quot;] = 13</span><br><span class="line">numbers2 := numbers</span><br><span class="line">numbers2[&quot;three&quot;] = 1 // numbers[&quot;three&quot;] 也變成 1</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="make、new-比較"><a href="#make、new-比較" class="headerlink" title="make、new 比較"></a>make、new 比較</h1><p>make 一般用於內建資料型別（map、slice 和 channel）的記憶體分配，而 new 用於各種類型記憶體分配。make 回傳有初值的 T 類型，而 new 回傳指標。</p>
<h1 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h1><p>以上就是關於 Go 程式語言的基本語法中的變數和資料型別介紹，接下來的文章我們將透過 Golang Web 程式設計來學習 Go 這個程式語言的方方面面。</p>
<h1 id="參考文件"><a href="#參考文件" class="headerlink" title="參考文件"></a>參考文件</h1><ol>
<li><a href="https://tour.golang.org/welcome/1">A tour of go</a></li>
<li><a href="https://www.tutorialspoint.com/go/">Go Tutorial</a></li>
<li><a href="https://gobyexample.com/">Go by Example</a></li>
<li><a href="https://www.toptal.com/go/go-programming-a-step-by-step-introductory-tutorial">Go Programming Language: An Introductory Tutorial</a></li>
<li><a href="https://github.com/davidhoo/go-tour">Go tour Exercise</a></li>
<li><a href="https://github.com/golang/go/wiki/Ubuntu">Ubuntu Go install</a></li>
<li><a href="http://www.ithome.com.tw/voice/99698">從Go看現代程式語言</a></li>
</ol>
<p>（image via <a href="http://www.cuelogic.com/blog/wp-content/uploads/2017/06/go_lang1.png">cuelogic</a>）</p>
]]></content>
      <tags>
        <tag>GO, GO lang, golang, web, go web, 自學程式, 自學程式設計, 程式設計, 線上自學, coding, coder, programming, computer, computer science, code, 電腦科學, 學寫程式, 學程式</tag>
      </tags>
  </entry>
  <entry>
    <title>Go Web 程式設計入門教學：基礎介紹與環境建置</title>
    <url>/2017/07/01/golang101-tutorial-introduction/</url>
    <content><![CDATA[<p><img src="/images/golang101/logo.png" alt="Go Web 程式設計入門教學"></p>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><a href="https://en.wikipedia.org/wiki/Go_(programming_language">Go 程式語言</a> 是 Google 推出的靜態程式語言，其特色在於核心語法和關鍵字非常精簡（全部只有 25 個關鍵字！）並擷取了靜態語言的效能和動態語言的開發效率的優點，具備垃圾回收、快速編譯等特性，且針對平行化程式設計在使用上非常方便。接下來的文章我們將透過 Golang Web 程式設計來學習 Go 這個程式語言。程式語言唯有動手作才能學的好，你可以參考本篇文章建置開發環境或是<a href="https://play.golang.org/">使用線上開發環境</a>進行學習。</p>
<h1 id="Go-環境建置"><a href="#Go-環境建置" class="headerlink" title="Go 環境建置"></a>Go 環境建置</h1><p>安裝方式：</p>
<ol>
<li><p><a href="https://golang.org/">官網套裝安裝</a>，線上也有官方提供的 <a href="https://play.golang.org/">playground</a> 線上執行環境可以使用</p>
</li>
<li><p>使用套件管理工具 homebrew（mac）、apt-get（linux） 等進行安裝</p>
<p> 例如，在 linux 上安裝：</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sudo apt-get install golang-go</span><br></pre></td></tr></table></figure>

<p> 或是主動宣告版本</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sudo apt-get install golang-1.8-go</span><br></pre></td></tr></table></figure>

<p> 在 mac 上安裝：</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ brew install go</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用 gcc、MinGW（windows）等編譯器編譯原始 Go 檔案</p>
</li>
</ol>
<p>對於一般初學者來說，可以使用官網或是套件管理工具來安裝，可以留意<code>環境變數</code>是否有設定成功。</p>
<p>若有成功安裝，可以打開終端機執行 go version 會出現相關版本訊息，以下是 mac 的範例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ go version</span><br><span class="line">go version go1.9 darwin/amd64</span><br></pre></td></tr></table></figure>

<p>在 Go 中也提供了許多方便指令，方便我們編譯、測試和執行程式：</p>
<p><img src="/images/golang101/go-command.png" alt="Go Web 程式設計入門教學"></p>
<p>編譯檔案</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ go build</span><br></pre></td></tr></table></figure>

<p>執行單元測試（unit testing），Go 一開始就內建了測試的機制，執行 go test 的話，會自動讀取套件目錄中的 *_test.go 來進行編譯、測試</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ go test</span><br></pre></td></tr></table></figure>

<p>讓程式可以格式化 formatting，符合 go 的 convention</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ go fmt</span><br></pre></td></tr></table></figure>

<p>安裝套件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ go get</span><br></pre></td></tr></table></figure>

<p>靜態分析潛在 bug</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ go vet</span><br></pre></td></tr></table></figure>

<p>可以快速 build 並執行程式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ go run</span><br></pre></td></tr></table></figure>

<p>展示 go 相關文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ godoc</span><br></pre></td></tr></table></figure>

<p>重新命名變數和函式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ gorename</span><br></pre></td></tr></table></figure>

<p>產生程式碼</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ go generate</span><br></pre></td></tr></table></figure>

<h1 id="你的第一個-Go-程式"><a href="#你的第一個-Go-程式" class="headerlink" title="你的第一個 Go 程式"></a>你的第一個 Go 程式</h1><p>在 Go 中程式運行的入口是套件 main。在這個程式中使用並導入了套件 “fmt”，在 Go 程式中程式執行入口是 main function，若成功在終端機執行 <code>$ go run</code>，則會在終端機印出 <code>Hello, World!</code> 的 Go 程式，恭喜完成你的第一個 Go 程式了！</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 宣告程式屬於哪個 package</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入套件</span></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 程式執行入口</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 使用 fmt 套件印出字串 word，使用 := 簡化原本變數宣告 var word string = &quot;Hello, World!&quot;</span></span><br><span class="line">    word := <span class="string">&quot;Hello, World!&quot;</span></span><br><span class="line">    fmt.Println(word)</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<p>另外一個範例是引入了 <code>math/rand</code> 套件產生隨機整數（由於環境中 seed 一樣所以會印出同樣值）</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">  <span class="string">&quot;fmt&quot;</span></span><br><span class="line">  <span class="string">&quot;math/rand&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Println(<span class="string">&quot;My favorite number is&quot;</span>, rand.Intn(<span class="number">10</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Go 有支援許多網路程式開發的套件，可以用很簡單的幾行就完成網路伺服器的建置：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;io&quot;</span></span><br><span class="line">    <span class="string">&quot;net/http&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 處理 request 和 response 的函式</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">hello</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">    <span class="comment">// 印出 hello world</span></span><br><span class="line">    io.WriteString(w, <span class="string">&quot;Hello world!&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// router 讓網址可以對應處理函式</span></span><br><span class="line">    http.HandleFunc(<span class="string">&quot;/&quot;</span>, hello)</span><br><span class="line">    <span class="comment">// 監聽 8000 port</span></span><br><span class="line">    http.ListenAndServe(<span class="string">&quot;:8000&quot;</span>, <span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h1><p>以上就是關於 Go 程式語言的基本教學介紹和環境建置，接下來的文章我們將透過 Golang Web 程式設計來學習 Go 這個程式語言的方方面面。</p>
<h1 id="參考文件"><a href="#參考文件" class="headerlink" title="參考文件"></a>參考文件</h1><ol>
<li><a href="https://tour.golang.org/welcome/1">A tour of go</a></li>
<li><a href="https://www.tutorialspoint.com/go/">Go Tutorial</a></li>
<li><a href="https://gobyexample.com/">Go by Example</a></li>
<li><a href="https://www.toptal.com/go/go-programming-a-step-by-step-introductory-tutorial">Go Programming Language: An Introductory Tutorial</a></li>
<li><a href="https://github.com/davidhoo/go-tour">Go tour Exercise</a></li>
<li><a href="https://github.com/golang/go/wiki/Ubuntu">Ubuntu Go install</a></li>
<li><a href="http://www.ithome.com.tw/voice/99698">從Go看現代程式語言</a></li>
</ol>
<p>（image via <a href="http://www.cuelogic.com/blog/wp-content/uploads/2017/06/go_lang1.png">cuelogic</a>）</p>
]]></content>
      <tags>
        <tag>GO, GO lang, golang, web, go web, 自學程式, 自學程式設計, 程式設計, 線上自學, coding, coder, programming, computer, computer science, code, 電腦科學, 學寫程式, 學程式</tag>
      </tags>
  </entry>
  <entry>
    <title>Go Web 程式設計入門教學：Web 基礎</title>
    <url>/2017/07/02/golang101-tutorial-web-basic/</url>
    <content><![CDATA[<p><img src="/images/golang101/logo.png" alt="Go Web 程式設計入門教學"></p>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>前面幾個單元中我們介紹了許多 <a href="https://en.wikipedia.org/wiki/Go_(programming_language">Go 程式語言</a> 的基本語法，讓我們了解了 Go 程式語言的用法。接下來我們將透過 Go 來架設簡單的 Web Server。</p>
<h1 id="Web-基本工作流程"><a href="#Web-基本工作流程" class="headerlink" title="Web 基本工作流程"></a>Web 基本工作流程</h1><p><img src="/images/golang101/http-req-resp.jpg" alt="Go Web 程式設計入門教學"></p>
<p>在我們平常透過瀏覽器（Browser）瀏覽網站時，其背後事實上進行了一連串 Client 客戶端和 Server 伺服器端的互動，以下介紹 Web Server 工作流程簡介：</p>
<ol>
<li>使用者在瀏覽器（Browser）網址列輸入 URL，瀏覽器會透過 DNS 伺服器進行解析，取得 Domain 對應伺服器（Server）的 IP 位置</li>
<li>找到對應 Server IP 後，Client 透過 TCP&#x2F;IP 協定建立到 Server 的 TCP 連接</li>
<li>Client 向 Server 發送 http 協定請求（request）封包，請求 server 資料</li>
<li>若請求資源中有動態網站的內容，Server 端會先呼叫伺服器端的程式語言解譯引擎負責處理內容。Server 將組好的內容向 Client 發送 http 協定回應（response）封包</li>
<li>Client 和 Server 中斷 TCP 連線，等待下一次請求。由 Client 解析收到的回應（response）封包內容（body），在瀏覽器繪製 HTML&#x2F;CSS&#x2F;JavaScript 檔案內容</li>
</ol>
<p><img src="/images/golang101/http-req.png" alt="Go Web 程式設計入門教學"></p>
<ul>
<li>URL 解析</li>
</ul>
<p>一般 URL（Uniform Resource Locator）結構大概長這樣：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Scheme://host&#123;:port#&#125;/path/.../[?query-string][#anchor]</span><br></pre></td></tr></table></figure>

<pre><code>1. scheme：底層使用的協定（例如：https、http 或 ftp 等）
2. host：http 伺服器 ip 位置或 domain
3. port：http 預設是 80 可以省略，如果是使用其他則需要填寫，可以想成是 ip 的名牌號碼
4. path：資源路徑
5. query-string：使用 get 傳送的參數
6. anchor：記錄超連結錨點
</code></pre>
<ul>
<li><p>DNS（Domain Name System）解析路徑</p>
<ol>
<li>輸入網址，查找本機的 host 檔案</li>
<li>若 host 沒有 domain&#x2F;ip 對應，則查找本機的 DNS 解析器快取</li>
<li>若 host&#x2F;本機 DNS 快取都沒有 domain 對應則解析 TCP&#x2F;IP 參數中設定的第一個 DNS 伺服器或其快取回傳（不具權威性）</li>
<li>若都故障，則會由 domain 右往左查找對應 DNS 伺服器（轉發&#x2F;非轉發模式），回傳給本機 DNS 伺服器</li>
</ol>
</li>
<li><p>HTTP request 請求解析<br>  接著我們聊聊在 HTTP 協定中有定義許多和伺服器互動的方式，最基本的有四種：<code>GET</code>、<code>POST</code>、<code>PUT</code>、<code>DELETE</code>，分別對應資源的查增更刪，最常見的舊是 <code>GET</code>、<code>POST</code>。</p>
<p>  其中 GET 會把傳送資料放在網址後面，資料為明碼且有長度限制，一般用於查找資料。而 POST 資料傳遞主要是放在 http request 的 body 中，所以新增資料或是傳遞較敏感資料通常會用 POST 傳送</p>
</li>
<li><p>HTTP response 回應解析<br>  http response 封包組成由版本編號、狀態碼、狀態訊息組成</p>
<p>  HTTP 狀態碼是使用三位數字組成，在 HTTP&#x2F;1.1 中定義五大類狀態碼：</p>
<p>  1XX 提示訊息<br>  2XX 成功<br>  3XX 重新導向<br>  4XX client 錯誤<br>  5XX server 錯誤</p>
</li>
</ul>
<h1 id="使用-Go-架設基本-Web-Server"><a href="#使用-Go-架設基本-Web-Server" class="headerlink" title="使用 Go 架設基本 Web Server"></a>使用 Go 架設基本 Web Server</h1><p>在 Go 中可以使用 <code>net/http</code> 套件建立 Web 伺服器：</p>
<ol>
<li>Request：使用者請求的資訊，包含 post, get, cookie 等</li>
<li>Response：伺服器需要回饋給使用者的資訊</li>
<li>Conn：使用者請求每次產生連結</li>
<li>Handler：處理請求和產生傳回資訊的處理邏輯</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">    &quot;fmt&quot;</span><br><span class="line">    &quot;net/http&quot;</span><br><span class="line">    &quot;log&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">// 處理函式</span><br><span class="line">func helloHandler(w http.ResponseWriter, r *http.Request) &#123;</span><br><span class="line">    fmt.Fprintf(w, &quot;hello world!&quot;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">    // 網址對應處理函式</span><br><span class="line">    http.HandleFunc(&quot;/&quot;, helloHandler)</span><br><span class="line">    // 監聽通訊 port</span><br><span class="line">    err := http.ListenAndServe(&quot;:7777&quot;, nil)</span><br><span class="line">    if err != nil &#123;</span><br><span class="line">        log.Fatal(&quot;ListenAndServe&quot;, err)</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">		log.Println(&quot;listen 7777&quot;)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h1><p>以上就是關於 Go 程式語言的 Web 基礎和 http 協定簡介，接下來的文章我們將透過 Golang Web 程式設計來學習 Go 這個程式語言的方方面面。</p>
<h1 id="參考文件"><a href="#參考文件" class="headerlink" title="參考文件"></a>參考文件</h1><ol>
<li><a href="https://tour.golang.org/welcome/1">A tour of go</a></li>
<li><a href="https://www.tutorialspoint.com/go/">Go Tutorial</a></li>
<li><a href="https://gobyexample.com/">Go by Example</a></li>
<li><a href="https://www.toptal.com/go/go-programming-a-step-by-step-introductory-tutorial">Go Programming Language: An Introductory Tutorial</a></li>
<li><a href="https://github.com/davidhoo/go-tour">Go tour Exercise</a></li>
<li><a href="https://github.com/golang/go/wiki/Ubuntu">Ubuntu Go install</a></li>
</ol>
<p>（image via <a href="https://image.slidesharecdn.com/rg-introductiontohtmlcssandjavascript-150206101801-conversion-gate01/95/rails-girls-introduction-to-html-css-11-638.jpg?cb=1423239531">slidesharecdn</a>、<a href="http://www.websiteoptimization.com/secrets/metrics/10-21-http-request.png">websiteoptimization</a>）</p>
]]></content>
      <tags>
        <tag>GO, GO lang, golang, web, go web, 自學程式, 自學程式設計, 程式設計, 線上自學, coding, coder, programming, computer, computer science, code, 電腦科學, 學寫程式, 學程式</tag>
      </tags>
  </entry>
  <entry>
    <title>想要自學程式？七個自學程式設計正確的觀念和心態</title>
    <url>/2019/01/28/how-to-learn-coding-and-computer-programming/</url>
    <content><![CDATA[<p><img src="/images/python101/coding101.jpeg" alt="想要自學程式？七個自學程式設計正確的觀念和心態"></p>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote>
<p>「軟體正在吃掉全世界。」（Software is eating the world.）</p>
</blockquote>
<p>這是知名創投也是 Netscape 瀏覽器共同創辦人 Marc Andreessen 的名言。</p>
<p>隨著科技的快速發展，我們生活中已經離不開網路、手機等科技電子產品，而這些科技電子產品，背後往往有電腦軟體程式在運作（想想你每天使用的 Google、Facebook、LINE、Youtube 等應用程式）。也因為全世界的學校陸續開始將程式設計課程列入課綱之中，從一般白領上班族到有小孩的家長，不論是否是資訊相關科系畢業都開始學習程式語言和程式設計相關知識。深怕沒有擁有這項程式語言第二專長會被小孩所嫌棄或是錯過加薪升職的大好機會。</p>
<p>然而隨著網路、軟體技術的日新月異，初學者往往會迷失在豐富的學習資源和除錯 debug 的挫折當中，喪失了程式設計本身創作的樂趣。所以這邊我們要分享自學程式設計必備觀念和心態，希望讓所有有自學程式設計需求的朋友，不再徬徨、無助。</p>
<h1 id="為什麼要學習程式設計？"><a href="#為什麼要學習程式設計？" class="headerlink" title="為什麼要學習程式設計？"></a>為什麼要學習程式設計？</h1><p>我們為什麼要學習程式設計？相信這是許多家長和初學者內心的疑問。</p>
<p>事實上，程式設計是一種介於藝術與科學的腦力創作運動。學習程式設計正確心態是透過學習程式設計理解電腦科學運作的原理和動手用科技技術解決生活上的問題。</p>
<p>在學習程式設計過程中可以培養<code>創造能力</code>（對，你只要有一台電腦和網路就有機會創造出幾千幾萬人使用的軟體或網路服務），<code>邏輯思考</code>、<code>團隊合作</code>、<code>自學能力</code>和<code>解決問題的能力</code>。</p>
<p>撰寫程式可以讓你可以學習怎麼樣把一個複雜的問題切分成一個個小問題，在這個過程中不但可以訓練邏輯思考、解決問題的能力。隨著專案越來越大、技術越來越複雜，你可能會需要和其他專案成員合作去解決和學習你不懂的新技術，是一個很好培養自學能力和團隊合作能力的機會。當然在過程中可能會因為長期關注電腦螢幕而需要適時的休息和運動（但現代人即便不寫程式也是每天盯著螢幕了：P），這也是為什麼幼稚園和國中小的學童們會建議先從<code>不插電學習程式設計</code>的教材和桌遊開始學習程式設計和電腦科學的邏輯觀念。</p>
<h1 id="確認目標和動機"><a href="#確認目標和動機" class="headerlink" title="確認目標和動機"></a>確認目標和動機</h1><p>最好學習程式設計的動機是因為想解透過科技解決生活上的問題（例如：想要寫一個記帳 App 給家人使用所以開始學習 Mobile App 開發，你可能需要學習 Android Java&#x2F;Kotlin 或 iOS Swift&#x2F;Objective-C）或是結合你現有的領域和電腦科學的應用。</p>
<p>若是你是因為想要轉職成為工程師&#x2F;程式設計師，這又是另外一個話題。若是這樣，你可以針對你想要學習的領域列出需要學習知識去一一攻克（直接上求職網站把心儀的工作要求做成一個 checklist 清單）。例如：我希望轉職 Web 前端工程師，我需要具備基本的 HTML&#x2F;CSS 語法和 JavaScript 程式語言的基礎或是我想轉職資料科學家，我需要具備 Python 或是 R 語言的基礎和理解機器學習和深度學習演算法等。</p>
<p>當具備正確的學習程式設計心態後，<code>以終為始</code>是學習程式設計最重要的一個環節，這是當你夜深人靜 debug 不出來時給自己最好的支持動力。事實上，程式語言只是一個創作的工具，你可以想像成設計師素描本和素描筆，雕刻大師的雕刻刀。幸運的是，程式設計只要一台電腦加上網路就可以開始。</p>
<h1 id="選擇合適的程式語言和工具"><a href="#選擇合適的程式語言和工具" class="headerlink" title="選擇合適的程式語言和工具"></a>選擇合適的程式語言和工具</h1><p>若你是完全的初學者，我們會建議你從以下程式語言開始入手，再一步步針對你有興趣的領域繼續鑽研。</p>
<p><img src="/images/python101/scratch-logo.jpg" alt="想要自學程式？七個自學程式設計正確的觀念和心態"></p>
<ol>
<li><a href="https://scratch.mit.edu/">Scratch</a><br>若是你是國中小學的學員，你可以從 Scratch 開始。Scratch 是 MIT 麻省理工學院所開發的電腦程式平台，透過拖拉積木的方式可以讓使用者學習電腦程式的邏輯和概念，創造出多媒體或是遊戲應用，蠻適合低年齡層的學員使用。更重要的是 Scratch 本身是一個全世界的社群平台，你可以分享自己的作品也可以觀摩學習其他人的作品、認識新朋友，教學相長。</li>
</ol>
<p><img src="/images/python101/python-logo.png" alt="想要自學程式？七個自學程式設計正確的觀念和心態"></p>
<ol start="2">
<li><a href="https://www.python.org/">Python</a><br>若是成人或是想直接學習正式一點程式語言的學生，我們會推薦由 Python 入手。為什麼是 Python 呢？因為對於初學者來說 Python 是一個簡單易學但又功能強大的程式語言（Python 不僅可以編寫 Web 網站、桌面應用程式、開發遊戲更是機器學習&#x2F;深度學習等資料科學應用的重要程式語言）。相較於其他 C&#x2F;C++ 或是 Java 等程式語言，Python 相對而言較為簡潔且容易閱讀，此外不用經過編譯（compile）即可以執行程式也對於初學者較為友善。</li>
</ol>
<p><img src="/images/python101/javascript-logo.png" alt="想要自學程式？七個自學程式設計正確的觀念和心態"></p>
<ol start="3">
<li><a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript">JavaScript</a><br>Java 和 JavaScript（簡稱 JS）和名字雖然很像但是卻是兩個不同的程式語言（可以說是熱狗和狗的差別），發展方向和應用層面也有所不同。隨著網際網路和瀏覽器引擎和 Node.js 的發展 JavaScript 的影響力有增無減。不再局限於瀏覽器的從早期的跑龍套到現在的獨挑大樑，現在不管是 Web 前後端、行動應用程式、桌面應用程式，甚至是深度學習等都可以使用 JavaScript 來開發。若是你想要開發有關 Web 相關的應用，更是必須學好 JavaScript，對於新手來說可以透過 Web 呈現和分享自己的作品是一個很有成就感的事情。但 JavaScript 技術變化很快，若是有有經驗的導師帶領可以少走許多冤枉路，且學習 JavaScript 通常需要搭配學習 HTML&#x2F;CSS 語法。</li>
</ol>
<p><img src="/images/python101/microbit-logo-logo.png" alt="想要自學程式？七個自學程式設計正確的觀念和心態"></p>
<ol start="4">
<li><a href="https://microbit.org/">Micro:bit</a><br>Micro Bit（也叫做 BBC Micro Bit）是由 BBC 所推出的具備藍牙、光感測器、溫度感測、加速儀等感測器的微電路版，適合對於嵌入式系統和物聯網、創客應用有興趣的讀者。可以使用 Python、JavaScript、積木式等程式語言自己動手製作機器人或是溫度監控器等有趣應用！</li>
</ol>
<h1 id="看書-上課，動手做點東西"><a href="#看書-上課，動手做點東西" class="headerlink" title="看書&#x2F;上課，動手做點東西"></a>看書&#x2F;上課，動手做點東西</h1><p>學習程式語言最好的方式就是買本你覺得合適入門書或是加入線上&#x2F;線下課程後，開始動手做點東西。真正做出點什麼東西，去解決生活上的問題才是驗證你是否學會程式語言最重要的指標（就像是學英文一樣，你背誦了很多單字，但從沒開口說過或是無法和國際友人溝通，那即便是多益或是托福考的再高分那也不算是真正學會英文）。和幾個志同道合的朋友一起做專案、參與實習、接案或是參與開放原始碼專案（Open source project）都是一個很好的方式。</p>
<p>學寫程式就像是學習烏克麗麗或是吉他等才藝一樣需要動手練習才會學得好，總而言之就是：</p>
<p>動手做點東西<br>動手做點東西<br>動手做點東西</p>
<p>很重要所以講三遍！</p>
<p><img src="/images/python101/stackoverflow.png" alt="想要自學程式？七個自學程式設計正確的觀念和心態"></p>
<h1 id="學會網路搜尋-Google-大法"><a href="#學會網路搜尋-Google-大法" class="headerlink" title="學會網路搜尋 Google 大法"></a>學會網路搜尋 Google 大法</h1><p>一般在學習程式設計遇到困難時，最好的解法就是把錯誤訊息或是遇到的問題去 <a href="https://www.google.com/">Google</a> 搜尋一下，大部分情況下都可以在網路得到對應的解答。另外，<a href="https://stackoverflow.com/">Stack Overflow 程式設計問答網站</a>和 <a href="https://github.com/">Github 開源程式碼集散地</a> 也是一個學習的好去處，沒事去逛逛，相信一定會有不少收穫。</p>
<p><img src="/images/python101/github.png" alt="想要自學程式？七個自學程式設計正確的觀念和心態"></p>
<h1 id="加入社群，尋找戰友"><a href="#加入社群，尋找戰友" class="headerlink" title="加入社群，尋找戰友"></a>加入社群，尋找戰友</h1><p>一個人寫 code 很孤獨，一群人寫 code 很幸福。在學習寫程式的過程是一條孤獨且漫長的道路，即便是經驗老道的老手也需要和不同領域的人請教，更何況是剛入門的新手。選擇一個友善的自學程式社群加入，可以讓你在學習程式語言的過程中更加順遂，而加入 <a href="https://www.facebook.com/groups/HappyCoderOrg">HappyCoder 自學程式設計學院</a> 相信是一個很好的選擇。</p>
<h1 id="學會有禮貌的問問題並紀錄學習心得"><a href="#學會有禮貌的問問題並紀錄學習心得" class="headerlink" title="學會有禮貌的問問題並紀錄學習心得"></a>學會有禮貌的問問題並紀錄學習心得</h1><p>當你卡關時你往往會希望尋求協助，但在尋求協助之前可以先自我評估所遇到的問題，可以讓你在問問題時可以更具體讓人明白也可以讓你在 Google 時可以找到合適關鍵字來搜尋（沒有人有義務一定要回答你的問題，幫助他人釐清問題是個好習慣）。</p>
<ol>
<li>你想要做什麼？</li>
<li>你已經嘗試過什麼方法？</li>
<li>結果如何？</li>
</ol>
<p>以上的問題最好回答可以具體一點。</p>
<p>例如說：</p>
<p><code>你想要做什麼？</code>我想在要 Windows 環境下安裝 Python 環境<br><code>你已經嘗試過什麼方法？</code>我已經在 Python 官方網站下載安裝完成<br><code>結果如何？</code>但我在 cmd 終端機指令中輸入 Python 指令時出現沒有這個指令的錯誤</p>
<p>又例如說：</p>
<p><code>你想要做什麼？</code>我想要在瀏覽器中跳出 comfirm 確認的提示框<br><code>你已經嘗試過什麼方法？</code>我打好了 JavaScript 程式碼，也儲存了<br><code>結果如何？</code>沒看到在瀏覽器成功執行，但在瀏覽器的開發者工具 console 顯示 Uncaught SyntaxError: Invalid or unexpected token 錯誤訊息 </p>
<p>有些時候透過回答這三個問題，問題就自己迎刃而解了。</p>
<p>有些時候撰寫程式一段時間後腦袋會變鈍或是肩膀頸部緊繃。適當時候休息一下，起身運動或是喝口水和人交談一下，或許回頭再試試就會有靈感也說不一定。</p>
<p>另外，當你完成一個程式專案或是解掉某個 bug 時，記得可以撰寫成技術文章（若是有心要轉職程式設計領域的同學，經營自己的 Github 和部落格真的很重要），不但可以豐富自己的專業履歷也可以強化自己的記憶方便未來查找外，更重要的是也可以幫助到下一個跟你遇到同樣問題的人喔！</p>
<p><img src="/images/python101/yoda.jpg" alt="想要自學程式？七個自學程式設計正確的觀念和心態"></p>
<h1 id="尋找導師，持續學習"><a href="#尋找導師，持續學習" class="headerlink" title="尋找導師，持續學習"></a>尋找導師，持續學習</h1><p>不管是在職場工作或是學習程式設計，有好的導師或是 role model 引導確實可以讓自己少走許多冤枉路和減少時間金錢的浪費。但一開始盡量不要找已經工作十年以上的工程師或是程式設計師（等到你要往架構師或是技術管理者邁進時再去找他們），對於新手來說，兩三年或三五年工作經驗的工程師和程式設計師剛好是個不會太有距離感，導師又能體會新手剛入門會遇到的挫折和煩惱，帶著誠懇和禮貌去尋找你身邊或是社群中願意帶你的導師。不過記得當你離開新手村後，若有機會也可以成為其他人的導師，取之於社群回饋於社群。</p>
<p>俗話說：師父領進門，修行在個人。若你有志於程式設計領域繼續鑽研，那就必須認知到 IT 行業是一個需要持續精進自我的領域。不管是技術還有如何設計產品、溝通協調、管理專案、撰寫簡潔漂亮的程式碼、設計架構等都需要持續地進修學習，唯有持續保持積極的學習態度和能力才是在這個領域持續保有競爭力的最佳保證。</p>
<h1 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h1><iframe width="100%" height="400" src="https://www.youtube.com/embed/Rx_UiFmhbfY" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

<p>以上我們整理了多年來自學程式設計的經驗，我們也曾花過許多冤枉錢和時間。在這邊分享自學程式設計必備觀念和心態，希望讓所有有自學程式設計需求的朋友，不再徬徨、無助。</p>
<p>最後複習一下自學程式設計必備觀念和心態：</p>
<ol>
<li>確認目標和動機</li>
<li>選擇合適的程式語言和工具</li>
<li>看書&#x2F;上課，動手做點東西</li>
<li>學會網路搜尋 Google 大法</li>
<li>加入社群，尋找戰友</li>
<li>學會有禮貌的問問題並紀錄學習心得</li>
<li>尋找導師，持續學習</li>
</ol>
<p>Happy Coding :)</p>
<h1 id="第-02-期-Python-程式設計入門共學營-【業界資深工程師導師帶你練功】熱烈報名中"><a href="#第-02-期-Python-程式設計入門共學營-【業界資深工程師導師帶你練功】熱烈報名中" class="headerlink" title="第 02 期 Python 程式設計入門共學營 【業界資深工程師導師帶你練功】熱烈報名中"></a>第 02 期 Python 程式設計入門共學營 【業界資深工程師導師帶你練功】熱烈報名中</h1><p><img src="/images/python101/co-learning-camp-python-basic-cover.png" alt="第 02 期 Python 程式設計入門共學營 【業界資深工程師導師帶你練功】熱烈報名中"></p>
<p>由業界資深工程師導師帶你零基礎入門 Python 程式設計，我們為你去蕪存菁梳理出最重要的核心觀念和知識點，讓學員在有限的時間和金錢內用最有效率的方式學習，讓你的自學程式設計不再孤單無助！Co-Learning Camp 程式設計共學營是一種新型態跨領域線上學習方式（翻轉教育學習法），透過線上互動式程式練習、社群共學和專題導向式學習方式來學習程式設計，進而培養第二專長和跨領域自學能力，提升你的職場競爭力，成為更好的自己。</p>
<p>你也想累積專題作品實作經驗，建立基本程式設計應用能力嗎？你也想培養第二專長和跨領域自學能力，提升你的職場競爭力，成為更好的自己嗎？</p>
<p>第 02 期 Python 程式設計入門共學營【8 週 24 個程式冒險 | 業界資深工程師導師帶你練功】熱烈報名中，名額有限，額滿為止！</p>
<p>活動時間：2019&#x2F;11&#x2F;23 - 2020&#x2F;01&#x2F;16<br>馬上報名成為更好的自己：<a href="https://happycoder.pros.is/ELD96">報名連結</a></p>
<h1 id="參考文件"><a href="#參考文件" class="headerlink" title="參考文件"></a>參考文件</h1><ol>
<li><a href="https://www.happycoder.org/2017/01/27/learning-coding-programming-tutorial-and-resource/">自學程式設計學習資源懶人包</a></li>
<li><a href="https://www.happycoder.org/2017/08/10/learning-programming-and-coding-with-python-introduction/">用 Python 自學程式設計：程式設計思維入門</a></li>
</ol>
<p>（image via <a href="http://negativespace.co/photos/coding-stock-photo-3/">negativespace.co</a>、<a href="https://ixxidesign.azureedge.net/media/1045225/07-Star-Wars-Yoda.jpg?width=562">yoda</a>）</p>
]]></content>
      <tags>
        <tag>自學程式</tag>
        <tag>自學程式設計</tag>
        <tag>程式設計</tag>
        <tag>coding</tag>
        <tag>programming</tag>
        <tag>code</tag>
        <tag>CS</tag>
        <tag>Computer</tag>
        <tag>Computer Science</tag>
        <tag>程式語言</tag>
        <tag>程式</tag>
      </tags>
  </entry>
  <entry>
    <title>如何在 Windows 打造 Python 開發環境設定基礎入門教學</title>
    <url>/2017/11/17/how-to-setup-python-development-environment-in-windows/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>如何設定開發環境應該是每個初學程式設計者的痛（即便是老手有時也會覺得苦惱），尤其當你需要在終端機（terminal）輸入指令（command）來操控你的指令時（好吧，若你完全只走圖形化介面，習慣 GUI 操作就另當別論，但若你有志於往程式設計領域發展，建議還是熟悉一下指令碼）。</p>
<p>要在 <a href="https:#zh.wikipedia.org/zh-tw/Linux">Linux</a>、<a href="https:#zh.wikipedia.org/zh-tw/MacOS">Mac OS</a> 這種屬於<a href="https:#zh.wikipedia.org/wiki/%E7%B1%BBUnix%E7%B3%BB%E7%BB%9F">類 Unix 系統</a>（指各種 Unix 的衍生系統，而 <a href="https:#zh.wikipedia.org/wiki/UNIX">Unix</a> 指的是一種電腦作業系統，具有多工、多使用者的特色，是許多作業系統的父親）上打造 Python 開發環境相對容易，但當你使用 Windows 作業系統並希望在終端機下指令操作或開發應用程式時，往往受限於環境而產生許多困難和誤踩地雷。因此，接下來本文將教大家如何在 Windows 打造屬於自己的 Python 開發環境（包含一般 Winodows 安裝和使用虛擬機在 Windows 環境下建立 Linux&#x2F;Ubuntu 作業系統，開發 Python 程式一般建議使用 Linux&#x2F;Ubuntu 環境避免環境設定除錯困擾）！</p>
<h1 id="開始建置-Python-開發環境"><a href="#開始建置-Python-開發環境" class="headerlink" title="開始建置 Python 開發環境"></a>開始建置 Python 開發環境</h1><p>所謂工欲善其事，必先利其器，在開始之前我們必須先建置相關的開發環境，讓自己從麻瓜（不會寫程式的人）變成擁有程式魔力的魔法師。以下介紹我們在接下來開發 Python Web 應用程式所需要安裝的開發環境工具（強烈建議使用 Virtual Box 虛擬機搭配 Linux&#x2F;Ubuntu 環境，若你真的很想使用 Windows 環境就繼續往下看吧！）。</p>
<ol>
<li><p>Microsoft VSCode 編輯器<br> <a href="https:#code.visualstudio.com/">Microsoft VSCode</a> 是 Microsoft 推出的編輯器（非整合開發環境 IDE），夾帶著 Microsoft 過去打造 Visual studio 整合開發環境的豐富經驗，相比 Sublime Text 和其他編輯器，VSCode 的優勢在於開源且活躍的開發社群、內建 debugger 框架、原生 Git 整合、套件整合容易等特性。綜合以上幾點，對於初學者來說 VSCode 是一個蠻適合入門的開發環境。它的安裝方式也十分簡易，在官網下載後按照指示安裝完成即可，下載完成後可以打開看看。</p>
<p> <img src="/images/python101/vscode-index.png" alt="title: 如何在 Windows 打造 Python 開發環境設定"> </p>
<p> 我們可以點選左邊 icon 欄的第五個（長得像正方形拼圖），安裝 Python 語法和格式檢查的相關套件幫助除錯（搜尋 Python），選擇 Python 並點選 install 安裝：</p>
<p> <img src="/images/python101/vscode-python.png" alt="title: 如何在 Windows 打造 Python 開發環境設定"> </p>
<p> 你也可以於<code>檔案（file）-&gt; 開啟（open）</code>打開你在電腦中已經準備好的專案資料夾，同時也可以在資料夾中新增檔案，我們之後的程式也會希望在建立好的專案資料夾中進行開發。這邊我們建立一個 hello.py 的檔案並印出 hello 訊息。</p>
 <figure class="highlight py"><figcaption><span>hello.py</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;hello python&#x27;</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>終端機環境（iTterm&#x2F;內建 terminal）<br> terminal（終端機）是我們下指令的地方，許多時候我們進行程式開發時不會使用 GUI 圖形化介面而是使用下指令方式請電腦做相對應的行為（記得寫程式就是下指令請電腦做事情！）。在 Linux 和 Mac 裡面都有內建的 terminal 的應用程式，以下為 MacOS 的 iTerm2 終端機下指令示意圖（iTerm2 中 $ 為提示字元，不用輸入）：</p>
<p> <img src="/images/python101/iterm2-example.png" alt="title: 如何在 Windows 打造 Python 開發環境設定"> </p>
<p> 使用 Windows 讀者可以使用 <a href="http:#cmder.net/">Cmder</a> 這個軟體當做終端機環境。</p>
<p> <img src="/images/python101/cmder1.png" alt="title: 如何在 Windows 打造 Python 開發環境設定"> </p>
<p> 比起 Winodws 內建的命令列 CMD，cmder 更貼近 Unix 的命令列指令碼：</p>
<p> <img src="/images/python101/cmder2.jpg" alt="title: 如何在 Windows 打造 Python 開發環境設定"> </p>
<p> 首先到 <a href="http:#cmder.net/">Cmder 官網</a>先安裝 Cmder Full 版本（含 git），安裝完成後解壓縮資料夾到桌面，執行裡面的 <code>cmder.exe</code> 檔案即可。</p>
<p> <img src="/images/python101/cmder4.png" alt="title: 如何在 Windows 打造 Python 開發環境設定"> </p>
<p> Cmder 預設是 <code>λ</code>，如果不習慣可以改成 Mac &#x2F; Linux 環境下的 <code>$</code>，具體流程請<a href="https:#jeffjade.com/2016/01/13/2016-01-13-windows-software-cmder/">參考這份文件</a>。</p>
<p> <img src="/images/python101/cmder3.png" alt="title: 如何在 Windows 打造 Python 開發環境設定"> </p>
<p> 對於有志於從事程式開發相關工作的讀者建議可以多熟悉指令碼的輸入，更多指令碼可以參考鳥哥撰寫的 <a href="http:#linux.vbird.org/linux_basic/redhat6.1/linux_06command.php">Linux 基本指令介紹</a> 和 <a href="http:#www.linux.org.tw/resource.html">Linux 學習資源</a>。</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">以下是常用指令</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">移動到桌面</span></span><br><span class="line">cd \Users\XXXX\Desktop</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">列出資料夾下檔案</span></span><br><span class="line">ls</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">刪除檔案</span></span><br><span class="line">rm 檔名</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">複製檔案</span></span><br><span class="line">cp 檔名</span><br></pre></td></tr></table></figure>

</li>
<li><p>Git 版本控制系統&#x2F;註冊 GitHub 帳戶<br> Git 是一種分散式版本控制系統，可以讓我們可以更方便地管理我們的程式碼。在網路上有非常多優秀的 Git 教學文件（<a href="https:#backlogtool.com/git-guide/tw/">連猴子都能懂的Git入門指南</a>、<a href="https:#www.slideshare.net/littlebtc/git-5528339">寫給大家的 Git 教學</a>、<a href="https:#www.slideshare.net/lkiral/git-34157836">初心者 Git 上手攻略</a>）。安裝 Git 方式是到官網下載軟體，依照指示安裝（若您使用 Cmder 的完整安裝 Download Full 的版本就不用安裝 git，因為已經幫你安裝好了）。</p>
<p> <img src="/images/python101/git-index.png" alt="title: 如何在 Windows 打造 Python 開發環境設定"> </p>
<p> 互動式語法學習：</p>
<p> <img src="/images/python101/try-git.png" alt="title: 如何在 Windows 打造 Python 開發環境設定"> </p>
<p> 在介紹完 git 之後我們來了解一下 GitHub。GitHub 是一個可以存放 git 程式碼專案的平台，透過 GitHub 我們可以接觸到最新的開放原始碼資訊，也可以將我們的程式碼開源出來。</p>
<p> <img src="/images/python101/github-index.png" alt="title: 如何在 Windows 打造 Python 開發環境設定"> </p>
<p> 從 GitHub 上複製程式碼</p>
 <!--![title: 如何在 Windows 打造 Python 開發環境設定](/images/python101/github-clone.png) -->

 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 複製一份到本地端</span><br><span class="line">$ git clone https:#github.com/kdchang/python101.git</span><br><span class="line"># 移動到資料夾</span><br><span class="line">$ cd python101</span><br></pre></td></tr></table></figure>

<p> 常見 Git 指令：</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 初始化專案</span><br><span class="line">$ git init</span><br><span class="line"># 查看狀態</span><br><span class="line">$ git status</span><br><span class="line"># 檢查差異</span><br><span class="line">$ git diff </span><br><span class="line"># 將變更檔案放入暫存區</span><br><span class="line">$ git add index.py</span><br><span class="line"># 使用 commit -m 提交變更</span><br><span class="line">$ git -a -m &#x27;init commit&#x27;</span><br><span class="line"># 查看歷史</span><br><span class="line">$ git log</span><br><span class="line"># 放棄已經 commit 的檔案重回暫存區</span><br><span class="line">$ git reset HEAD index.py</span><br><span class="line"># 放棄檔案變更</span><br><span class="line">$ git checkout index.py</span><br></pre></td></tr></table></figure>
</li>
<li><p>Anaconda Python3 版本<br> Anaconda 是一個 all-in-one 的 Python 開發環境，對於初學者來說是個十分合適的開發環境包。Anaconda 具備了幾項特點：</p>
<pre><code> - 便於安裝許多流行的科學、數學、工程、資料分析的 Python 模組  
 - 免費並支援跨平台：Linux、Windows、Mac
 - 內建 Spyder 編輯器和 Jupyter Notebook 環境 
 - 方便建立不同的虛擬開發環境
</code></pre>
<p> 安裝流程也十分簡單，進入 Anaconda 首頁，選擇對應作業系統（這邊使用 Windows）和是屬於 64 還是 32 位元：<br> <img src="/images/python101/anaconda-index.png" alt="title: 如何在 Windows 打造 Python 開發環境設定"></p>
<p> Windows10 可以在<code>系統</code>看到位元資訊；<br> <img src="/images/python101/about-64bit-windows-10.jpg" alt="title: 如何在 Windows 打造 Python 開發環境設定"> </p>
<p> Windows7 可以在<code>控制台-&gt;系統與安全-&gt;系統</code>觀看作業系統位元資訊：<br> <img src="/images/python101/windows-64-bit.png" alt="title: 如何在 Windows 打造 Python 開發環境設定"> </p>
<p> 選擇對應 Python 版本下載（這裡選擇 Python3 以上版本），我們使用 Graphical Installer（圖像介面安裝方式），接著在下載完成時按照預設的安裝方式完成安裝；<br> <img src="/images/python101/anaconda-install.png" alt="title: 如何在 Windows 打造 Python 開發環境設定"> </p>
<p> 記得安裝時要注意建議在安裝 anaconda 時勾選把環境變數加入（path environment variable），這樣在使用 cmder 時使用 conda 相關指令才不會出現錯誤，若一開始沒有勾選的話建議解除安裝後再重新安裝 anaconda 勾選加入環境變數。</p>
<p> <img src="/images/python101/windows-anaconda-path.png" alt="title: 如何在 Windows 打造 Python 開發環境設定"> </p>
<p> 若是完整安裝成功，可以打開 Cmder 終端機輸入，若是顯示 Python 3.6.0 :: Anaconda 4.3.0 (x86_64) 版本號即安裝成功（若沒成功可能要檢查一下是不是環境變數路徑的問題）：</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ python -V</span><br><span class="line">Python 3.6.0 :: Anaconda 4.3.0 (x86_64)</span><br></pre></td></tr></table></figure>

<p> 接著要建立我們專案虛擬環境，這樣在安裝操作套件時比較不容易被污染到 root 全域的環境（因為你可能會有很多專案，專案使用的套件不盡相同，正式上線時只要把相關套件資訊透過 <code>pip freeze &gt; requirements.txt</code> 存起來，然後在正式上線的伺服器安裝 <code>pip install -r requirements.txt</code> 即可），啟動後會出現（套件名稱）的提示字元：</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">顯示目前虛擬環境列表</span><br><span class="line">conda info -e </span><br><span class="line">創建虛擬環境</span><br><span class="line">conda create -n 套件名稱 python=3.6</span><br><span class="line">進入虛擬環境（若是非 Windows cmder 環境加 source 於開頭） ，成功後提示字元變成：（套件名稱）$</span><br><span class="line">activate 虛擬環境名稱</span><br><span class="line">離開虛擬環境（若是非 Windows cmder 環境加 source 於開頭） </span><br><span class="line">deactivate </span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="建立虛擬環境（virtual-environment）"><a href="#建立虛擬環境（virtual-environment）" class="headerlink" title="建立虛擬環境（virtual environment）"></a>建立虛擬環境（virtual environment）</h2><p>接著我們正式來建立一個 Python 的專案，打開終端機移動到桌面，建立專案資料夾（在輸入指令時可以使用 tab 自動補完指令）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 移動到桌面</span><br><span class="line">cd \Users\XXXX\Desktop</span><br><span class="line"># 建立資料夾</span><br><span class="line">mkdir python_examples</span><br><span class="line"># 移動到資料夾</span><br><span class="line">cd python_examples</span><br></pre></td></tr></table></figure>

<p>建立獨立虛擬環境，並進入虛擬環境：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 創立虛擬環境</span><br><span class="line">conda create -n python_examples_venv python</span><br><span class="line"># 啟動虛擬環境</span><br><span class="line">activate python_examples_venv</span><br></pre></td></tr></table></figure>

<p>成功進入虛擬環境後（會出現小括號 python_examples_venv）代表已經進入虛擬環境，即可以在裡面執行 Python 程式並安裝相關套件於該虛擬環境下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 安裝 django web 框架套件</span><br><span class="line">pip install django</span><br><span class="line"># 執行 python 檔案</span><br><span class="line">python hello.py</span><br></pre></td></tr></table></figure>

<p>事實上，在 Python3 中還有另外兩種建立虛擬開發環境的方式，包括使用 Python 內建工具：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用 Python3 內建工具建立名為 example_venv 的虛擬開發環境</span></span><br><span class="line">python -m venv example_venv</span><br></pre></td></tr></table></figure>

<p>使用 <code>virtualenv</code>，和 anaconda 不同的是 virtualenv 會在建立虛擬環境的專案資料夾下建立一個資料夾裡面放虛擬環境的東西：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">先安裝 virtualenv</span></span><br><span class="line">pip install virtualenv</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用 virtualenv 產生一個名為 example_venv 的</span></span><br><span class="line">virtualenv example_venv</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">移動到 example_venv 的外面資料夾，執行進入虛擬環境</span></span><br><span class="line">example_venv\Scripts\activate</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安裝 django web 框架套件到虛擬環境中（只會安裝在該虛擬環境中）</span></span><br><span class="line">pip install django</span><br></pre></td></tr></table></figure>

<h1 id="整合在一起：在-Windows-撰寫你的第一個-Python-程式"><a href="#整合在一起：在-Windows-撰寫你的第一個-Python-程式" class="headerlink" title="整合在一起：在 Windows 撰寫你的第一個 Python 程式"></a>整合在一起：在 Windows 撰寫你的第一個 Python 程式</h1><p>確認安裝好以下工具後，我們就可以開始撰寫你的第一個 Python 程式</p>
<ol>
<li>安裝 Microsoft VSCode</li>
<li>安裝 Cmder</li>
<li>安裝 Anaconda（記得勾選加入環境變數）</li>
<li>安裝 virtualenv (在終端機使用：<code>pip install virtualenv</code> 安裝)</li>
<li>在桌面創建一個 python_example 資料夾，打開 Microsoft VSCode 後開啟該專案資料夾，創建一個 <code>hello.py</code> 的檔案並在裡面打上 <code>print(&#39;hello python!!&#39;)</code></li>
<li>打開 cmder 終端機 cd 移動到 <code>hello.py</code> 所在資料夾</li>
<li>執行 <code>python hello.py</code>，恭喜你完成第一個 Python 程式！</li>
</ol>
<h1 id="在-Windows-上安裝-Linux-Ubuntu"><a href="#在-Windows-上安裝-Linux-Ubuntu" class="headerlink" title="在 Windows 上安裝 Linux&#x2F;Ubuntu"></a>在 Windows 上安裝 Linux&#x2F;Ubuntu</h1><ol>
<li><p><a href="https:#www.virtualbox.org/wiki/Downloads">安裝 VirtualBox</a> 對應版本虛擬機（這邊安裝 Windows 版本，若你是 Mac 想嘗試 Linux 也可以安裝 Mac 版本），下載完按照步驟安裝完成</p>
<p> <img src="/images/python101/virtualbox1.png" alt="title: 如何在 Windows 打造 Python 開發環境設定"> </p>
</li>
<li><p>到<a href="https:#www.ubuntu-tw.org/modules/tinyd0/">官網下載 Linux&#x2F;Ubuntu 光碟映像檔案</a>，請根據電腦位元架構選擇最新桌面穩定版本 16.04 LTS（for windows）</p>
<p> <img src="/images/python101/virtualbox2.png" alt="title: 如何在 Windows 打造 Python 開發環境設定"> </p>
</li>
<li><p>建立 Linux Ubuntu 虛擬機，可以參考<a href="https:#www.pcsetting.com/linux/29">這篇 VirtualBox 虛擬機器安裝 Ubuntu 設定教學</a>，設定一下名稱、作業系統類型和版本，欲分配給虛擬的記憶體大小（建議調整為大約實體記憶體的 1&#x2F;3，舉例來說你有 30G 記憶體，可以分配 10G 給虛擬機）。接著選擇立即建立虛擬硬碟、VDI (VirtualBox 磁碟映像)、動態配置硬碟大小不會造成浪費（虛擬硬碟容量建議 30G 以上）。</p>
<p> <img src="/images/python101/virtualbox3.jpg" alt="title: 如何在 Windows 打造 Python 開發環境設定"> </p>
</li>
<li><p>選擇建立好的虛擬機並選設定值按鈕，選擇存放位置選項，控制器中選擇虛擬 CD&#x2F;DVD 檔案選擇剛剛從官網下載下來的檔案，確定後接著選擇虛擬機並啟動，接下來選擇安裝 Linux&#x2F;Ubuntu，選擇立即安裝和預設值，需要一段時間安裝和設定（中間會有語言相關的選擇和密碼設定）</p>
<p> <img src="/images/python101/virtualbox4.jpg" alt="title: 如何在 Windows 打造 Python 開發環境設定"> </p>
</li>
<li><p>啟動使用 Linux&#x2F;Ubuntu，按照上面教學安裝 Microsoft VSCode 編輯器，安裝 Anaconda，建立第一個 Python 檔案、打開終端機（termical）安裝 ，執行 Python 程式</p>
<p> <img src="/images/python101/virtualbox5.png" alt="title: 如何在 Windows 打造 Python 開發環境設定"></p>
</li>
</ol>
<p>網路上也有許多相關參考教學文章：<a href="http:#blog.xuite.net/yh96301/blog/list-view/432341564">VirtualBox 5.2安裝Ubuntu 16.04 相關教學</a>、<a href="https:#www.pcsetting.com/linux/29">VirtualBox 虛擬機器安裝 Ubuntu 設定教學</a></p>
<p>若是螢幕太小可以在上排選單中選擇：<code>裝置-&gt;插入 Guest Additions CD 映像...-&gt;執行-&gt;重開虛擬機-&gt;可以調整大小</code>。</p>
<h1 id="整合在一起：用-Linux-撰寫你的第一個-Python-程式"><a href="#整合在一起：用-Linux-撰寫你的第一個-Python-程式" class="headerlink" title="整合在一起：用 Linux 撰寫你的第一個 Python 程式"></a>整合在一起：用 Linux 撰寫你的第一個 Python 程式</h1><p>確認安裝好以下工具後，我們就可以開始撰寫你的第一個 Python 程式</p>
<ol>
<li>進入虛擬機的 Linux&#x2F;Ubuntu </li>
<li>安裝 Microsoft VSCode</li>
<li>安裝 Anaconda（記得勾選加入環境變數）</li>
<li>安裝 virtualenv (在終端機使用：<code>pip install virtualenv</code> 安裝)</li>
<li>在桌面創建一個 python_example 資料夾，打開 Microsoft VSCode 後開啟該專案資料夾，創建一個 <code>hello.py</code> 的檔案並在裡面打上 <code>print(&#39;hello python!!&#39;)</code></li>
<li>打開 terminal 終端機 cd 移動到 <code>hello.py</code> 所在資料夾</li>
<li>執行 <code>python hello.py</code>，恭喜你完成第一個 Python 程式！</li>
</ol>
<h1 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h1><p>如何設定開發環境應該是每個初學程式設計者的痛（強烈建議使用 Virtual Box 虛擬機搭配 Linux&#x2F;Ubuntu 環境），以上介紹了如何在 Windows 打造 Python 開發環境設定，請讀者務必照著自己的電腦作業系統環境安裝一次，當然若你有志於往程式設計領域發展，也要熟悉一下指令碼操作。</p>
<h1 id="參考文件"><a href="#參考文件" class="headerlink" title="參考文件"></a>參考文件</h1><ol>
<li><a href="http:#blog.xuite.net/yh96301/blog/432341564-VirtualBox+5.1%E5%AE%89%E8%A3%9DUbuntu+16.04">VirtualBox 5.2安裝Ubuntu 16.04</a></li>
<li><a href="https:#uoa-eresearch.github.io/eresearch-cookbook/recipe/2014/11/20/conda/">Create virtual environments for python with conda</a></li>
<li><a href="http:#stuarteberg.github.io/conda-docs/_downloads/conda-pip-virtualenv-translator.html">conda vs. pip vs. virtualenv</a></li>
<li><a href="https:#segmentfault.com/a/1190000005828284">Anacodna之conda VS Virtualenv VS Python 3 venv 对比使用教程，创建虚拟环境</a></li>
<li><a href="https:#ss64.com/">命令列指令碼查詢</a></li>
</ol>
<p>（image via <a href="https:#camo.githubusercontent.com/812b2647d6cd216ecddfb3f0ec71639473717955/687474703a2f2f692e696d6775722e636f6d2f67316e4e6630492e706e67">githubusercontent</a>、<a href="https:#i.ytimg.com/vi/Xm790AkFeK4/maxresdefault.jpg">websiteoptimization</a>、<a href="https://i.ytimg.com/vi/GGorVpzZQwA/maxresdefault.jpg">ytimg</a>、<a href="https://i.ytimg.com/vi/DPIPC25xzUM/maxresdefault.jpg">ytimg</a>、<a href="https://www.ostechnix.com/wp-content/uploads/2017/03/VirtualBox_Ubuntu-16.04-LTS-Desktop_20_03_2017_19_44_58.png">ostechnix</a>）</p>
]]></content>
      <tags>
        <tag>Python, Django, MVC, Web, MTV, Web Backend, Web Framework, 教學, Flask, 框架, coding, code, 程式設計, 自學程式設計, CS, Computer, Computer Science</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript 101 快速入門教學</title>
    <url>/2016/12/21/javascript101-tutorial/</url>
    <content><![CDATA[<p><img src="/images/javascript.png" alt="JavaScript 101 快速入門教學"></p>
<p><a href="https://pics.ee/1HC~">JavaScript 程式設計新手村課程準備上課囉！</a></p>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Java 和 JavaScript 雖然名稱相似，但卻是熱狗和狗的差別。JavaScript 是由 Netscape 工程師 Brendan Eich 於 1995 年僅花 10 天所設計的程式語言，也因為一些歷史因素，JavaScript 成為被誤解最深的程式語言。JavaScript 是一種直譯式、基於原型（prototype based）的物件導向程式語言，但又具有函數式程式設計（Functional programming）的特性。其具備簡單好上手、應用範圍廣泛，容易有成就感，但精通不易等特性。過去一段時間 JavaScript 一直被認為是玩具語言，難登大雅之堂。但隨著版本的演進，再加上 NodeJS 的出現，讓 JavaScript 由黑翻紅成為程式語言的當紅巨星，目前雄據在程式語言排行榜前幾名，除了網頁開發外，在許多的領域都可以看到 JavaScript 的身影。本文將快速帶領大家掌握 JavaScript 重要且核心的觀念。</p>
<h1 id="環境建置"><a href="#環境建置" class="headerlink" title="環境建置"></a>環境建置</h1><p>JavaScript 的檔案只要使用一般的文字編輯器即可編輯（存成 .js 檔案），也可以使用 <a href="https://www.sublimetext.com/">Sublime Text</a> 等編輯器進行開發，<a href="https://jsbin.com/">JSBin</a> 這個線上工具進行測試（當然你也可以使用 Chrome、Firefox 等瀏覽器的開發者工具）。除了編輯器外，實際開發上我們也會需要用到 <a href="https://nodejs.org/en/">Node.js 開發環境</a> 和 NPM 套件管理系統（按照 Node.js 官方指示即可安裝）。Node.js 是一個開放原始碼、跨平台的、可用於伺服器端和網路應用的執行環境。</p>
<h1 id="JavaScript-程式使用方式（HTML-中引入）"><a href="#JavaScript-程式使用方式（HTML-中引入）" class="headerlink" title="JavaScript 程式使用方式（HTML 中引入）"></a>JavaScript 程式使用方式（HTML 中引入）</h1><ol>
<li><p>內嵌於 <code>&lt;head&gt;&lt;/head&gt;</code> (因 JS 為直譯式程式語言，讀到即會執行)</p>
 <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span> </span><br><span class="line">	<span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">		alert(Hello JavaScript);</span><br><span class="line">	<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>內嵌於 <code>&lt;body&gt;&lt;/body&gt;</code> 之中 (可以讓 HTML 優先載入)</p>
 <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">	alert(Hello JavaScript);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>外部引入檔案置於 <code>&lt;head&gt;</code> 或 <code>&lt;body&gt;</code> 內 (推薦使用)</p>
 <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/main.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ol>
<p>注意外部引入的 <code>&lt;script&gt;&lt;/script&gt;</code> 中不可再寫 JS。</p>
<h1 id="變數"><a href="#變數" class="headerlink" title="變數"></a>變數</h1><p>在程式語言中變數是一個暫時儲存資料的地方，賦值給變數的值都會有對應的資料型態，然而 JavaScript 是弱型別（Weak type）所以會有自動轉型的情形。</p>
<p>在 JavaScript 中，全域變數將使用 <code>var</code>，而在 ES6 中為了解決變數污染或誤用情形將 <code>block-scope</code> 的變數使用 <code>let</code>，若你需要固定不變的常數則是使用 <code>const</code>。 其中變數型別又分為：Primitive Data Type：String、Number、Boolean（ true 或 false）、undefinded、null，Reference Data Types：Object 兩種，差別在於將物件變數賦值給另外一個變數時是把引用賦值給新變數，所以當新變數更改屬性時會影響到原來物件。</p>
<p>Primitive Data Type：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">12</span>;</span><br><span class="line"><span class="keyword">const</span> str = <span class="string">&#x27;Mark&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">checkLike</span>(<span class="params"></span>) &#123;</span><br><span class="line">	<span class="keyword">let</span> isActived = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// console.log 可以讓開發者透過瀏覽器開發者工具看到訊息，方便除錯</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str);</span><br><span class="line"><span class="comment">// 因為 let 是 function block scope，故會產生 &quot;ReferenceError: isActived is not defined 錯誤</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(isActived);</span><br></pre></td></tr></table></figure>

<p>Reference Data Types：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 將物件變數賦值給另外一個變數時是把引用賦值給新變數，所以當新變數更改屬性時會影響到原來物件</span></span><br><span class="line"><span class="keyword">let</span> a = &#123; <span class="attr">name</span>: <span class="string">&#x27;Zuck&#x27;</span> &#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line"><span class="keyword">let</span> b = a;</span><br><span class="line">b.<span class="property">name</span> = <span class="string">&#x27;Jack&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br></pre></td></tr></table></figure>

<h1 id="運算子-運算元"><a href="#運算子-運算元" class="headerlink" title="運算子&#x2F;運算元"></a>運算子&#x2F;運算元</h1><p>在程式語言中都需要運算子，在 JavaScript 中有賦值運算子、算數運算子、比較運算子、邏輯運算子等不同運算子。</p>
<ol>
<li><p>賦值運算子：使用 <code>=</code> 給定值給變數</p>
 <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Mark</span></span><br><span class="line"><span class="keyword">const</span> name = <span class="string">&#x27;Mark&#x27;</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>算數運算子：四則運算</p>
 <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 4</span></span><br><span class="line"><span class="keyword">const</span> sum = <span class="number">1</span> + <span class="number">3</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>比較運算子：數值比較</p>
 <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> age = <span class="number">23</span>;</span><br><span class="line"><span class="comment">// true</span></span><br><span class="line"><span class="keyword">const</span> canVote = age &gt;= <span class="number">20</span>;</span><br><span class="line"><span class="comment">// false</span></span><br><span class="line"><span class="keyword">const</span> canVote = age &lt; <span class="number">20</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>邏輯運算子：邏輯判斷</p>
 <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> a = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">const</span> b = <span class="literal">true</span>;</span><br><span class="line"><span class="comment">// 且，要兩個都 true</span></span><br><span class="line"><span class="keyword">const</span> result1 = a &amp;&amp; b;</span><br><span class="line"><span class="comment">// 或，只要有一個 true，即為 true</span></span><br><span class="line"><span class="keyword">const</span> result2 = a || b;</span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="流程控制（flow-control）"><a href="#流程控制（flow-control）" class="headerlink" title="流程控制（flow control）"></a>流程控制（flow control）</h1><p>在 JavaScript 中和許多程式語言一樣有 <code>if...else</code>、<code>switch</code> 條件判斷以及在處理陣列上很常使用的迴圈（當有明確次數時使用 <code>for</code>，當沒有明確數字時使用 <code>while</code>）</p>
<p>另外要注意的是在 JavaScript 中的 falsey 值：<code>undefined</code>、<code>null</code>、<code>NaN</code>、<code>0</code>、<code>&quot;&quot;</code>（空字串）和 <code>false</code>，以上幾種情況在邏輯判斷時會轉換成 false</p>
<ol>
<li><p>if…else</p>
 <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 可以投票</span></span><br><span class="line"><span class="keyword">if</span>(age &gt; <span class="number">20</span>) &#123;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;可以投票！&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>switch：當條件很多時可以善用 switch 判斷，記得要在每個 case 後寫 break，不然會全部都執行	</p>
 <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> country = <span class="string">&#x27;Taiwan&#x27;</span>;</span><br><span class="line"><span class="keyword">switch</span>(grade) &#123;</span><br><span class="line">	<span class="keyword">case</span> <span class="string">&#x27;Taiwan&#x27;</span>:</span><br><span class="line">		<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hello&#x27;</span> + country);</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">case</span> <span class="string">&#x27;Japan&#x27;</span>:</span><br><span class="line">		<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hello&#x27;</span> + country);</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">case</span> <span class="string">&#x27;Korea&#x27;</span>:</span><br><span class="line">		<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hello&#x27;</span> + country);</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	<span class="attr">default</span>:</span><br><span class="line">		<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hello&#x27;</span> + country);		</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>for：當你知道程式需要重複執行幾次時可以使用 for 迴圈</p>
 <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="string">&#x27;Mark&#x27;</span>, <span class="string">&#x27;Zuck&#x27;</span>, <span class="string">&#x27;Jack&#x27;</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; arrr++) &#123;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(arr[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>while：當你程式不知道需要重複執行幾次時可以使用 while 迴圈</p>
 <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 從 1 累加到 10</span></span><br><span class="line"><span class="keyword">const</span> num = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(num &lt;= <span class="number">10</span>) &#123;</span><br><span class="line">	<span class="keyword">let</span> sum += num; <span class="comment">// sum = sum + num</span></span><br><span class="line">	num += <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>do…while：當迴圈次數不明確時，可以使用 while，而 do while 會至少執行一次</p>
 <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> x = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(x &lt; <span class="number">10</span>) &#123;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(x);</span><br><span class="line">	x++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> y = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(y);</span><br><span class="line">	y++;	</span><br><span class="line">&#125; <span class="keyword">while</span>(i &lt; <span class="number">10</span>);</span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="函式-函數（function）"><a href="#函式-函數（function）" class="headerlink" title="函式&#x2F;函數（function）"></a>函式&#x2F;函數（function）</h1><p>函數是一種可以讓一段程式區塊重複使用的程式撰寫方式，在 JavaScript 中函數屬於一級物件（first class object），可以將函數當參數或變數傳遞，其扮演非常重要的角色，也讓 JavaScript 在函數式程式設計（functional programming）上更容易發揮。<br>函數可以傳入參數（如下的 x, y），也有可能沒有。函數使用 return 回傳值，若沒寫則回傳 undefined</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">x, y</span>) &#123;</span><br><span class="line">	<span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">sum</span>(<span class="number">12</span>, <span class="number">20</span>);</span><br></pre></td></tr></table></figure>

<p>在 ES6 簡化了函數的使用出現了箭頭函數（arrow function）：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">sum</span> = (<span class="params">x, y</span>) =&gt; &#123;</span><br><span class="line">	<span class="keyword">return</span> x + y;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title function_">sum</span>(<span class="number">1</span>, <span class="number">2</span>);</span><br></pre></td></tr></table></figure>

<h1 id="物件（object）"><a href="#物件（object）" class="headerlink" title="物件（object）"></a>物件（object）</h1><p>物件是一種儲存資料的資料結構，可以對應成真實世界的物件（有屬性值和方法），一般而言主要有三種建立方式：</p>
<ol>
<li><p>使用 <code>new Object</code></p>
 <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用 <code>&#123;&#125;</code></p>
 <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">	<span class="attr">name</span>: <span class="string">&#x27;Mark&#x27;</span>,</span><br><span class="line">	<span class="attr">age</span>: <span class="number">23</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用建構函數</p>
<p> 雖然 JavaScript 並非是 class-based 的物件導向程式語言，而是 prototype-based 的物件導向程式語言，但在 JavaScript 可以透過 function 建立類別的宣告函數（在 ES6 中已有 class 可以使用，但只是個語法糖）：</p>
 <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 實務上建構函數命名採單字首字大寫。狗狗物件有 name, age 屬性，方法是 wow </span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Dog</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">	<span class="comment">// 屬性值</span></span><br><span class="line">	<span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">	<span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">	<span class="comment">// 每個實例都會有一份方法副本</span></span><br><span class="line">	<span class="variable language_">this</span>.<span class="property">wow</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">		<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;wow!wow&#x27;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 多個實例共用，可以減少記憶體等資源運用</span></span><br><span class="line"><span class="title class_">Dog</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">cry</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;QQQ&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> dog = <span class="keyword">new</span> <span class="title class_">Dog</span>(<span class="string">&#x27;lucky&#x27;</span>, <span class="number">2</span>);</span><br><span class="line"><span class="comment">// wow!wow!</span></span><br><span class="line">dog.<span class="title function_">wow</span>();</span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="DOM-BOM"><a href="#DOM-BOM" class="headerlink" title="DOM &amp; BOM"></a>DOM &amp; BOM</h1><p>事實上 HTML 可以轉換成一棵物件樹，也稱為 Document Object Model（DOM）。在撰寫網頁應用程式時往往需要操作到瀏覽器元素，我們通常是透過選取我們想要改變的元素（選擇器），然後修改我們的物件屬性</p>
<ol>
<li><p>物件模型</p>
<p> 所謂的物件模型（Object Model）對於HTML 網頁來說，是一種規範如何存取HTML 元素、CSS 樣式和 JavaScript 程式碼的一種機制，可以將HTML元素、CSS樣式和 JavaScript 程式碼視為物件</p>
</li>
<li><p>BOM</p>
<p> <img src="/images/bom.jpg" alt="js101"></p>
<p> BOM 就是 Browser Object Model  中文叫做瀏覽器物件模型，window 物件是瀏覽器最頂層物件，其下有 document（DOM）、history、location、navigator、screen 子物件。<code>window</code> 物件不須經過宣告，可直接使用，代表目前瀏覽器視窗。事實上，所有的全域變數、函式、物件，其實都是屬於 window 物件，而 BOM 物件的使用可讓我們操作包含開啟&#x2F;關閉視窗，改變視窗大小，計時器與取得網址、存取瀏覽器屬性等</p>
</li>
<li><p>DOM</p>
<p> 文件物件模型（Document Object Model，DOM）是給 HTML 與 XML 文件使用的一組 API。簡單的說就是將文件（文件可以想成單一網頁）物件化，以便提供一套通用存取的方式來處理文件內容。DOM 提供  HTML 網頁一種存取的方式，可以將 HTML 元素轉換成一棵節點樹，每一個標籤和文字內容是為一個節點，讓我們可以走訪節點 (Nodes) 來存取 HTML 元素 </p>
 <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>My title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">h1</span>&gt;</span>My header<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>My link<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p> <img src="/images/DOM.gif" alt="js101"></p>
<p> 要操作 DOM 元素前要選取要操作哪個</p>
<ul>
<li><p>根據ID名稱選取<br> <code>document.getElementById(elementId)</code></p>
</li>
<li><p>根據元素名稱選取<br> <code>document.getElementsByTagName(tagName)</code></p>
</li>
<li><p>根據名稱選取<br> <code>document.getElementsByName(name) </code></p>
</li>
<li><p>根據 Class 名稱選取<br> <code>document.getElementsByClassName(classname)</code></p>
</li>
</ul>
<p> 有很多元素符合，回傳的是 <code>NodeList</code> 物件集合，使用 item() 存取 (注意 Element’s’)，迭代使用 forEach 不然就要轉陣列</p>
<p> document 物件有提供使用 CSS 選擇器來選取元素，效能較好</p>
<ul>
<li><p><code>document.querySelectorAll()</code> 方法<br>  document 物件的 <code>querySelectorAll()</code> 方法可以取得 HTML 的節點陣列或清單，為一個 <code>NodeList</code> 物件（若要使用 map 方法需要轉陣列，不然只能用 forEach ）</p>
</li>
<li><p><code>document.querySelector()</code> 方法<br> 只會回傳一個符合的元素，沒有就回傳 null</p>
</li>
</ul>
<p> 範例：</p>
 <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;info&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;info&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;danger&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">	<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#danger&#x27;</span>).<span class="property">innerHTML</span> = <span class="string">&#x27;&lt;h1&gt;嘿嘿，是我&lt;/h1&gt;&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">	<span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;.info&#x27;</span>).<span class="title function_">forEach</span>(<span class="function">(<span class="params">value, index</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">	  value.<span class="property">innerHTML</span> = <span class="string">&#x27;&lt;h1&gt;坐著打，普天之下排名第二&lt;/h1&gt;&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">	&#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="事件處理（event-handler）"><a href="#事件處理（event-handler）" class="headerlink" title="事件處理（event handler）"></a>事件處理（event handler）</h1><p>事件處理（Event Handlers）是 JavaScript 非常重要的功能，事件是用來處理 JavaScript 與 HTML 之間的互動、建立動畫效果並和使用者互動</p>
<ul>
<li><p>事件處理簡單說就是當一個事件發生時（網頁載入、按下右鍵等），程式會相對應做出怎樣的處理</p>
</li>
<li><p>例如：當使用者按下按鈕時會觸發 click 的事件（事件發生）並讓按鈕變成紅色（處理事件），這就是一種事件處理機制</p>
</li>
</ul>
<h2 id="事件處理機制"><a href="#事件處理機制" class="headerlink" title="事件處理機制"></a>事件處理機制</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">事件處理 = 事件種類 + 事件處理方法</span><br></pre></td></tr></table></figure>

<ul>
<li><p>事件種類（Event Type）<br>又稱事件名稱 (Event Name)，為一個字串，說明發生了什麼事件，例如：click (點擊)、mousemove (滑鼠滑過)</p>
</li>
<li><p>事件處理（Event Handlers）<br>係指處理事件的函數名稱，當事件發生時要呼叫哪個函數進行處理</p>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 當發生 click 事件，會發出 alert </span></span><br><span class="line">btn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">	  <span class="title function_">alert</span>(<span class="string">&#x27;被點了!&#x27;</span>);</span><br><span class="line">&#125;);  </span><br></pre></td></tr></table></figure>

<p>完整範例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>JS Bin<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>點我點我<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">	<span class="keyword">const</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#btn&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">	btn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">	  <span class="title function_">alert</span>(<span class="string">&#x27;被點了!&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">	&#125;);  	</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="非同步處理（Ajax）"><a href="#非同步處理（Ajax）" class="headerlink" title="非同步處理（Ajax）"></a>非同步處理（Ajax）</h1><p>傳統上我們會使用 <code>&lt;form&gt;</code> 表單和後端程式作互動，然而每次提交表單送出請求給伺服器，伺服器接收並處理傳來的表單，然後送回一個新的網頁。使用 Ajax 應用可以僅向伺服器發送並取回必須的數據，並在客戶端採用JavaScript 處理來自伺服器的回應，不僅減少伺服器負擔也加快反應速度</p>
<h2 id="同步-vs-非同步"><a href="#同步-vs-非同步" class="headerlink" title="同步 vs. 非同步"></a>同步 vs. 非同步</h2><p><img src="/images/sync.png" alt="JavaScript 101 快速入門教學"></p>
<p>依序執行，等到上一個函數任務執行完才能執行下一個</p>
<p><img src="/images/async-1.png" alt="JavaScript 101 快速入門教學"></p>
<p>不會因為上一個函數尚未執行完（例如：回傳結果）就卡住，會往下執行下一個任務</p>
<h2 id="什麼是同步-非同步？"><a href="#什麼是同步-非同步？" class="headerlink" title="什麼是同步&#x2F;非同步？"></a>什麼是同步&#x2F;非同步？</h2><ul>
<li><p>非同步係指程式不會因為上一個函數尚未執行完（例如：回傳結果）就卡住，會往下執行下一個任務</p>
</li>
<li><p>同步就是要等到上一個函數任務執行完才能執行下一個，是依序執行</p>
</li>
</ul>
<p>由於 <code>DOM 事件處理</code> 和 <code>Ajax 呼叫</code>是非同步處理，所以大部分人會為 JavaScript 貼上非同步程式設計的標籤</p>
<h2 id="什麼是-Ajax？"><a href="#什麼是-Ajax？" class="headerlink" title="什麼是 Ajax？"></a>什麼是 Ajax？</h2><ul>
<li><p>Ajax 全名：<code>Asynchronous Javascript And XML</code>，指的是一套綜合了多項技術的瀏覽器端網頁開發技術</p>
</li>
<li><p>雖然 Ajax 中使用 XML 為名，不過 Ajax 不是指一種單一的技術。現在許多應用都使用更輕量的 JSON 進行資料傳輸</p>
</li>
<li><p>可以完成不刷頁局部更新應用，使用者體驗較好。不過要小心回調地獄（callback hell）</p>
</li>
</ul>
<h2 id="簡易-Ajax-實作"><a href="#簡易-Ajax-實作" class="headerlink" title="簡易 Ajax 實作"></a>簡易 Ajax 實作</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 若需要支援跨瀏覽器，還需要額外檢驗</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="title class_">XMLHttpRequest</span> != <span class="string">&#x27;undefined&#x27;</span>) &#123;</span><br><span class="line">    <span class="comment">// 一般使用 XMLHttpRequest 物件</span></span><br><span class="line">    <span class="keyword">const</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">REQUEST_URL</span> = <span class="string">&#x27;http://163.29.157.32:8080/dataset/6a3e862a-e1cb-4e44-b989-d35609559463/resource/f4a75ba9-7721-4363-884d-c3820b0b917c/download/393625397fc043188a3f8237c1da1c6f.json&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 監聽是否完成</span></span><br><span class="line">    xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (xhr.<span class="property">readyState</span> === <span class="title class_">XMLHttpRequest</span>.<span class="property">DONE</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(xhr.<span class="property">responseText</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    xhr.<span class="title function_">open</span>(<span class="string">&#x27;GET&#x27;</span>, <span class="variable constant_">REQUEST_URL</span>);</span><br><span class="line">    xhr.<span class="title function_">send</span>();</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<h2 id="JSON-基礎概念"><a href="#JSON-基礎概念" class="headerlink" title="JSON 基礎概念"></a>JSON 基礎概念</h2><ul>
<li><p>JSON（JavaScript Object Notation）是一種由Douglas Crockford 構想設計、輕量級的資料交換語言，以文字為基礎，且易於讓人閱讀</p>
</li>
<li><p>JSON 雖然起於 JavaScript，但資料格式與語言無關，目前很多程式語言都支援 JSON 格式資料的生成和解析</p>
</li>
<li><p>JSON 的官方 MIME 類型是 <code>application/json</code>，其副檔名是 <code>.json</code></p>
</li>
<li><p>基本格式 <code>&#123; &quot;key&quot;: &quot;value&quot; &#125;</code>、<code>&#123; &quot;key&quot;: [&quot;value1&quot;, &quot;value2&quot;] &#125;</code></p>
</li>
</ul>
<hr>
<h2 id="JSON-長這樣"><a href="#JSON-長這樣" class="headerlink" title="JSON 長這樣"></a>JSON 長這樣</h2><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">     <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;John Smith&quot;</span><span class="punctuation">,</span></span><br><span class="line">     <span class="attr">&quot;address&quot;</span><span class="punctuation">:</span> </span><br><span class="line">     <span class="punctuation">&#123;</span></span><br><span class="line">         <span class="attr">&quot;streetAddress&quot;</span><span class="punctuation">:</span> <span class="string">&quot;21 2nd Street&quot;</span><span class="punctuation">,</span></span><br><span class="line">         <span class="attr">&quot;city&quot;</span><span class="punctuation">:</span> <span class="string">&quot;New York&quot;</span><span class="punctuation">,</span></span><br><span class="line">         <span class="attr">&quot;state&quot;</span><span class="punctuation">:</span> <span class="string">&quot;NY&quot;</span><span class="punctuation">,</span></span><br><span class="line">         <span class="attr">&quot;postalCode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;10021&quot;</span></span><br><span class="line">     <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">     <span class="attr">&quot;phoneNumber&quot;</span><span class="punctuation">:</span> </span><br><span class="line">     <span class="punctuation">[</span></span><br><span class="line">         <span class="punctuation">&#123;</span></span><br><span class="line">           <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;home&quot;</span><span class="punctuation">,</span></span><br><span class="line">           <span class="attr">&quot;number&quot;</span><span class="punctuation">:</span> <span class="string">&quot;212 555-1234&quot;</span></span><br><span class="line">         <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">         <span class="punctuation">&#123;</span></span><br><span class="line">           <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;fax&quot;</span><span class="punctuation">,</span></span><br><span class="line">           <span class="attr">&quot;number&quot;</span><span class="punctuation">:</span> <span class="string">&quot;646 555-4567&quot;</span></span><br><span class="line">         <span class="punctuation">&#125;</span></span><br><span class="line">     <span class="punctuation">]</span></span><br><span class="line"> <span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h1 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h1><p>以上介紹了新手上路 JavaScript 入門核心基礎概念，大家可以善用 <a href="http://jsbin.com/">JSBin</a> 實際動手操作，並參考 <a href="https://developer.mozilla.org/zh-TW/">MDN</a> 或 <a href="http://www.w3schools.com/">W3CSchool</a> 的案例會更清楚整體觀念喔！更多豐富教學內容都在 <a href="https://pics.ee/1HC~">JavaScript 程式設計新手村課程！</a></p>
<h1 id="延伸閱讀"><a href="#延伸閱讀" class="headerlink" title="延伸閱讀"></a>延伸閱讀</h1><ol>
<li><a href="http://www.slideshare.net/ccckmit/javascript-c">用十分鐘瞭解 陳鍾誠的程式設計課 (採用JavaScript + C的原因)</a></li>
<li><a href="https://github.com/getify/You-Dont-Know-JS">You-Dont-Know-JS</a></li>
<li><a href="https://tw.twincl.com/javascript/*6731">JavaScript與前端程式設計入門自學參考</a></li>
<li><a href="http://bonsaiden.github.io/JavaScript-Garden/zhtw/">JavaScript Garden  </a></li>
<li><a href="http://weizhifeng.net/javascript-the-core.html">JavaScript核心</a></li>
<li><a href="https://segmentfault.com/a/1190000004253577">[稀土掘金日报] JavaScript 开发者必备的资源合集</a></li>
<li><a href="https://www.gitbook.com/book/ccckmit/javascript/details">專為中學生寫的 JavaScript 程式書</a> </li>
<li><a href="https://github.com/nzakas/computer-science-in-javascript">nzakas&#x2F;computer-science-in-javascript</a></li>
<li><a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/A_re-introduction_to_JavaScript">重新介紹 JavaScript</a></li>
</ol>
<p>（image via <a href="https://media.licdn.com/mpr/mpr/AAEAAQAAAAAAAAY4AAAAJDNmOTRkMTk2LTljNDEtNDAwOS05YTJlLTFmMTg2M2YzYzBiMQ.png">mpr</a>、<a href="http://www.blog.mahmoudzalt.com/wp-content/uploads/2014/07/tools.png">mahmoudzalt</a>）</p>
]]></content>
      <tags>
        <tag>JavaScript, ECMAScript2015, ES6, Front End, Front End Development Environment</tag>
      </tags>
  </entry>
  <entry>
    <title>如何在 Windows 打造 JavaScript Web 開發環境入門教學</title>
    <url>/2017/12/19/javascript101-windows-dev-environment-setup-tutorial/</url>
    <content><![CDATA[<p><img src="/images/javascript101/javascript.png" alt="如何在 Windows 打造 JavaScript Web 開發環境"></p>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>所謂工欲善其事，必先利其器。我們開發程式之前我們最重要的就是要設定好開發環境，接下來我們將帶領讀者體驗如何在 Windows 打造 JavaScript Web 開發環境。</p>
<h1 id="安裝軟體步驟"><a href="#安裝軟體步驟" class="headerlink" title="安裝軟體步驟"></a>安裝軟體步驟</h1><ol>
<li>下載安裝 <a href="https://www.google.com.tw/chrome/browser/desktop/index.html">google chrome</a> 瀏覽器</li>
<li>下載安裝 <a href="https://code.visualstudio.com/">Visual Studio Code</a> 或 <a href="https://www.sublimetext.com/">Sublime text</a> 文字編輯器</li>
<li>下載安裝 <a href="http://cmder.net/">cmder</a> terminal 終端機程式 (請下載含 git 的 full 完整版本)</li>
<li>下載安裝 <a href="https://nodejs.org/en/">Node.JS</a> 選擇左邊穩定版本，按照指令安裝完成</li>
<li>在終端機輸入 <code>node -v</code> 若成功顯示版本，代表安裝完成</li>
<li>安裝 <a href="https://www.npmjs.com/package/http-server">http-server</a> 套件：<code>npm install http-server -g</code></li>
</ol>
<h1 id="撰寫第一個-JavaScript-程式"><a href="#撰寫第一個-JavaScript-程式" class="headerlink" title="撰寫第一個 JavaScript 程式"></a>撰寫第一個 JavaScript 程式</h1><ol>
<li><p>打開 Visual Studio Code 或 Sublime text 並建立一個 index.html 檔案：</p>
</li>
<li><p>在  <code>index.html</code> 輸入：</p>
 <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Test<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(‘hello <span class="variable constant_">JS</span>!’);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>儲存後在終端機移動到該檔案資料夾下，輸入 <code>http-server -p 7777</code> 啟動伺服器</p>
</li>
<li><p>打開瀏覽器輸入網址：<a href="http://127.0.0.1:7777/">http://127.0.0.1:7777</a> 或 <a href="http://localhost:7777/">http://localhost:7777</a></p>
</li>
<li><p>打<code>開發者工具</code>，可以在 console 中看到 <code>hello JS!</code></p>
</li>
<li><p>恭喜讀者完成第一個 JavaScript 應用程式啦！</p>
</li>
</ol>
<h1 id="影片教學"><a href="#影片教學" class="headerlink" title="影片教學"></a>影片教學</h1><div class="video-container">
    <iframe width="560" height="315" src="https://www.youtube.com/embed/rcjPhZitTqI" frameborder="0" gesture="media" allow="encrypted-media" allowfullscreen></iframe>
</div>
]]></content>
      <tags>
        <tag>自學程式</tag>
        <tag>自學程式設計</tag>
        <tag>程式設計</tag>
        <tag>線上自學</tag>
        <tag>coding</tag>
        <tag>coder</tag>
        <tag>programming</tag>
        <tag>computer</tag>
        <tag>computer science</tag>
        <tag>code</tag>
        <tag>電腦科學</tag>
        <tag>學寫程式</tag>
        <tag>學程式</tag>
        <tag>linux</tag>
        <tag>指令</tag>
        <tag>命令列</tag>
        <tag>command line</tag>
        <tag>軟體工程師</tag>
        <tag>軟體工程</tag>
        <tag>software engineering</tag>
        <tag>bash</tag>
        <tag>shell</tag>
        <tag>svn</tag>
        <tag>version control</tag>
        <tag>VCS</tag>
        <tag>github</tag>
        <tag>git</tag>
        <tag>cvs</tag>
        <tag>自學程式心得</tag>
        <tag>JavaScript</tag>
        <tag>環境設定</tag>
        <tag>Windows</tag>
        <tag>環境建置</tag>
      </tags>
  </entry>
  <entry>
    <title>自學程式設計學習資源懶人包</title>
    <url>/2017/01/27/learning-coding-programming-tutorial-and-resource/</url>
    <content><![CDATA[<p>隨著資訊科技的發展，目前網路上和坊間有許多的自學電腦科學和程式設計的學習資源，但初學者在面對琳琅滿目的學習資源往往無所適從，因此本文整理了散落各地的自學程式設計學習資源懶人包和學習藍圖提供讀者參考，也歡迎讀者一起補充：）</p>
<h1 id="初學者學習藍圖建議"><a href="#初學者學習藍圖建議" class="headerlink" title="初學者學習藍圖建議"></a>初學者學習藍圖建議</h1><p>學習程式設計最重要的是了解電腦科學背後的思考模式和邏輯分析，對於非本科系或是程式設計自學者來說，培養興趣累積成就感是最重要的，建議先從解決生活上著手，透過寫程式解決生活上的問題，等累積了興趣和成就感後重新學習基礎電腦科學知識。以下是初學者學習藍圖建議供讀者參考：</p>
<pre><code>1. 確認你的學習動機、設定個學習目標
2. 選擇一門適合你的程式語言入門和工具
3. 大量閱讀、參與課程、動手實作解決生活上問題，把手弄髒並記錄心得
4. 組織、參與社群、練習問個好問題
5. 熟悉函數程式設計、物件導向、框架、設計模式
6. 重新學習資料結構、演算法、作業系統/系統程式、計算機組織、網路通訊等基礎電腦科學知識（程式解題）
7. 學習進階電腦科學知識
</code></pre>
<p>延伸閱讀：</p>
<ol>
<li><a href="https://cofounderinc.com/2015/03/15/lerning-how-to-write-code/">非本科生，我想半路出家學寫程式，該如何開始？</a></li>
<li><a href="https://pics.ee/c34g">Python Web 程式設計入門實戰</a></li>
<li><a href="https://pics.ee/1HC~">JavaScript 程式設計新手村課程</a></li>
<li><a href="https://www.facebook.com/groups/HappyCoderOrg/">HappyCoder 自學程式設計學院臉書社團</a></li>
</ol>
<h1 id="實務程式設計"><a href="#實務程式設計" class="headerlink" title="實務程式設計"></a>實務程式設計</h1><ol>
<li><p>[中 &amp; 英] <a href="https://www.codecademy.com/">Codecademy</a> </p>
<p> <img src="/images/codecademy.png" alt="codecademy"></p>
<p> Codecademy 是非常知名的線上學習程式設計的平台（有許多免費的課程），課程設計互動性和趣味性都相當不錯，相當適合初學者練習。課程也運用遊戲化（gamification）徽章和關卡設計也讓學習者更有動力學習。目前除了 HTML&#x2F;CSS&#x2F;JavaScript 網頁程式設計外，也有 Python、Ruby、Java 等程式語言可以學習（課程也有持續更新），不過 Codecademy 的內容相對基本，若想要在熟悉語法外更進一步學習實務開發應用程式的話就要額外再找其他學習資源了，但仍不失為一個很好的新手入門方式。</p>
<p> 課程深度：✦<br> 費用：免費、付費</p>
</li>
<li><p>[英] <a href="https://www.codeschool.com/">Code School</a></p>
<p> <img src="/images/codeschool.png" alt="codeschool"></p>
<p> <a href="https://code.org/">Code School</a> 也是蠻知名的線上程式設計學習平台，與 Codecademy 類似，除了有提供學員線上即時動手實作練習、遊戲化徽章累積的設計外也有影片教學。課程內容也相當豐富貼近實務（JavaScript、Ruby、Git 等）。</p>
<p> 課程深度：✦✦<br> 費用：免費、付費</p>
</li>
<li><p>[英] <a href="https://code.org/">Code.org</a></p>
<p> <img src="/images/code.org.png" alt="code.org"></p>
<p> 適合中小學或完全初學的朋友練習，使用圖形化 Scratch 式拖拉程式設計方式。透過簡單的方式體驗程式設計的背後邏輯運作原理。</p>
<p> 課程深度：✦<br> 費用：免費</p>
</li>
<li><p>[英] <a href="http://www.w3schools.com/">W3Schools Online Web Tutorials</a></p>
<p> <img src="/images/w3schools.png" alt="w3schools"></p>
<p> 提供豐富的 Web 開發相關學習資源和查詢，適合在實際開發時學習參考查詢使用。</p>
<p> 課程深度：✦<br> 費用：免費</p>
</li>
<li><p>[中 &amp; 英] <a href="https://developer.mozilla.org/zh-TW/">Mozilla Developer Network</a></p>
<p> <img src="/images/mdn.png" alt="MDN"></p>
<p> 由 Mozilla 社群維護的技術文件和教學內容，提供 Open Web 相關學習資源（HTML&#x2F;CSS&#x2F;JavaScript、Web API、Python）和 API 標準查詢。</p>
<p> 課程深度：✦✦<br> 費用：免費</p>
</li>
<li><p>[英] <a href="https://www.freecodecamp.com/">FreeCodeCamp</a></p>
<p> <img src="/images/freecodecamp.png" alt="freecodecamp"></p>
<p> 主要提供 HTML&#x2F;CSS&#x2F;JavaScript 線上學習資源和討論社群，並提供非營利組織專案實習機會。</p>
<p> 課程深度：✦<br> 費用：免費	</p>
</li>
<li><p>[英] <a href="https://teamtreehouse.com/">TreeHouse</a></p>
<p> <img src="/images/treehouse.png" alt="teamtreehouse"></p>
<p> TreeHouse 和 Code School 類似，有影片教學也有互動練習，主要提供各種主流程式語言和技術組合的線上課程，包含了行動應用開發、網站開發、遊戲開發等實務課程。</p>
<p> 課程深度：✦✦<br> 費用：付費</p>
</li>
<li><p>[中 &amp; 英] <a href="https://www.udemy.com/">Udemy</a></p>
<p> <img src="/images/udemy.png" alt="udemy"></p>
<p> Udemy 是一個全面性的線上課程平台，提供素人講師線上分享技能的機會，課程十分多元貼近實務。除了網站開發、行動應用程式等技術領域外，也有許多非技術領域的課程（例如：行銷管理、創業、攝影、音樂創作等）。</p>
<p> 課程深度：✦✦<br> 費用：付費</p>
</li>
<li><p>[中 &amp; 英] <a href="https://www.udacity.com/">Udacity</a></p>
<p> <img src="/images/udacity.png" alt="udacity"></p>
<p> Udacity 與許多知名企業（Google、Facebook）合作提供許多前沿技術的線上教學，例如：人工智慧、深度學習、VR、Web、Mobile 技術等。此外，也提供微專業（Nanodegree）一系列課程和工作機會的媒合。</p>
<p> 課程深度：✦✦✦<br> 費用：免費、付費</p>
</li>
<li><p>[英] <a href="https://www.datacamp.com/">DataCamp</a></p>
<p> <img src="/images/datacamp.png" alt="datacamp"></p>
<p> 可以稱作資料科學版本的 Codecademy，使用互動學習方式線上學習資料科學，對於資料科學有興趣的讀者可別錯過了。</p>
<p> 課程深度：✦✦<br> 費用：免費、付費</p>
</li>
</ol>
<h1 id="基礎電腦科學"><a href="#基礎電腦科學" class="headerlink" title="基礎電腦科學"></a>基礎電腦科學</h1><ol>
<li><p>[英] <a href="https://zh-tw.coursera.org/">Coursera</a></p>
<p> <img src="/images/coursera.png" alt="coursera"></p>
<p> Coursera 與許多知名大學合作（Stanford、賓州大學、北京大學、台灣大學等），提供教授可以線上授課的平台，學生也可以在家就上到一流學府的課程。與一般課程一樣需要繳交作業，若能完成課程修業規定，可以申請證書。</p>
<p> 課程深度：✦✦✦<br> 費用：免費、付費</p>
</li>
<li><p>[英] <a href="https://www.edx.org/">edX</a></p>
<p> <img src="/images/edx.png" alt="edx"></p>
<p> edX 與 Coursera 類似與許多知名大學合作（MIT、哈佛大學、UCB等），提供教授可以線上授課的平台。</p>
<p> 課程深度：✦✦✦<br> 費用：免費、付費</p>
</li>
</ol>
<h1 id="程式解題"><a href="#程式解題" class="headerlink" title="程式解題"></a>程式解題</h1><ol>
<li><p>[英] <a href="https://leetcode.com/">LeetCode</a></p>
<p> <img src="/images/leetcode.png" alt="leetcode"></p>
<p> LeetCode 又稱軟體工程師的 GRE（英文檢定），是一個線上解題平台，內含許多演算法和資料結構的題目，是許多準備軟體工程面試的面試者常用的工具。</p>
</li>
<li><p>[英] <a href="https://www.hackerrank.com/">Hacker Rank</a></p>
<p> <img src="/images/hackerrank.png" alt="hackerrank"></p>
<p> Hacker Rank 也是一個線上解題平台，除了解題外也提供教學內容幫助學員學習，適合不想單純解題的使用者。</p>
</li>
<li><p>[英] <a href="https://codefights.com/">CodeFights</a></p>
<p> <img src="/images/codefights.png" alt="codefights"></p>
<p> CodeFights 可以讓你和世界各地的程式設計師對戰，讓寫程式變成像圍棋一樣一場場對奕，十分有趣。</p>
</li>
<li><p>[英] <a href="https://www.codewars.com/">Codewars</a></p>
<p> <img src="/images/codewars.png" alt="codewars"></p>
<p> Codewars 也是一個程式挑戰的解題平台，提供許多種語言讓使用者可以練習。</p>
</li>
<li><p>[英] <a href="https://www.kaggle.com/">Kaggle</a></p>
<p> <img src="/images/kaggle.png" alt="kaggle"></p>
<p> Kaggle 和許多知名企業和單位合作提供資料科學問題，讓參賽者可以解題獲得獎勵和合作機會。</p>
</li>
</ol>
<h1 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h1><p>以上整理了散落各地的自學程式設計學習資源懶人包和學習藍圖提供讀者參考，歡迎讀者一起補充，也歡迎加入我們的 <a href="https://www.facebook.com/groups/HappyCoderOrg/">臉書學習社群</a>，分享你的自學程式設計心得和經驗。至於初學者若對於程式設計有興趣的話，不妨從 <a href="https://pics.ee/c34g">Python</a> 或 <a href="https://pics.ee/1HC~">JavaScript</a> 入手，開啟你的程式設計之旅吧：）</p>
<h1 id="參考文件"><a href="#參考文件" class="headerlink" title="參考文件"></a>參考文件</h1><ol>
<li><a href="https://www.google.com/about/careers/students/guide-to-technical-development.html">Google - Guide for Technical Development</a></li>
<li><a href="https://www.coursera.org/">Coursera</a></li>
<li><a href="https://www.edx.org/">edX</a></li>
<li><a href="https://www.udacity.com/">Udacity</a></li>
<li><a href="https://github.com/open-source-society">OSS</a></li>
<li><a href="https://github.com/FreeCodeCamp/FreeCodeCamp">FreeCodeCamp</a></li>
<li><a href="https://www.futurelearn.com/">Future Learn</a></li>
<li><a href="https://lagunita.stanford.edu/">Stanford University</a></li>
<li><a href="http://ocw.mit.edu/courses/#electrical-engineering-and-computer-science">MIT Open Courseware</a></li>
<li><a href="http://spin.atomicobject.com/2015/05/15/obtaining-thorough-cs-background-online/">Obtaining a Thorough CS Background Online</a></li>
<li><a href="https://pics.ee/1HC~">JavaScript 程式設計新手村課程</a></li>
<li><a href="https://cofounderinc.com/2015/03/15/lerning-how-to-write-code/">非本科生，我想半路出家學寫程式，該如何開始？</a></li>
<li><a href="http://www.owstartup.com/">卡卡MOOC資源站</a></li>
</ol>
]]></content>
      <tags>
        <tag>自學程式</tag>
        <tag>自學程式設計</tag>
        <tag>程式設計</tag>
        <tag>線上自學</tag>
        <tag>coding</tag>
        <tag>coder</tag>
        <tag>programming</tag>
        <tag>computer</tag>
        <tag>computer science</tag>
        <tag>code</tag>
        <tag>電腦科學</tag>
        <tag>學寫程式</tag>
        <tag>學程式</tag>
        <tag>software</tag>
        <tag>software enginnering</tag>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 ChatGPT 自學程式設計：觀念、策略與實作練習</title>
    <url>/2024/01/27/learning-coding-programming-with-chatgpt-ai-tool-tutorial/</url>
    <content><![CDATA[<p><img src="/images/posts/learning-coding-programming-with-chatgpt-ai-tool-tutorial.jpg"></p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在過去，學寫程式意味著需要投入大量時間閱讀厚重的教材、反覆摸索錯誤訊息的意義，甚至在 Stack Overflow 上尋求救援。而如今，透過 AI 工具的協助，例如 ChatGPT、GitHub Copilot、Cursor 等，初學者能更快速地理解語法、解決錯誤、模擬情境，提升學習效率。然而，AI 工具並不能替代你的思考，它是加速學習的助力，但不是學習的捷徑。</p>
<h2 id="使用-ChatGPT-自學程式設計：觀念、策略與實作練習"><a href="#使用-ChatGPT-自學程式設計：觀念、策略與實作練習" class="headerlink" title="使用 ChatGPT 自學程式設計：觀念、策略與實作練習"></a>使用 ChatGPT 自學程式設計：觀念、策略與實作練習</h2><p>在人工智慧快速發展的時代，學習寫程式不再是一條孤單、艱難的路。現在有了 ChatGPT 這樣的語言模型作為學習輔助工具，自學者不再需要花大量時間在搜尋資料、理解英文技術文檔或等待他人回答問題上。你可以隨時向 ChatGPT 發問、請它幫忙解釋觀念、修正錯誤，甚至請它幫你出練習題，進行模擬面試。只要方法得當，ChatGPT 可以成為你學習程式設計過程中最可靠的學伴。</p>
<p>本筆記將說明如何結合 ChatGPT 學習程式設計的策略，並透過一個 Python 小專案，實際示範學習流程。</p>
<hr>
<h2 id="為什麼選擇-ChatGPT-自學程式設計？"><a href="#為什麼選擇-ChatGPT-自學程式設計？" class="headerlink" title="為什麼選擇 ChatGPT 自學程式設計？"></a>為什麼選擇 ChatGPT 自學程式設計？</h2><p>過去自學程式最困難的部分在於：</p>
<ol>
<li><strong>資源太多，不知從何下手</strong></li>
<li><strong>卡關時找不到人問問題</strong></li>
<li><strong>英文技術文件理解困難</strong></li>
<li><strong>缺乏練習與回饋機制</strong></li>
</ol>
<p>而 ChatGPT 正好可以解決這四點。你可以用自然語言提問，像對一位資深工程師學習，快速獲得解答、範例與練習題。</p>
<hr>
<h2 id="建議學習語言：Python"><a href="#建議學習語言：Python" class="headerlink" title="建議學習語言：Python"></a>建議學習語言：Python</h2><p>Python 是目前最推薦的入門語言，原因包括：</p>
<ul>
<li>語法簡單、可讀性高</li>
<li>廣泛應用於網頁後端、資料分析、機器學習</li>
<li>有豐富的學習資源與社群</li>
<li>ChatGPT 對 Python 的支援度最佳</li>
</ul>
<hr>
<h2 id="ChatGPT-自學步驟建議"><a href="#ChatGPT-自學步驟建議" class="headerlink" title="ChatGPT 自學步驟建議"></a>ChatGPT 自學步驟建議</h2><h3 id="步驟一：建立學習計畫"><a href="#步驟一：建立學習計畫" class="headerlink" title="步驟一：建立學習計畫"></a>步驟一：建立學習計畫</h3><p>你可以直接問 ChatGPT：「我是一個程式設計初學者，請幫我規劃一份 30 天的 Python 自學計畫，每天學習 1 小時。」</p>
<p>它會給你一份條列式進度表，包含觀念、實作與資源建議。</p>
<h3 id="步驟二：每個主題搭配-ChatGPT-提問"><a href="#步驟二：每個主題搭配-ChatGPT-提問" class="headerlink" title="步驟二：每個主題搭配 ChatGPT 提問"></a>步驟二：每個主題搭配 ChatGPT 提問</h3><p>舉例：你在學「變數與資料型別」，可以問：</p>
<ul>
<li>什麼是 Python 中的變數？</li>
<li>請舉幾個整數、浮點數、字串的例子。</li>
<li>有哪些常見的型別轉換方法？</li>
</ul>
<p>ChatGPT 回答後，請自己動手寫一段練習程式確認理解。</p>
<hr>
<h2 id="小專案練習：待辦清單-CLI-程式"><a href="#小專案練習：待辦清單-CLI-程式" class="headerlink" title="小專案練習：待辦清單 CLI 程式"></a>小專案練習：待辦清單 CLI 程式</h2><p>這是一個適合初學者練習的 Python 小專案，透過這個例子，你可以學到以下基礎概念：</p>
<ul>
<li>變數與資料型別</li>
<li>陣列（列表）</li>
<li>函式定義</li>
<li>使用 while 迴圈與 if 條件判斷</li>
<li>使用 input() 與 print()</li>
</ul>
<h3 id="專案目標"><a href="#專案目標" class="headerlink" title="專案目標"></a>專案目標</h3><p>製作一個可以在命令列中操作的待辦清單程式，讓使用者可以新增、刪除與列出事項。</p>
<h3 id="程式碼示範"><a href="#程式碼示範" class="headerlink" title="程式碼示範"></a>程式碼示範</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">todo_list = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show_menu</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\n--- 我的待辦清單 ---&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;1. 新增事項&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;2. 查看清單&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;3. 刪除事項&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;4. 離開&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    show_menu()</span><br><span class="line">    choice = <span class="built_in">input</span>(<span class="string">&quot;請輸入選項（1-4）：&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> choice == <span class="string">&quot;1&quot;</span>:</span><br><span class="line">        item = <span class="built_in">input</span>(<span class="string">&quot;請輸入待辦事項：&quot;</span>)</span><br><span class="line">        todo_list.append(item)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;已新增！&quot;</span>)</span><br><span class="line">    <span class="keyword">elif</span> choice == <span class="string">&quot;2&quot;</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;\n--- 待辦事項 ---&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> todo_list:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;清單是空的&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">for</span> i, task <span class="keyword">in</span> <span class="built_in">enumerate</span>(todo_list):</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;i + <span class="number">1</span>&#125;</span>. <span class="subst">&#123;task&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">elif</span> choice == <span class="string">&quot;3&quot;</span>:</span><br><span class="line">        index = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;請輸入要刪除的編號：&quot;</span>)) - <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> <span class="number">0</span> &lt;= index &lt; <span class="built_in">len</span>(todo_list):</span><br><span class="line">            removed = todo_list.pop(index)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;已刪除：<span class="subst">&#123;removed&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;無效的編號&quot;</span>)</span><br><span class="line">    <span class="keyword">elif</span> choice == <span class="string">&quot;4&quot;</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;感謝使用，再見！&quot;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;無效的輸入，請重新輸入 1-4&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>這個小專案完整結合了輸入輸出、資料儲存、條件與迴圈控制結構，是一個理想的練習題目。</p>
<hr>
<h2 id="如何用-ChatGPT-擴充與優化"><a href="#如何用-ChatGPT-擴充與優化" class="headerlink" title="如何用 ChatGPT 擴充與優化"></a>如何用 ChatGPT 擴充與優化</h2><p>完成後你可以繼續問 ChatGPT：</p>
<ul>
<li>我要加上「儲存清單到檔案」功能該怎麼做？</li>
<li>我要讓這個程式使用英文與中文雙語介面？</li>
<li>請幫我用物件導向方式重構這段程式。</li>
</ul>
<p>你會發現，透過這樣的對話過程，你正在一步步學會更進階的程式技巧與架構設計觀念。</p>
<hr>
<h2 id="自學關鍵原則"><a href="#自學關鍵原則" class="headerlink" title="自學關鍵原則"></a>自學關鍵原則</h2><ol>
<li><strong>主動提問</strong>：卡住時請立即向 ChatGPT 提問，避免原地打轉。</li>
<li><strong>多做小專案</strong>：觀念看過就忘，實作才記得住。</li>
<li><strong>理解 AI 回答，而非只是複製貼上</strong>：每次用 ChatGPT 給你的程式碼時，都要確實理解它的邏輯。</li>
<li><strong>刻意練習 + 反饋迴圈</strong>：請 ChatGPT 幫你批改程式、找出錯誤、提出改進建議。</li>
</ol>
<hr>
<h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>程式設計不再是一門只能靠天份與背景的技能。現在，只要你有好奇心與持續練習的動力，結合像 ChatGPT 這樣的 AI 工具，任何人都能成為開發者。</p>
<p>你可以從「請幫我寫一支輸出 Hello, World 的 Python 程式」這樣簡單的對話開始，到最後獨立完成一個個有用的小工具。這不僅是一條技能學習的道路，更是你建立邏輯思維、自信心與問題解決力的旅程。</p>
<p>現在就打開你的編輯器，開始寫第一行程式吧。如果你不知道該寫什麼，試著問 ChatGPT：「今天我可以練習什麼 Python 題目？」</p>
]]></content>
      <tags>
        <tag>自學程式</tag>
        <tag>自學程式設計</tag>
        <tag>程式設計</tag>
        <tag>線上自學</tag>
        <tag>coding</tag>
        <tag>coder</tag>
        <tag>programming</tag>
        <tag>computer</tag>
        <tag>computer science</tag>
        <tag>code</tag>
        <tag>電腦科學</tag>
        <tag>學寫程式</tag>
        <tag>學程式</tag>
        <tag>software</tag>
        <tag>software enginnering</tag>
        <tag>web</tag>
        <tag>ChatGPT</tag>
        <tag>AI 工具</tag>
      </tags>
  </entry>
  <entry>
    <title>用 Python 自學程式設計：程式設計思維入門</title>
    <url>/2017/08/10/learning-programming-and-coding-with-python-introduction/</url>
    <content><![CDATA[<p><img src="/images/learning-programming/coding.jpg" alt="Python 自學程式設計：程式設計思維入門"> </p>
<h1 id="什麼是程式設計思維？"><a href="#什麼是程式設計思維？" class="headerlink" title="什麼是程式設計思維？"></a>什麼是程式設計思維？</h1><p>最近幾年全球刮起了一股爭相學習電腦科學（Computer Science）和程式設計（Programming）的風氣，上至總統、首相下至升斗小民都爭相開始學寫程式。事實上，學寫程式最重要的是學習電腦科學背後思考方式和邏輯，學習如何透過科技解決生活上的問題。更進一步說，程式設計與其說是一種科學，更偏向一種藝術人文的創作與科學的混合體。以前畫家或是作家是拿紙筆創作，現在只要有一部電腦，連上網路，就可以透過敲打鍵盤將自己的創意付諸實踐。</p>
<p>有人說：<code>程式設計 = 演算法 + 資料結構</code></p>
<p>這樣的說法不能說錯。事實上，具備良好資料結構和演算法素養的程式設計師往往可以寫出品質較好的程式碼，但大部分人看到演算法和資料結構就已經滿臉問號了，更別提曾經在學校被這兩門課程心靈受挫的學生們。所以對於初學者來說，更應該讓他了解，事實上學程式設計思維就是在學習解決問題的能力：</p>
<ol>
<li>尋找並發現問題</li>
<li>釐清並定義問題</li>
<li>分解問題</li>
<li>尋找解決方法和資源</li>
<li>驗證問題和解決方式</li>
</ol>
<p>唯有具備這樣解決問題的能力，才能稱得上真正學會程式設計思維。而這樣的思考方式的訓練是不管將來到哪裡，是否有從事程式設計相關工作都受用，這才是對於學習電腦科學與程式設計思維正確的認知。</p>
<h1 id="寫程式就是下指令請電腦做事情"><a href="#寫程式就是下指令請電腦做事情" class="headerlink" title="寫程式就是下指令請電腦做事情"></a>寫程式就是下指令請電腦做事情</h1><p>剛剛我們在上面提到程式設計思維中有一個部分是分解問題，事實上，寫程式在定義問題後，我們必須把問題切分，就像是食譜一樣，不管是再豐盛的料理或是滿漢全席，都有一個個步驟去完成。舉例來說，我們今天要創作一道蔥花蛋或菜脯蛋，我的步驟會是：</p>
<ol>
<li>放點油</li>
<li>打蛋</li>
<li>如果喜歡蔥花可以加入蔥花，如果喜歡菜脯可以加入菜脯（程式術語：<code>if...else</code> 條件判斷）</li>
<li>放入少許鹽巴</li>
<li>中火快炒，翻五次面（程式術語：<code>for</code> 迴圈）</li>
<li>當看到蛋面呈現金黃色時可以起鍋，結束料理（程式術語：<code>while</code> 迴圈）</li>
<li>好吃的蔥花蛋或菜脯蛋上桌</li>
</ol>
<p>再大程式切分後就變成一個個小程式和指令，將程式切分成一個個模組，再將它們都組裝起來就成我們的應用程式和系統。</p>
<h1 id="第一次學寫程式，學哪一種語言好呢？"><a href="#第一次學寫程式，學哪一種語言好呢？" class="headerlink" title="第一次學寫程式，學哪一種語言好呢？"></a>第一次學寫程式，學哪一種語言好呢？</h1><p>既然程式設計思維很重要，究竟第一次學寫程式，學哪一種語言好呢？</p>
<p>先講結論：<code>Python</code> 語法平易近人，學習曲線平緩，應用廣，可以很快做出一些解決生活上問題的應用，累積成就感，適合初學者。當然若你是國中小的學生，<code>Scratch</code> 之類的拖拉式圖象化程式語言或許是合適選擇，但成人一般對於這種玩具比較排斥些，認為不是真正在學寫程式。</p>
<p>一般而言除了區分高低階程式語言外，我們會把程式語言分為：</p>
<p><code>靜態語言</code>：在程式語言中我們會使用變數（variable）儲存程式的值，在靜態語言中需要事先宣告變數型態（type），也宣告了它會在記憶體中佔有多少空間等資訊。電腦會透過這些資訊把程式編譯（compile）成低階的機器語言讓電腦可以執行。這樣的設計可以讓電腦執行起來更有效率，但對於開發者來說會比較繁瑣一些（例如：宣告字串變數要在變數前加 string 宣告），也由於類型被宣告後無法改變，所以被稱為靜態語言。常見的靜態語言包括：C&#x2F;C++、Java、C#、Go、Swift 等）。</p>
<p><code>動態語言</code>（又稱為 script language）：相對於靜態語言，動態語言不會強制變數類型宣告，它不是使用編譯器而是使用直譯器（interpreter）來解譯。動態語言雖然開發和撰寫程式上效率較快，但執行速度往往比靜態語言慢（現在差距已經慢慢變小）。一般常見的動態語言包括：Python、JavaScript、PHP、Ruby 等）。</p>
<p>以下就來先簡單介紹常見程式語言和它的簡單語法範例（可以透過 <a href="https://repl.it/">repl.it</a> 可以將程式碼貼在網頁上呈現所見即所得效果）：</p>
<ol>
<li><p>Python<br>本系列文章的主角，<a href="https://zh.wikipedia.org/wiki/Python">Python</a> 是一種物件導向、直譯式的跨平台動態程式語言，它包含了一組功能完備的標準庫和豐富套件生態系，可以輕鬆完成很多常見的任務（例如：物聯網應用開發、遊戲、讀寫檔案、自然語言處理、網路爬蟲、網站開發、機器學習等），因為它可以很輕易整合其他底層語言，所以又稱為膠水語言。它的語法簡單，與其它大多數程式設計語言使用大括弧不一樣，它使用縮進來定義語句塊。由於具備簡潔易學等特性，是許多開發者推薦 Python 為初學者第一個學習的程式語言。由於版本更迭，我們接下來討論的主要是以 Python3 為主。以下是使用 Python 印出最喜歡的語言：</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">language = <span class="string">&#x27;Python&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;My favorite Language is &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(language))</span><br></pre></td></tr></table></figure>
</li>
<li><p>C<br> 經典的傳統主力程式語言，適用於需要效能重視速度的應用，可以操作許多小細節，但學習門檻稍微高一些，執行前需要事先編譯完成：</p>
 <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> atgc, <span class="type">char</span> *argv[])</span> &#123;</span><br><span class="line">    <span class="built_in">string</span> language = <span class="string">&quot;C++&quot;</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;My favorite Language is %s&quot;</span>, language);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>C++<br> 屬於 C 家族成員，具備物件導向特性，同樣是適用於需要效能重視速度和操作底層韌體、硬體的好選擇：</p>
 <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    string language = <span class="string">&quot;C++&quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;My favorite Language is &quot;</span> &lt;&lt; language;</span><br><span class="line">    <span class="keyword">return</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Java<br> 常見於企業系統和 Android 行動應用開發的 Java 是物件導向程式語言，由於跨平台開發等特性讓 Java 一直是市場蠻熱門的語言。</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CodeLanguage</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">string</span> <span class="variable">language</span> <span class="operator">=</span> <span class="string">&quot;Java&quot;</span>;</span><br><span class="line">        System.out.format(<span class="string">&quot;My favorite Language is %s&quot;</span>, language);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>C#<br> 由微軟推出吸收了 C++&#x2F;Java 等優點的物件導向程式語言，常見於開發微軟平台相關的應用程式。</p>
 <figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">CodeLanguage</span> &#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">CodeLanguage</span> &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>()</span> &#123;</span><br><span class="line">            <span class="built_in">string</span> language = <span class="string">&quot;C#&quot;</span>;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;My favorite Language is &#123;&#125;&quot;</span>, language);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>JavaScript<br> 隨著版本演進和 Node.js 的推出後從玩具語言到可以挑大樑的程式語言，應用範圍遍及網頁前後端開發、遊戲開發、物聯網程式開發、手機程式開發等。是程式設計師社群平台 Github 和程式問答平台 StackOverflow 上最受歡迎的程式語言之一。且由於應用範圍廣泛，程式江湖更傳言：可以使用 JavaScript 編寫的程式，最終都會出現 JavaScript 版本。</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> language = <span class="string">&#x27;JavaScript&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;My My favorite Language is &#x27;</span> + language);</span><br></pre></td></tr></table></figure>
</li>
<li><p>PHP<br> 吸收了 C&#x2F;Java&#x2F;Perl 特點的網站開發主力語言，世界上有許多的網站都是使用 PHP 進行開發。</p>
 <figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="variable">$language</span> = <span class="string">&#x27;PHP&#x27;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;My favorite Language is &#x27;</span> + language;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Ruby<br> 常見於網頁 Web 開發，以 Ruby on Rails Web 開發框架聞名於程式設計社群。</p>
 <figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">language = <span class="string">&#x27;Ruby&#x27;</span></span><br><span class="line">puts <span class="string">&#x27;My favorite Language is <span class="subst">#&#123;language&#125;</span>&#x27;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Swift<br> 由 Apple 推出的推出的程式語言，主要用於開發 iOS&#x2F;Mac 系列產品，應用範圍也涉及到了伺服器端開發（Server）。</p>
 <figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> language <span class="operator">=</span> &#x27;<span class="type">Swift</span>&#x27;</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;My favorite Language is &quot;</span>, language)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>Go<br>由 Google 推出的程式語言，適合用於平行化程式開發。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    language := <span class="string">&#x27;Go&#x27;</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;My favorite Language is %s&quot;</span>, language)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<p>看完了眾多語言是不是發現其實 Python 語法還蠻可愛平易近人的呢？事實上，世界上沒有最好的程式語言，只有最適合的使用地方。接下來我們將透過 Python 學習程式設計思維。</p>
<h1 id="Python-環境建置"><a href="#Python-環境建置" class="headerlink" title="Python 環境建置"></a>Python 環境建置</h1><p>在開始之前我們必須先建置相關的開發環境，讓自己從麻瓜（不會寫程式的人）變成擁有程式魔力的魔法師。</p>
<p>所謂工欲善其事，必先利其器，要開發好的應用程式必須先準備好開發環境才行。以下介紹我們在接下來開發 Python Flask Web 應用程式所需要安裝的開發環境工具（以下以 Mac OS 等 Unix-like 作業系統為示範，若是 Windows 使用者建議安裝 Virtualbox 並運行 Linux Ubuntu 作業系統，<a href="http://blog.xuite.net/yh96301/blog/432341564-VirtualBox+5.1%E5%AE%89%E8%A3%9DUbuntu+16.04">參考安裝文件</a>）：</p>
<ol>
<li><p>Microsoft VSCode 編輯器<br> Microsoft VSCode 是 Microsoft 推出的編輯器（非整合開發環境 IDE），夾帶著 Microsoft 過去打造 Visual studio 整合開發環境的豐富經驗，相比 Sublime Text 和其他編輯器，VSCode 的優勢在於開源且活躍的開發社群、內建 debugger 框架、原生 Git 整合、套件整合容易等特性。所以對於初學者來說 VSCode 是一個蠻適合入門的開發環境。它的安裝方式也十分簡易，在官網下載後按照指示安裝完成即可。</p>
<p> <img src="/images/learning-programming/vscode-index.png" alt="Python Web Flask 實戰開發教學 - 簡介與環境建置"> </p>
<p> 我們可以安裝 Python 語法和格式檢查的相關 Python 套件幫助除錯：</p>
<p> <img src="/images/learning-programming/vscode-python.png" alt="Python Web Flask 實戰開發教學 - 簡介與環境建置"> </p>
</li>
<li><p>終端機環境（iTterm&#x2F;內建 terminal）<br> terminal（終端機）是我們下指令的地方，許多時候我們進行程式開發時不會使用 GUI 的介面而是使用下指令方式請電腦做相對應的行為。在 Linux 和 Mac 裡面都有內建的 terminal 的應用程式，若你是 Mac 用戶想使用更便利的工具（分割視窗、熱鍵、搜尋、自動補完等）可以額外安裝 <a href="https://www.iterm2.com/index.html">iterm2</a> 做使用。若是不想使用 Virtualbox，使用 Windows 讀者可以使用 <a href="http://cmder.net/">Cmder</a> 這個軟體當做終端機環境。</p>
<p> <img src="/images/learning-programming/iterm2.png" alt="Python Web Flask 實戰開發教學 - 簡介與環境建置"> </p>
<p> 下指令（$ 為提示字元，不用輸入）：</p>
<p> <img src="/images/learning-programming/iterm2-example.png" alt="Python Web Flask 實戰開發教學 - 簡介與環境建置"> </p>
<p> 對於有志於從事程式開發相關工作的讀者建議可以多熟悉指令碼的輸入，更多指令碼可以參考鳥哥撰寫的 <a href="http://linux.vbird.org/linux_basic/redhat6.1/linux_06command.php">Linux 基本指令介紹</a> 和 <a href="http://www.linux.org.tw/resource.html">Linux 學習資源</a>。</p>
</li>
<li><p>Git 版本控制系統&#x2F;註冊 GitHub 帳戶<br> Git 是一種分散式版本控制系統，可以讓我們可以更方便地管理我們的程式碼。在網路上有非常多優秀的 Git 教學文件（<a href="https://backlogtool.com/git-guide/tw/">連猴子都能懂的Git入門指南</a>、<a href="https://www.slideshare.net/littlebtc/git-5528339">寫給大家的 Git 教學</a>、<a href="https://www.slideshare.net/lkiral/git-34157836">初心者 Git 上手攻略</a>）。安裝 Git 方式是到官網下載軟體，依照指示安裝。</p>
<p> <img src="/images/learning-programming/git-index.png" alt="Python Web Flask 實戰開發教學 - 簡介與環境建置"> </p>
<p> 互動式語法學習：</p>
<p> <img src="/images/learning-programming/try-git.png" alt="Python Web Flask 實戰開發教學 - 簡介與環境建置"> </p>
<p> 在介紹完 git 之後我們來了解一下 GitHub。GitHub 是一個可以存放 git 程式碼專案的平台，透過 GitHub 我們可以接觸到最新的開放原始碼資訊，也可以將我們的程式碼開源出來。</p>
<p> <img src="/images/learning-programming/github-index.png" alt="Python Web Flask 實戰開發教學 - 簡介與環境建置"> </p>
<p> 從 GitHub 上複製程式碼</p>
<p> <img src="/images/learning-programming/github-clone.png" alt="Python Web Flask 實戰開發教學 - 簡介與環境建置"> </p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 複製一份到本地端</span><br><span class="line">$ git clone https://github.com/kdchang/flask101.git</span><br><span class="line"># 移動到資料夾</span><br><span class="line">$ cd flask101</span><br></pre></td></tr></table></figure>

<p> 常見 Git 指令：</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 初始化專案</span><br><span class="line">$ git init</span><br><span class="line"># 查看狀態</span><br><span class="line">$ git status</span><br><span class="line"># 檢查差異</span><br><span class="line">$ git diff </span><br><span class="line"># 將變更檔案放入暫存區</span><br><span class="line">$ git add index.py</span><br><span class="line"># 使用 commit -m 提交變更</span><br><span class="line">$ git -a -m &#x27;init commit&#x27;</span><br><span class="line"># 查看歷史</span><br><span class="line">$ git log</span><br><span class="line"># 放棄已經 commit 的檔案重回暫存區</span><br><span class="line">$ git reset HEAD index.py</span><br><span class="line"># 放棄檔案變更</span><br><span class="line">$ git checkout index.py</span><br></pre></td></tr></table></figure>
</li>
<li><p>Anaconda Python3 版本<br> Anaconda 是一個 all-in-one 的 Python 開發環境，對於初學者來說是個十分合適的開發環境包。Anaconda 具備了幾項特點：</p>
<ul>
<li>便於安裝許多流行的科學、數學、工程、數據分析的 Python 模組  </li>
<li>開源和免費</li>
<li>跨平台支持：Linux、Windows、Mac</li>
<li>支持 Python 版本切換，方便建立不同的虛擬開發環境</li>
<li>內建 Spyder 編輯器和 Jupyter Notebook 環境</li>
</ul>
<p> 安裝流程也十分簡單，進入 Anaconda 首頁，選擇對應作業系統（這邊使用 Mac OS）：<br> <img src="/images/learning-programming/anaconda-index.png" alt="Python Web Flask 實戰開發教學 - 簡介與環境建置"></p>
<p> 選擇對應 Python 版本下載，我們使用 Graphical Installer（圖像介面安裝方式），接著在下載完成時按照預設的安裝方式完成安裝；<br> <img src="/images/learning-programming/anaconda-install.png" alt="Python Web Flask 實戰開發教學 - 簡介與環境建置"> </p>
<p> 若是完整安裝成功，可以打開終端機輸入，若是顯示 Python 3.6.0 :: Anaconda 4.3.0 (x86_64) 版本號即安裝成功：</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ python -V</span><br><span class="line">Python 3.6.0 :: Anaconda 4.3.0 (x86_64)</span><br></pre></td></tr></table></figure>

<p> 接著要建立我們專案虛擬環境，這樣在安裝操作套件時比較不容易被污染到 root 的環境，啟動後會出現（套件名稱）的提示字元：</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 顯示目前虛擬環境列表</span><br><span class="line">$ conda info -e </span><br><span class="line"># 創建虛擬環境</span><br><span class="line">$ conda create -n 套件名稱 python=3.6</span><br><span class="line"># 進入虛擬環境（若是 Windows cmder 環境不用加 source） ，成功後提示字元變成：（套件名稱）$</span><br><span class="line">$ source activate 套件名稱</span><br><span class="line"># 離開虛擬環境（若是 Windows cmder 環境不用加 source） </span><br><span class="line">$ source deactivate </span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="建立虛擬環境"><a href="#建立虛擬環境" class="headerlink" title="建立虛擬環境"></a>建立虛擬環境</h2><p>在建立相關開發工具後我們正式來建立一個 Python 的專案：</p>
<p>打開終端機移動到桌面，建立專案資料夾</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ cd ~/Desktop</span><br><span class="line">$ mkdir python_examples</span><br><span class="line">$ cd python_examples</span><br></pre></td></tr></table></figure>

<p>建立獨立虛擬環境，並進入虛擬環境：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ conda create -n python_examples_venv python</span><br><span class="line">$ source activate python_examples_venv</span><br></pre></td></tr></table></figure>

<p>成功進入虛擬環境後</p>
<h1 id="你的第一個-Python-程式"><a href="#你的第一個-Python-程式" class="headerlink" title="你的第一個 Python 程式"></a>你的第一個 Python 程式</h1><p>一般而言我們會使用編輯器或是整合開發環境（IDE）進行程式撰寫，然後在終端機下指令執行程式。當然你也可以在終端機上使用內建互動式介面或是 jupyter notebook 進行。以下是我們要介紹給大家的簡單範例，第一個是隨機印出不同的喜愛程式語言，第二個是使用第三方套件擷取政府公開資料。程式設計唯有動手實際操作和實踐才能學的好，希望讀者打開你的編輯器透過自己實作去熟悉 Python 程式撰寫：</p>
<p>隨機印出不同的喜愛程式語言：</p>
<ol>
<li>引入 <code>random</code> 套件</li>
<li>定義 <code>language</code> 變數，並將儲存程式語言字串的串列（list）資料結構給定給變數</li>
<li>產生 1 到 2 之間的隨機整數</li>
<li>列印出最喜歡的程式語言字串（含根據隨機產生的 index 選取到的串列值）</li>
</ol>
<figure class="highlight python"><figcaption><span>favorite_language.py</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">language = [<span class="string">&#x27;Python&#x27;</span>, <span class="string">&#x27;JavaScript&#x27;</span>, <span class="string">&#x27;Java&#x27;</span>]</span><br><span class="line">rnd = random.randint(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;My favorite Language is&#x27;</span> + language[rnd])</span><br></pre></td></tr></table></figure>

<p>可以在終端機移動到檔案資料夾執行程式檔案，例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python favorite_language.py</span><br></pre></td></tr></table></figure>

<p>使用第三方套件擷取政府公開資料：</p>
<ol>
<li>引入 <code>requests</code> 套件</li>
<li>爬取政府公開 Wifi 熱點資料，將取得資料回應給定給 <code>response</code> 變數</li>
<li>將資料轉換成以 <code>&#123; &quot;key&quot;: &quot;value &quot;&#125;</code> 形式的 <code>json</code> 格式</li>
<li>印出取得的資料</li>
</ol>
<figure class="highlight python"><figcaption><span>wifi_data.py</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;http://data.taipei/opendata/datalist/apiAccess?scope=resourceAquire&amp;rid=b087af42-2c54-4dbf-86c8-427d788779e5&#x27;</span></span><br><span class="line">response = requests.get(url)</span><br><span class="line">data = response.json()</span><br><span class="line"><span class="built_in">print</span>(data)</span><br></pre></td></tr></table></figure>

<h1 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h1><p>以上就是程式設計思維入門簡介，透過了解什麼是程式設計思維和不同語言的特性，我們將對於自學程式設計有更正確的認識。接下來我們將透過 Python 介紹程式設計的內涵和不同的應用情境。當然，網路上也有<a href="http://happycoder.org/2017/01/27/learning-coding-programming-tutorial-and-resource/">許多學習資源</a>可以當做參考，若你需要先建立基本的電腦科學知識的話，可以參考哈佛大學的熱門公開課程 <a href="https://cs50.harvard.edu/">CS50</a></p>
<p>（image via <a href="https://i.amz.mshcdn.com/rRxXhoIhNucutinAio8YRF4TvzE=/1200x630/2017%2F06%2F15%2F71%2Fc1a206081efd44d1b61f5c0f86dcda6c.c222e.jpg">mshcdn</a>）</p>
<h1 id="延伸閱讀"><a href="#延伸閱讀" class="headerlink" title="延伸閱讀"></a>延伸閱讀</h1><ol>
<li><a href="https://www.python.org/">Python 官網</a></li>
<li><a href="https://pics.ee/1HC~">JavaScript 程式設計新手村</a></li>
<li><a href="http://pics.ee/c34g">Python Web 程式設計入門實戰</a></li>
<li><a href="https://cofounderinc.com/2015/03/15/lerning-how-to-write-code/">非本科生，我想半路出家學寫程式，該如何開始？</a></li>
<li><a href="http://happycoder.org/2017/01/27/learning-coding-programming-tutorial-and-resource/">自學程式設計學習資源懶人包</a></li>
<li><a href="https://cs50.harvard.edu/">CS50</a></li>
<li><a href="http://cs50.tv/2016/fall/">CS50 TV</a></li>
</ol>
]]></content>
      <tags>
        <tag>Python, Django, MVC, Web, MTV, Web Backend, Web Framework, 教學, Flask, 框架, coding, code, 程式設計, 自學程式設計, CS, Computer, Computer Science</tag>
      </tags>
  </entry>
  <entry>
    <title>用 Python 自學程式設計：list、tuple、dict and set</title>
    <url>/2017/08/15/learning-programming-and-coding-with-python-list-tuple-dict-set/</url>
    <content><![CDATA[<p><img src="/images/learning-programming/coding.jpg" alt="Python 自學程式設計：程式設計思維入門"> </p>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在前一單元中我們了解了變數和 Python 世界物件的重要性，也介紹了簡單的資料型別，我們也有提到簡單資料型別（布林、整數、浮點數和字串）就像是原子一樣，而複雜資料型別就像是分子一樣，在這一單元中我們將更進一步了解 Python 複雜的資料型別以及如何操作它們。</p>
<h1 id="串列-list-與元組-tuple"><a href="#串列-list-與元組-tuple" class="headerlink" title="串列 list 與元組 tuple"></a>串列 list 與元組 tuple</h1><p>在程式語言中通常可以利用序列式方式去記錄資料，在 Python 中，我們使用 list 串列和 tuple 元組來儲存序列式資料。兩者最大的不同在於 tuple 是不可以改變的。</p>
<ol>
<li><p>串列 list<br> 串列是一連串順序性的元素組成，我們可以新增、讀取、刪除和修改串列，串列中可以有重複的元素。</p>
<ul>
<li>建立串列</li>
</ul>
<p> 串列可以透過中括號或是使用 list 關鍵字來創建，裡面元素由逗號分隔</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">my_list0 = []</span><br><span class="line">my_list1 = list()</span><br><span class="line">my_list2 = [&#x27;python&#x27;, &#x27;js&#x27;, &#x27;SQL&#x27;]</span><br><span class="line"></span><br><span class="line">list(&#x27;js&#x27;)</span><br><span class="line"># [&#x27;j&#x27;, &#x27;s&#x27;]</span><br></pre></td></tr></table></figure>

<ul>
<li>使用 index offset 和範圍來取得元素</li>
</ul>
<p> 在電腦科學世界，index 通常是從 0 開始，-1 從結尾數回來：</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">languages = [&#x27;python&#x27;, &#x27;js&#x27;, &#x27;go&#x27;]</span><br><span class="line">languages[0] # python</span><br><span class="line">languages[1] # js</span><br><span class="line">languages[-1] # go</span><br></pre></td></tr></table></figure>

<p> 範圍取值 [開始:結束（不含）:間隔（default 1）]：</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">languages = [&#x27;python&#x27;, &#x27;js&#x27;, &#x27;go&#x27;]</span><br><span class="line">my_list2[0:1] # [&#x27;python&#x27;]</span><br></pre></td></tr></table></figure>

<ul>
<li>append 元素到串列最後</li>
</ul>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">languages = [&#x27;python&#x27;, &#x27;js&#x27;, &#x27;go&#x27;]</span><br><span class="line">languages.append(&#x27;java&#x27;)</span><br></pre></td></tr></table></figure>

<ul>
<li>extend 串連串列</li>
</ul>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">languages = [&#x27;python&#x27;, &#x27;js&#x27;, &#x27;go&#x27;]</span><br><span class="line"></span><br><span class="line">languages.extend(&#x27;c++&#x27;) # [&#x27;python&#x27;, &#x27;js&#x27;, &#x27;go&#x27;, &#x27;c++&#x27;]</span><br><span class="line"></span><br><span class="line">languages += [&#x27;ruby&#x27;, &#x27;c&#x27;] # [&#x27;python&#x27;, &#x27;js&#x27;, &#x27;go&#x27;, &#x27;c++&#x27;, &#x27;ruby&#x27;, &#x27;c&#x27;]</span><br></pre></td></tr></table></figure>

<ul>
<li>insert 插入元素到位置上</li>
</ul>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">languages = [&#x27;python&#x27;, &#x27;js&#x27;, &#x27;go&#x27;]</span><br><span class="line">languages.insert(0, &#x27;java&#x27;) # [&#x27;java&#x27;, &#x27;python&#x27;, &#x27;js&#x27;, &#x27;go&#x27;]</span><br></pre></td></tr></table></figure>

<ul>
<li>del 刪除特定 index 值</li>
</ul>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">languages = [&#x27;python&#x27;, &#x27;js&#x27;, &#x27;go&#x27;]</span><br><span class="line"></span><br><span class="line">del languages[-1] # [&#x27;python&#x27;, &#x27;js&#x27;]</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>len() 元素長度</li>
</ul>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">len([&#x27;python&#x27;, &#x27;js&#x27;, &#x27;go&#x27;]) # 3</span><br></pre></td></tr></table></figure>

<ul>
<li>in 檢查元素是否在串列</li>
</ul>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;java&#x27; in [&#x27;python&#x27;, &#x27;js&#x27;, &#x27;go&#x27;] # False</span><br></pre></td></tr></table></figure>

<p> 還有更多好用的方法，讀者可以進一步查詢使用：<br> <code>remove()</code>、<code>index()</code>、<code>count()</code>、<code>join()、sort()、copy()</code></p>
</li>
<li><p>元組 tuple<br> 元組可以視為不可改變的串列，使用方式如下：</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">languages = python&#x27;, &#x27;js&#x27;, &#x27;go&#x27; # (python&#x27;, &#x27;js&#x27;, &#x27;go&#x27;)</span><br><span class="line">tuple([&#x27;python&#x27;, &#x27;js&#x27;, &#x27;go&#x27;])</span><br></pre></td></tr></table></figure>

<p> 元組比起串列好處：</p>
<ul>
<li>佔用空間較少</li>
<li>可以當做字典的 key（因不可變）</li>
<li>具名 tuple 可當做物件替代</li>
<li>當做函式引數</li>
</ul>
</li>
</ol>
<h1 id="字典-dict-和集合-set"><a href="#字典-dict-和集合-set" class="headerlink" title="字典 dict 和集合 set"></a>字典 dict 和集合 set</h1><ol>
<li><p>dict<br> 在其他程式語言可能稱 <code>&#123;&#39;key&#39;:&#39;value&#39;&#125;</code> 字典為關聯式陣列或是雜湊表，其用獨一無二不可變的鍵（布林、整數、浮點數、字串和串列）去對應值，字典通常是可變的，可以新增刪除、修改鍵值。</p>
<ul>
<li><p>創建 dict</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">languages = &#123;</span><br><span class="line">    &#x27;name&#x27;: &#x27;python&#x27;,</span><br><span class="line">    &#x27;version&#x27;: &#x27;3.5&#x27;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dict([(&#x27;name&#x27;, &#x27;python&#x27;), (&#x27;version&#x27;, &#x27;3.5&#x27;)])</span><br></pre></td></tr></table></figure>
</li>
<li><p>新增和取值</p>
</li>
</ul>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">languages = &#123;&#125;</span><br><span class="line"></span><br><span class="line">languages[&#x27;name&#x27;] = &#x27;python&#x27;</span><br><span class="line"></span><br><span class="line">print(languages[&#x27;name&#x27;]) # python</span><br></pre></td></tr></table></figure>

<ul>
<li>合併</li>
</ul>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">languages = &#123;</span><br><span class="line">    &#x27;name&#x27;: &#x27;python&#x27;,</span><br><span class="line">    &#x27;version&#x27;: &#x27;3.5&#x27;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">languages2 = &#123;</span><br><span class="line">    &#x27;name&#x27;: &#x27;js&#x27;,</span><br><span class="line">    &#x27;version&#x27;: &#x27;6&#x27;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">languages.update(languages2)</span><br></pre></td></tr></table></figure>

<ul>
<li>keys() 取得所有鍵、values() 取得所有值、items() 取得所有鍵值對</li>
</ul>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">languages = &#123;</span><br><span class="line">    &#x27;name&#x27;: &#x27;python&#x27;,</span><br><span class="line">    &#x27;version&#x27;: &#x27;3.5&#x27;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">languages.keys() # [&#x27;name&#x27;, &#x27;version&#x27;]</span><br><span class="line">languages.values() # [&#x27;python&#x27;, &#x27;3.5&#x27;]</span><br><span class="line">languages.items() # [(&#x27;name&#x27;, &#x27;python&#x27;), (&#x27;version&#x27;, &#x27;3.5&#x27;)]</span><br></pre></td></tr></table></figure>

<ul>
<li>使用 in 判斷 key 是否存在 dict</li>
</ul>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">languages = &#123;</span><br><span class="line">    &#x27;name&#x27;: &#x27;python&#x27;,</span><br><span class="line">    &#x27;version&#x27;: &#x27;3.5&#x27;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x27;name&#x27; in languages # True</span><br></pre></td></tr></table></figure>
</li>
<li><p>set<br> 類似小學時候學習的數學集合，可以想成就是留下鍵值的 dict。由於 set 存不重複值。當你只想知道值是否存在就是使用 set 的時機，例如使用 in 來判斷值是否存在。</p>
<ul>
<li>建立 set</li>
</ul>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">languages = set()</span><br><span class="line"></span><br><span class="line">languages = &#123;&#x27;python&#x27;, &#x27;js&#x27;, &#x27;python&#x27;, &#x27;go&#x27;&#125;</span><br><span class="line"># &#123;&#x27;python&#x27;, &#x27;js&#x27;, &#x27;go&#x27;&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>轉換成 set</li>
</ul>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">set(&#x27;python&#x27;) # &#123;&#x27;p&#x27;, &#x27;y&#x27;, &#x27;t&#x27;, &#x27;h&#x27;, &#x27;o&#x27;, &#x27;n&#x27;&#125;</span><br><span class="line">set([&#x27;python&#x27;, &#x27;js&#x27;]) # &#123;&#x27;python&#x27;, &#x27;js&#x27;&#125;</span><br><span class="line">set((&#x27;python&#x27;, &#x27;js&#x27;)) # &#123;&#x27;python&#x27;, &#x27;js&#x27;&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>使用 intersection 取交集，union 取聯集，difference 取差集</li>
</ul>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">languages1 = &#123;&#x27;js&#x27;, &#x27;python&#x27;, &#x27;go&#x27;&#125;</span><br><span class="line">languages2 = &#123;&#x27;python&#x27;, &#x27;go&#x27;, &#x27;java&#x27;&#125;</span><br><span class="line">languages1.intersection(languages2) # &#123;&#x27;python&#x27;, &#x27;go&#x27;&#125;</span><br><span class="line">languages1.union(languages2) # &#123;&#x27;js&#x27;, &#x27;python&#x27;, &#x27;java&#x27;, &#x27;go&#x27;&#125;</span><br><span class="line">languages1.difference(languages2) # &#123;&#x27;js&#x27;&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="整合在一起"><a href="#整合在一起" class="headerlink" title="整合在一起"></a>整合在一起</h1><p>回想一下，我們可以使用 [] 建立 list 串列，用 , 來創立 tuple 元組，使用 {} 來建立字典。雖然建立方式不盡相同，但相同的是你都可以透過中括號來存取內容值：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">languages0 = [&#x27;python&#x27;, &#x27;js&#x27;] # languages0[0]</span><br><span class="line">languages1 = (&#x27;python&#x27;, &#x27;js&#x27;) # languages1[0]</span><br><span class="line">languages2 = &#123;</span><br><span class="line">    &#x27;name&#x27;: &#x27;python&#x27;,</span><br><span class="line">    &#x27;version&#x27;: &#x27;3.5&#x27;</span><br><span class="line">&#125; # languages2[&#x27;name&#x27;]</span><br></pre></td></tr></table></figure>

<h1 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h1><p>以上就是程式設計思維入門簡介，透過了解什麼是程式設計思維和不同語言的特性，我們將對於自學程式設計有更正確的認識。接下來我們將透過 Python 介紹程式設計的內涵和不同的應用情境。當然，網路上也有<a href="http://happycoder.org/2017/01/27/learning-coding-programming-tutorial-and-resource/">許多學習資源</a>可以當做參考。</p>
<p>（image via <a href="https://i.amz.mshcdn.com/rRxXhoIhNucutinAio8YRF4TvzE=/1200x630/2017%2F06%2F15%2F71%2Fc1a206081efd44d1b61f5c0f86dcda6c.c222e.jpg">mshcdn</a>）</p>
<h1 id="延伸閱讀"><a href="#延伸閱讀" class="headerlink" title="延伸閱讀"></a>延伸閱讀</h1><ol>
<li><a href="https://www.python.org/">Python 官網</a></li>
<li><a href="https://pics.ee/1HC~">JavaScript 程式設計新手村</a></li>
<li><a href="http://pics.ee/c34g">Python Web 程式設計入門實戰</a></li>
<li><a href="https://cofounderinc.com/2015/03/15/lerning-how-to-write-code/">非本科生，我想半路出家學寫程式，該如何開始？</a></li>
<li><a href="http://happycoder.org/2017/01/27/learning-coding-programming-tutorial-and-resource/">自學程式設計學習資源懶人包</a></li>
</ol>
]]></content>
      <tags>
        <tag>Python, Django, MVC, Web, MTV, Web Backend, Web Framework, 教學, Flask, 框架, coding, code, 程式設計, 自學程式設計, CS, Computer, Computer Science</tag>
      </tags>
  </entry>
  <entry>
    <title>用 Python 自學程式設計：變數（variable）與資料型別（type）</title>
    <url>/2017/08/11/learning-programming-and-coding-with-python-variable/</url>
    <content><![CDATA[<p><img src="/images/learning-programming/coding.jpg" alt="Python 自學程式設計：程式設計思維入門"> </p>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在前一單元中我們了解了程式設計思維的概念和建立了 Python 的開發環境，在這一單元中我們將了解 Python 變數與資料型別以及如何操作字串。</p>
<h1 id="電腦最初的用途就是一台超大台計算機"><a href="#電腦最初的用途就是一台超大台計算機" class="headerlink" title="電腦最初的用途就是一台超大台計算機"></a>電腦最初的用途就是一台超大台計算機</h1><p>資料的儲存以及操作在程式設計中扮演非常重要的角色，因為最早的電腦程式就是一種大型的計算機（最早的電腦就稱為計算機），即便現在學校教授電腦科學概論往往都會把課程稱為計算機概論呢！在操作資料的過程中如何儲存資料就是非常重要的事情，一般而言資料儲存有分為暫時儲存的揮發性資料（儲存在記憶體中的變數資料）和持久性儲存的資料（例如：資料庫、檔案等），在這邊我們討論的是變數的資料。</p>
<h1 id="在-Python-世界，所有東西都是物件"><a href="#在-Python-世界，所有東西都是物件" class="headerlink" title="在 Python 世界，所有東西都是物件"></a>在 Python 世界，所有東西都是物件</h1><p>在 Python 世界中，所有東西都是物件，物件可以視為透明的箱子，裡面存了一些資料。物件會有自己的資料型別，決定它做什麼樣的操作。另外，又依據箱子內的值可否改變而分為<code>不可變物件</code>和<code>可變物件</code>。</p>
<p>在前面我們有提到資料可以儲存在記憶體中的變數，在 Python 中變數只是一種名稱，當給定值時不會將值複製，而是將名稱貼到給定的物件上（注意 Python 程式語言中的 <code>=</code> 是給定值，<code>==</code> 才是相等的意思）</p>
<p>談到資料，就不得不談一下資料型別（type），雖然在 Python 不用像 C 語言之類程式語言需要在變數前面定義資料型別（在 Python 中 class 類別和 type 類型幾乎代表同一件事情，class 類別則是定義物件的基礎），但物件的資料型別會影響資料操作，所以值得我們好好認識。在 Python 世界裡，可以分為以下幾種<code>簡單</code>資料型別（可以想像成化學課中的原子）：</p>
<ol>
<li><code>bool</code> 布林，分為 <code>True</code>、<code>False</code> 通常用於條件判斷</li>
<li><code>int</code> 整數，例如： <code>10</code>、<code>999999</code> </li>
<li><code>float</code> 浮點數，係指有小數點的整數：<code>1.222</code>、<code>1.0e7</code> 等同於 10 的 7 次方</li>
<li><code>string</code> 字串，一串文字字元</li>
</ol>
<p>我們可以透過 <code>type(物件)</code> 去確認該物件的型別：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">print(True)</span><br><span class="line">print(101)</span><br><span class="line">print(3.14)</span><br><span class="line">print(&#x27;happy coding&#x27;)</span><br></pre></td></tr></table></figure>

<p>另外一種是<code>複雜</code>資料型別（可以想像成是化學課中的分子），這個我們會在下一個單元做討論：</p>
<ol>
<li><code>list</code> 串列，用於儲存一系列序列資料（可以儲存不同資料型別），類似於其他程式語言的陣列但更為強大</li>
<li><code>tuple</code> 元組，類似於 list 串列，但不同的是 tuple 給定元素後不能改變</li>
<li><code>dict</code> 字典，和串列很像但不在乎元素順序，而且不會使用 0,1,…等的序列 index 來選擇項目，反之我們必須宣告唯一的 key 鍵值來對應想儲存的 value 值</li>
<li><code>set</code> 集合，集合就像是被移除 value 值的字典，只有保留 key 鍵值，也就是說 set 的內容元素都必須是獨一無二的</li>
</ol>
<h1 id="物件又分可變和不可變物件"><a href="#物件又分可變和不可變物件" class="headerlink" title="物件又分可變和不可變物件"></a>物件又分可變和不可變物件</h1><ol>
<li><p>不可變物件（int, string, float, tuple），亦即若資料改變，會複製一份資料到新的記憶體空間然後資料更新，下面是一個簡單範例：</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">i = 101 # 宣告一個變數將 i 便條紙貼到 101 物件</span><br><span class="line">j = 101 # 宣告一個變數將 j 便條紙貼到 101 物件</span><br><span class="line">print(id(101)) # 印出 101 物件 id，可以想成是記憶體位置        </span><br><span class="line">print(&#x27;i id:&#x27; + str(id(i))) # 印出 i 指向的 id，和 101 物件值相同</span><br><span class="line">print(&#x27;j id:&#x27; + str(id(j))) # 印出 j 指向的 id，和 101 物件值相同</span><br><span class="line">print(i is j) # 因為兩者會貼到同一個物件所以會顯示相等，True</span><br><span class="line">j = j + 1 # 若資料改變，會複製一份資料到新的記憶體空間然後資料更新</span><br><span class="line">print(&#x27;new i id:&#x27; + str(id(i))) # 印出一樣的 id</span><br><span class="line">print(&#x27;new j id:&#x27; + str(id(j))) # 印出新的 id</span><br><span class="line">print(i is j) # 兩者指到不同的記憶體位置，False</span><br></pre></td></tr></table></figure>

<p> 執行結果：</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">140181136769920</span><br><span class="line">i id:140181136769920</span><br><span class="line">j id:140181136769920</span><br><span class="line">True</span><br><span class="line">new i id:140181136769920</span><br><span class="line">new j id:140181136769952</span><br><span class="line">False</span><br></pre></td></tr></table></figure>
</li>
<li><p>可變物件（list, dict, set），亦即若資料改變則直接在指向的記憶體空間改變資料，下面是一個簡單範例：</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a = &#123;&#125; # 宣告一個變數指到一個空字典 dict</span><br><span class="line">b = a # 將 b 變數指到 a 同樣記憶體位置</span><br><span class="line">print(id(a)) # 印出 a 的 id </span><br><span class="line">print(a is b) # 兩者指到相同的記憶體位置，True</span><br><span class="line">a[&#x27;a&#x27;] = &#x27;python&#x27; # 改變 a 的鍵值</span><br><span class="line">print(&#x27;id a:&#x27; + str(id(a))) # 印出 a id </span><br><span class="line">print(&#x27;a:&#x27; + str(a)) # 印出內容值</span><br><span class="line">print(&#x27;id b:&#x27; + str(id(b))) # 印出 b id，dict 為可變物件，印出 id 會和 a 一樣</span><br><span class="line">print(&#x27;b:&#x27; + str(b)) # dict 為可變物件，印出內容值會和 a 一樣</span><br><span class="line">print(a is b) # 兩者指到相同的記憶體位置，True</span><br></pre></td></tr></table></figure>

<p> 執行結果：</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">140181112792336</span><br><span class="line">id a:140181112792336</span><br><span class="line">a:&#123;&#x27;a&#x27;: &#x27;python&#x27;&#125;</span><br><span class="line">True</span><br><span class="line">id b:140181112792336</span><br><span class="line">b:&#123;&#x27;a&#x27;: &#x27;python&#x27;&#125;</span><br><span class="line">True</span><br></pre></td></tr></table></figure></li>
</ol>
<p>另外，Python 支援強制轉換資料型別：<br>可以透過 int()、float()、str() 進行資料型別轉換</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int(1.2)</span><br><span class="line">float(&#x27;1.3&#x27;)</span><br><span class="line">str(&#x27;1&#x27;)</span><br></pre></td></tr></table></figure>

<h1 id="字串操作好好玩"><a href="#字串操作好好玩" class="headerlink" title="字串操作好好玩"></a>字串操作好好玩</h1><p>在程式設計的世界中，操作字串基本上是家常便飯，接著我們來談談在 Python 中如何進行字串的操作：</p>
<p>在 Python 中若要宣告字串，可以使用單引號或雙引號，會有兩種方式是因為讓開發者可以產生有 <code>&#39;</code> 或 <code>&quot;</code> 內容的字串。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">my_str = &#x27;This is a &quot;good&quot; language!&#x27;</span><br></pre></td></tr></table></figure>

<p>但要特別留意的是在 Python3 和 Python2 對於字串的支援不盡相同，在 Python 中支援 Unicode 標準。與其他程式語言不同的是 Python 字元是不可變的，不能直接改變字串，但可以將一部分字串複製到其他字串。</p>
<p>以下是常見字串操作方式：</p>
<ol>
<li><p>宣告字串</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">language = &#x27;python&#x27;</span><br></pre></td></tr></table></figure>
</li>
<li><p>串連字串 +</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">language = &#x27;python&#x27;</span><br><span class="line">word = &#x27;I love&#x27;</span><br><span class="line">word + language </span><br></pre></td></tr></table></figure>
</li>
<li><p>複製字串 *</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">language = &#x27;python&#x27;</span><br><span class="line">language * 3</span><br></pre></td></tr></table></figure>
</li>
<li><p>選取字串 [開始:結束:間隔]</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">language = &#x27;python&#x27;</span><br><span class="line">language[0:1] # p</span><br><span class="line">language[0:-1] # pytho</span><br><span class="line">language[0:4:2] # ph</span><br></pre></td></tr></table></figure>
</li>
<li><p>len、split、join、replace 字串操作</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">language = &#x27;python&#x27;</span><br><span class="line">print(len(language)) # 印出字串長度 6</span><br><span class="line">print(language.split(3)) # 切割字串長度</span><br><span class="line">print(language.join(3)) # 切割字串長度</span><br><span class="line">print(language.replace(3)) # 切割字串長度</span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h1><p>以上我們介紹了在 Python 世界中物件是基本元素，也介紹了變數以及字串的操作，接下來我們將透過 Python 介紹程式設計的內涵和不同的應用情境以及<code>複雜</code>資料型別的使用。</p>
<p>（image via <a href="https://i.amz.mshcdn.com/rRxXhoIhNucutinAio8YRF4TvzE=/1200x630/2017%2F06%2F15%2F71%2Fc1a206081efd44d1b61f5c0f86dcda6c.c222e.jpg">mshcdn</a>）</p>
<h1 id="延伸閱讀"><a href="#延伸閱讀" class="headerlink" title="延伸閱讀"></a>延伸閱讀</h1><ol>
<li><a href="https://www.python.org/">Python 官網</a></li>
<li><a href="https://pics.ee/1HC~">JavaScript 程式設計新手村</a></li>
<li><a href="http://pics.ee/c34g">Python Web 程式設計入門實戰</a></li>
<li><a href="https://cofounderinc.com/2015/03/15/lerning-how-to-write-code/">非本科生，我想半路出家學寫程式，該如何開始？</a></li>
<li><a href="http://happycoder.org/2017/01/27/learning-coding-programming-tutorial-and-resource/">自學程式設計學習資源懶人包</a></li>
<li><a href="http://www.jianshu.com/p/c5582e23b26c">python可变和不可变对象</a></li>
</ol>
]]></content>
      <tags>
        <tag>Python, Django, MVC, Web, MTV, Web Backend, Web Framework, 教學, Flask, 框架, coding, code, 程式設計, 自學程式設計, CS, Computer, Computer Science</tag>
      </tags>
  </entry>
  <entry>
    <title>用 Python 自學資料科學與機器學習入門實戰：Matplotlib 基礎入門</title>
    <url>/2017/10/13/python-data-science-and-machine-learning-matplotlib-tutorial/</url>
    <content><![CDATA[<p><img src="/images/data-science101/matplotlib/logo.svg" alt=" 從零開始學資料科學：Numpy 基礎入門"></p>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本系列文章將透過系統介紹資料科學（Data Science）相關的知識，透過 Python 帶領讀者從零開始進入資料科學的世界。這邊我們將介紹 Matplotlib 這個 Python 資料視覺化的核心工具。</p>
<h1 id="什麼是-Matplotlib？"><a href="#什麼是-Matplotlib？" class="headerlink" title="什麼是 Matplotlib？"></a>什麼是 Matplotlib？</h1><p>Python 的視覺化套件有靜態的 <a href="https://matplotlib.org/">Matplotlib</a>、<a href="https://seaborn.pydata.org/">Seaborn</a> 和 <a href="http://ggplot.yhathq.com/">ggplot</a>（借鏡於 <a href="https://www.r-project.org/">R</a> 的 <a href="http://ggplot2.org/">ggplot2</a>）套件以及動態的 <a href="https://bokeh.pydata.org/en/latest/">Bokeh</a> 套件（類似於 D3.js）。其中 Matplotlib 是 Python 的一個重要模組（Python 是一個高階語言也是一種膠水語言，可以透過整合其他低階語言同時擁有效能和高效率的開發），主要用於資料視覺化上。一般來說使用 Matplotlib 有兩種主要方式：直接和 Matplotlib 的全域 pyplot 模組互動操作，第二種則是物件導向形式的操作方式。若是只有一張圖的話使用全域 pyplot 很方便，若是有多張圖的話用物件導向操作。一般來說 Matplotlib 預設值並不理想，但它的優點在於很容易在上面外包一層提供更好的預設值或是自己修改預設值。</p>
<h1 id="第一張-Matplotlib-圖片"><a href="#第一張-Matplotlib-圖片" class="headerlink" title="第一張 Matplotlib 圖片"></a>第一張 Matplotlib 圖片</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 引入模組</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = pd.period_range(pd.datetime.now(), periods=<span class="number">200</span>, freq=<span class="string">&#x27;d&#x27;</span>)</span><br><span class="line">x = x.to_timestamp().to_pydatetime()</span><br><span class="line"><span class="comment"># 產生三組，每組 200 個隨機常態分布元素</span></span><br><span class="line">y = np.random.randn(<span class="number">200</span>, <span class="number">3</span>).cumsum(<span class="number">0</span>)</span><br><span class="line">plt.plot(x, y)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<p><img src="/images/data-science101/matplotlib/output_1_0.png" alt=" 從零開始學資料科學：Matplotlib 基礎入門"></p>
<h1 id="常用屬性和參數調整"><a href="#常用屬性和參數調整" class="headerlink" title="常用屬性和參數調整"></a>常用屬性和參數調整</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Matplotlib 使用點 point 而非 pixel 為圖的尺寸測量單位，適合用於印刷出版。1 point = 1 / 72 英吋，但可以調整</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> matplotlib <span class="keyword">as</span> mpl</span><br><span class="line">mpl.rcParams[<span class="string">&#x27;lines.linewidth&#x27;</span>] = <span class="number">5</span></span><br><span class="line">mpl.rcParams[<span class="string">&#x27;lines.color&#x27;</span>] = <span class="string">&#x27;r&#x27;</span></span><br><span class="line">mpl.rcParams[<span class="string">&#x27;figure.figsize&#x27;</span>] = (<span class="number">10</span>, <span class="number">10</span>)</span><br><span class="line">plt.gcf().set_size_inches(<span class="number">10</span>, <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">x = pd.period_range(pd.datetime.now(), periods=<span class="number">200</span>, freq=<span class="string">&#x27;d&#x27;</span>)</span><br><span class="line">x = x.to_timestamp().to_pydatetime()</span><br><span class="line"><span class="comment"># 產生三組，每組 200 個隨機常態分布元素</span></span><br><span class="line">y = np.random.randn(<span class="number">200</span>, <span class="number">3</span>).cumsum(<span class="number">0</span>)</span><br><span class="line">plt.plot(x, y)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<h1 id="物件導向式-Matplotlib"><a href="#物件導向式-Matplotlib" class="headerlink" title="物件導向式 Matplotlib"></a>物件導向式 Matplotlib</h1><p><img src="/images/data-science101/matplotlib/output_2_0.png" alt=" 從零開始學資料科學：Matplotlib 基礎入門"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 設定標籤</span></span><br><span class="line">plots = plt.plot(x, y)</span><br><span class="line">plt.legend(plots, (<span class="string">&#x27;Apple&#x27;</span>, <span class="string">&#x27;Facebook&#x27;</span>, <span class="string">&#x27;Google&#x27;</span>), loc=<span class="string">&#x27;best&#x27;</span>, framealpha=<span class="number">0.5</span>, prop=&#123;<span class="string">&#x27;size&#x27;</span>: <span class="string">&#x27;large&#x27;</span>, <span class="string">&#x27;family&#x27;</span>: <span class="string">&#x27;monospace&#x27;</span>&#125;)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<p><img src="/images/data-science101/matplotlib/output_3_1.png" alt=" 從零開始學資料科學：Matplotlib 基礎入門"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 標題與軸標籤</span></span><br><span class="line">plt.title(<span class="string">&#x27;Random Trends&#x27;</span>)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;Date&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;Cum. Sum&#x27;</span>)</span><br><span class="line">plt.figtext(<span class="number">0.995</span>, <span class="number">0.01</span>, <span class="string">&#x27;CopyRight&#x27;</span>, ha=<span class="string">&#x27;right&#x27;</span>, va=<span class="string">&#x27;bottom&#x27;</span>)</span><br><span class="line"><span class="comment"># 避免被圖表元素被蓋住</span></span><br><span class="line">plt.tight_layout()</span><br><span class="line">plt.plot(x, y)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>


<p><img src="/images/data-science101/matplotlib/output_4_0.png" alt=" 從零開始學資料科學：Matplotlib 基礎入門"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 儲存圖表</span></span><br><span class="line">plt.savefig(<span class="string">&#x27;plt.svg&#x27;</span>)</span><br></pre></td></tr></table></figure>


<pre><code>&lt;matplotlib.figure.Figure at 0x120e70828&gt;
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用物件導向方式控制圖表，透過控制 figure 和 axes 來操作。其中 figure 和全域 pyplot 部分屬性相同。例如： fig.text() 對應到 plt.fig_text()</span></span><br><span class="line">fig = plt.figure(figsize=(<span class="number">8</span>, <span class="number">4</span>), dpi=<span class="number">200</span>, tight_layout=<span class="literal">True</span>, linewidth=<span class="number">1</span>, edgecolor=<span class="string">&#x27;r&#x27;</span>)</span><br></pre></td></tr></table></figure>


<pre><code>&lt;matplotlib.figure.Figure at 0x120c16940&gt;
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 軸與子圖表</span></span><br><span class="line">fig = plt.figure(figsize=(<span class="number">8</span>, <span class="number">4</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 插入主要軸，可以透過 add_axes 控制軸在圖裡的位置。例如：[bottom*0.1, left*0.1, top*0.5, right*0.5]，fig.add_axes([0.1, 0.1, 0.5, 0.5])</span></span><br><span class="line">ax = fig.add_axes([<span class="number">0.1</span>, <span class="number">0.1</span>, <span class="number">0.8</span>, <span class="number">0.8</span>])</span><br><span class="line">ax.set_title(<span class="string">&#x27;Main Axes with Insert Child Axes&#x27;</span>)</span><br><span class="line">ax.plot(x, y[:, <span class="number">0</span>])</span><br><span class="line">ax.set_xlabel(<span class="string">&#x27;Date&#x27;</span>)</span><br><span class="line">ax.set_ylabel(<span class="string">&#x27;Cum. sum&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 插入軸</span></span><br><span class="line">ax = fig.add_axes([<span class="number">0.15</span>, <span class="number">0.15</span>, <span class="number">0.3</span>, <span class="number">0.3</span>])</span><br><span class="line">ax.plot(x, y[:, <span class="number">1</span>], color=<span class="string">&#x27;g&#x27;</span>)</span><br><span class="line">ax.set_xticks([])</span><br></pre></td></tr></table></figure>


<p><img src="/images/data-science101/matplotlib/output_7_1.png" alt=" 從零開始學資料科學：Matplotlib 基礎入門"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 單一圖與軸繪製（subplots 不帶參數回傳擁有一軸 figure 物件，幾乎等同於 matplotlib 全域物件）</span></span><br><span class="line"><span class="comment"># matplotlib 內建版面編排系統相對好用。圖表大小不一可以使用 gridspec 模組</span></span><br><span class="line">figure, ax = plt.subplots()</span><br><span class="line">plots = ax.plot(x, y, label=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">figure.set_size_inches(<span class="number">8</span>, <span class="number">4</span>)</span><br><span class="line">ax.legend(plots, (<span class="string">&#x27;Apple&#x27;</span>, <span class="string">&#x27;Faceook&#x27;</span>, <span class="string">&#x27;Google&#x27;</span>), loc=<span class="string">&#x27;best&#x27;</span>, framealpha=<span class="number">0.25</span>, prop=&#123;<span class="string">&#x27;size&#x27;</span>: <span class="string">&#x27;small&#x27;</span>, <span class="string">&#x27;family&#x27;</span>: <span class="string">&#x27;monospace&#x27;</span>&#125;)</span><br><span class="line"></span><br><span class="line">ax.set_title(<span class="string">&#x27;Random trends&#x27;</span>)</span><br><span class="line">ax.set_xlabel(<span class="string">&#x27;Date&#x27;</span>)</span><br><span class="line">ax.set_ylabel(<span class="string">&#x27;Cum. sum&#x27;</span>)</span><br><span class="line"></span><br><span class="line">ax.grid(<span class="literal">True</span>) <span class="comment"># 使用格子</span></span><br><span class="line">figure.text(<span class="number">0.995</span>, <span class="number">0.01</span>, <span class="string">&#x27;ACM 2015&#x27;</span>, ha=<span class="string">&#x27;right&#x27;</span>, va=<span class="string">&#x27;bottom&#x27;</span>)</span><br><span class="line">figure.tight_layout()</span><br></pre></td></tr></table></figure>


<p><img src="/images/data-science101/matplotlib/output_8_0.png" alt=" 從零開始學資料科學：Matplotlib 基礎入門"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用子圖表</span></span><br><span class="line">figure, ax = plt.subplots()</span><br><span class="line">plots = ax.plot(x, y, label=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">figure.set_size_inches(<span class="number">8</span>, <span class="number">4</span>)</span><br><span class="line">ax.legend(plots, (<span class="string">&#x27;Apple&#x27;</span>, <span class="string">&#x27;Faceook&#x27;</span>, <span class="string">&#x27;Google&#x27;</span>), loc=<span class="string">&#x27;best&#x27;</span>, framealpha=<span class="number">0.25</span>, prop=&#123;<span class="string">&#x27;size&#x27;</span>: <span class="string">&#x27;small&#x27;</span>, <span class="string">&#x27;family&#x27;</span>: <span class="string">&#x27;monospace&#x27;</span>&#125;)</span><br><span class="line">ax.set_title(<span class="string">&#x27;Random trends&#x27;</span>)</span><br><span class="line">ax.set_xlabel(<span class="string">&#x27;Date&#x27;</span>)</span><br><span class="line">ax.set_ylabel(<span class="string">&#x27;Cum. sum&#x27;</span>)</span><br><span class="line">ax.grid(<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">figure.text(<span class="number">0.995</span>, <span class="number">0.01</span>, <span class="string">&#x27;Acm&#x27;</span>, ha=<span class="string">&#x27;right&#x27;</span>, va=<span class="string">&#x27;bottom&#x27;</span>)</span><br><span class="line">figure.tight_layout()</span><br></pre></td></tr></table></figure>


<p><img src="/images/data-science101/matplotlib/output_9_0.png" alt=" 從零開始學資料科學：Matplotlib 基礎入門"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用子圖表產生多個圖表</span></span><br><span class="line">fig, axes = plt.subplots(nrows=<span class="number">3</span>, ncols=<span class="number">1</span>, sharex=<span class="literal">True</span>, sharey=<span class="literal">True</span>, figsize=(<span class="number">8</span>, <span class="number">8</span>))</span><br><span class="line">labelled_data = <span class="built_in">zip</span>(y.transpose(), (<span class="string">&#x27;Apple&#x27;</span>, <span class="string">&#x27;Faceook&#x27;</span>, <span class="string">&#x27;Google&#x27;</span>), (<span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;r&#x27;</span>))</span><br><span class="line">fig.suptitle(<span class="string">&#x27;Three Random Trends&#x27;</span>, fontsize=<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i, ld <span class="keyword">in</span> <span class="built_in">enumerate</span>(labelled_data):</span><br><span class="line">    ax = axes[i]</span><br><span class="line">    ax.plot(x, ld[<span class="number">0</span>], label=ld[<span class="number">1</span>], color=ld[<span class="number">2</span>])</span><br><span class="line">    ax.set_ylabel(<span class="string">&#x27;Cum. sum&#x27;</span>)</span><br><span class="line">    ax.legend(loc=<span class="string">&#x27;upper left&#x27;</span>, framealpha=<span class="number">0.5</span>, prop=&#123;<span class="string">&#x27;size&#x27;</span>: <span class="string">&#x27;small&#x27;</span>&#125;)</span><br><span class="line">axes[-<span class="number">1</span>].set_xlabel(<span class="string">&#x27;Date&#x27;</span>)</span><br></pre></td></tr></table></figure>




<pre><code>&lt;matplotlib.text.Text at 0x11eb71278&gt;
</code></pre>
<p><img src="/images/data-science101/matplotlib/output_10_1.png" alt=" 從零開始學資料科學：Matplotlib 基礎入門"></p>
<h1 id="常見圖表"><a href="#常見圖表" class="headerlink" title="常見圖表"></a>常見圖表</h1><ol>
<li><p>直方圖（Histogram）</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 直方圖</span></span><br><span class="line">normal_samples = np.random.normal(size=<span class="number">100</span>) <span class="comment"># 生成 100 組標準常態分配（平均值為 0，標準差為 1 的常態分配）隨機變數</span></span><br><span class="line">plt.hist(normal_samples, width=<span class="number">0.1</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<p> <img src="/images/data-science101/matplotlib/output_11_0.png" alt=" 從零開始學資料科學：Matplotlib 基礎入門"></p>
</li>
<li><p>散佈圖（Scatter plot）</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 散佈圖</span></span><br><span class="line">num_points = <span class="number">100</span></span><br><span class="line">gradient = <span class="number">0.5</span></span><br><span class="line">x = np.array(<span class="built_in">range</span>(num_points))</span><br><span class="line">y = np.random.randn(num_points) * <span class="number">10</span> + x * gradient</span><br><span class="line">fig, ax = plt.subplots(figsize=(<span class="number">8</span>, <span class="number">4</span>))</span><br><span class="line">ax.scatter(x, y)</span><br><span class="line"></span><br><span class="line">fig.suptitle(<span class="string">&#x27;A Simple Scatter Plot&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>


<p> <img src="/images/data-science101/matplotlib/output_11_1.png" alt=" 從零開始學資料科學：Matplotlib 基礎入門"></p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 散佈圖 + 迴歸</span></span><br><span class="line">num_points = <span class="number">100</span></span><br><span class="line">gradient = <span class="number">0.5</span></span><br><span class="line">x = np.array(<span class="built_in">range</span>(num_points))</span><br><span class="line">y = np.random.randn(num_points) * <span class="number">10</span> + x * gradient</span><br><span class="line"></span><br><span class="line">fig, ax = plt.subplots(figsize=(<span class="number">8</span>, <span class="number">4</span>))</span><br><span class="line"></span><br><span class="line">ax.scatter(x, y)</span><br><span class="line"></span><br><span class="line">m, c = np.polyfit(x, y, <span class="number">1</span>) <span class="comment"># 使用 Numpy 的 polyfit，參數 1 代表一維，算出 fit 直線斜率</span></span><br><span class="line">ax.plot(x, m * x + c) <span class="comment"># 使用 y = m * x + c 斜率和常數匯出直線</span></span><br><span class="line">fig.suptitle(<span class="string">&#x27;Scatter with regression&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
</li>
<li><p>線圖（Line plot）</p>
<p> <img src="/images/data-science101/matplotlib/output_11_2.png" alt=" 從零開始學資料科學：Matplotlib 基礎入門"></p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 線圖</span></span><br><span class="line">age = [<span class="number">4</span>, <span class="number">4</span>, <span class="number">17</span>, <span class="number">17</span>, <span class="number">18</span>]</span><br><span class="line">points = [<span class="number">2</span>, <span class="number">20</span>, <span class="number">22</span>, <span class="number">24</span>, <span class="number">20</span>]</span><br><span class="line"></span><br><span class="line">plt.plot(age, points)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
</li>
<li><p>長條圖（Bar plot）</p>
<p> <img src="/images/data-science101/matplotlib/output_11_3.png" alt=" 從零開始學資料科學：Matplotlib 基礎入門"></p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 長條圖</span></span><br><span class="line">labels = [<span class="string">&#x27;Physics&#x27;</span>, <span class="string">&#x27;Chemistry&#x27;</span>, <span class="string">&#x27;Literature&#x27;</span>, <span class="string">&#x27;Peace&#x27;</span>]</span><br><span class="line">foo_data = [<span class="number">3</span>, <span class="number">6</span>, <span class="number">10</span>, <span class="number">4</span>]</span><br><span class="line">bar_width = <span class="number">0.5</span></span><br><span class="line">xlocations = np.array(<span class="built_in">range</span>(<span class="built_in">len</span>(foo_data))) + bar_width</span><br><span class="line"></span><br><span class="line">plt.bar(xlocations, foo_data, width=bar_width)</span><br><span class="line"></span><br><span class="line">plt.title(<span class="string">&#x27;Stock Price&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<p> <img src="/images/data-science101/matplotlib/output_11_4.png" alt=" 從零開始學資料科學：Matplotlib 基礎入門"></p>
</li>
<li><p>盒鬚圖（Box plot）</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 盒鬚圖</span></span><br><span class="line">normal_examples = np.random.normal(size = <span class="number">100</span>) <span class="comment"># 生成 100 組標準常態分配（平均值為 0，標準差為 1 的常態分配）隨機變數</span></span><br><span class="line"></span><br><span class="line">plt.boxplot(normal_examples)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<p> <img src="/images/data-science101/matplotlib/output_11_5.png" alt=" 從零開始學資料科學：Matplotlib 基礎入門"></p>
</li>
<li><p>圓餅圖（Pie plot）</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 圓餅圖</span></span><br><span class="line">data = np.random.randint(<span class="number">1</span>, <span class="number">11</span>, <span class="number">5</span>) <span class="comment"># 生成</span></span><br><span class="line">x = np.arange(<span class="built_in">len</span>(data))</span><br><span class="line"></span><br><span class="line">plt.pie(data)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ol>
<p><img src="/images/data-science101/matplotlib/output_11_6.png" alt=" 從零開始學資料科學：Matplotlib 基礎入門"></p>
<h1 id="Python-其他資料視覺化套件"><a href="#Python-其他資料視覺化套件" class="headerlink" title="Python 其他資料視覺化套件"></a>Python 其他資料視覺化套件</h1><ol>
<li><p>Seaborn</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Seaborn</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">sns.<span class="built_in">set</span>(style=<span class="string">&quot;white&quot;</span>, context=<span class="string">&quot;talk&quot;</span>)</span><br><span class="line">rs = np.random.RandomState(<span class="number">7</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 準備 matplotlib 圖表</span></span><br><span class="line">f, (ax1, ax2, ax3) = plt.subplots(<span class="number">3</span>, <span class="number">1</span>, figsize=(<span class="number">8</span>, <span class="number">6</span>), sharex=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 產生連續資料</span></span><br><span class="line">x = np.array(<span class="built_in">list</span>(<span class="string">&quot;ABCDEFGHI&quot;</span>))</span><br><span class="line">y1 = np.arange(<span class="number">1</span>, <span class="number">10</span>)</span><br><span class="line">sns.barplot(x, y1, palette=<span class="string">&quot;BuGn_d&quot;</span>, ax=ax1)</span><br><span class="line">ax1.set_ylabel(<span class="string">&quot;Sequential&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 調整成 diverging 資料</span></span><br><span class="line">y2 = y1 - <span class="number">5</span></span><br><span class="line">sns.barplot(x, y2, palette=<span class="string">&quot;RdBu_r&quot;</span>, ax=ax2)</span><br><span class="line">ax2.set_ylabel(<span class="string">&quot;Diverging&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 隨機資料</span></span><br><span class="line">y3 = rs.choice(y1, <span class="number">9</span>, replace=<span class="literal">False</span>)</span><br><span class="line">sns.barplot(x, y3, palette=<span class="string">&quot;Set3&quot;</span>, ax=ax3)</span><br><span class="line">ax3.set_ylabel(<span class="string">&quot;Qualitative&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 秀出圖片</span></span><br><span class="line">sns.despine(bottom=<span class="literal">True</span>)</span><br><span class="line">plt.setp(f.axes, yticks=[])</span><br><span class="line">plt.tight_layout(h_pad=<span class="number">3</span>)</span><br></pre></td></tr></table></figure>

<p> <img src="/images/data-science101/matplotlib/output_12_0.png" alt=" 從零開始學資料科學：Matplotlib 基礎入門"></p>
</li>
<li><p>Bokeh</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Bokeh</span></span><br><span class="line"><span class="keyword">from</span> bokeh.plotting <span class="keyword">import</span> figure, output_file, show</span><br><span class="line"></span><br><span class="line"><span class="comment"># 準備資料</span></span><br><span class="line">x = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">y = [<span class="number">6</span>, <span class="number">7</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 輸出成靜態 HTML</span></span><br><span class="line">output_file(<span class="string">&quot;lines.html&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 創建新的標題和軸圖表</span></span><br><span class="line">p = figure(title=<span class="string">&quot;simple line example&quot;</span>, x_axis_label=<span class="string">&#x27;x&#x27;</span>, y_axis_label=<span class="string">&#x27;y&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 繪製直線圖</span></span><br><span class="line">p.line(x, y, legend=<span class="string">&quot;Temp.&quot;</span>, line_width=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 呈現結果</span></span><br><span class="line">show(p)</span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h1><p>以上介紹了 Matplotlib 的基礎知識和 api，同時也介紹了 Python 其他資料視覺化套件。一般來說 Matplotlib 預設值並不理想，但它的優點在於很容易在上面外包一層提供更好的預設值或是自己修改預設值。一般來說我們在進行資料科學和機器學習分析的過程中我們會先使用資訊視覺化工具來了解整個資料集的特色並針對資料進行後續的處理和特徵選取，所以說資料視覺化不僅能呈現資料分析的結果，對於資料分析的過程也十分重要。</p>
<h1 id="延伸閱讀"><a href="#延伸閱讀" class="headerlink" title="延伸閱讀"></a>延伸閱讀</h1><ol>
<li><a href="http://changtw-blog.logdown.com/posts/895468-python-numpy-axis-concept-organize-notes">[python] numpy axis概念整理筆記</a></li>
<li><a href="https://ithelp.ithome.com.tw/articles/10186484">[第 18 天] 資料視覺化 matplotlib</a></li>
<li><a href="http://www.cnblogs.com/kylinlin/p/5236601.html">数据可视化（三）- Seaborn简易入门</a></li>
</ol>
<p>（image via <a href="https://matplotlib.org/_static/logo2.svg">matplotlib</a></p>
]]></content>
      <tags>
        <tag>Python</tag>
        <tag>Machine Learning</tag>
        <tag>機器學習</tag>
        <tag>AI</tag>
        <tag>Artificial Intelligence</tag>
        <tag>NLP</tag>
        <tag>Data Mining</tag>
        <tag>人工智慧</tag>
        <tag>監督式學習</tag>
        <tag>Supervised learning</tag>
        <tag>從零開始學資料科學</tag>
        <tag>Numpy</tag>
        <tag>資料科學</tag>
        <tag>data science</tag>
        <tag>data scientist</tag>
        <tag>pandas</tag>
        <tag>scikit-learn</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 自動化程式設計：如何使用 Python 程式操作 Excel 試算表</title>
    <url>/2018/09/27/python-automation-programming-how-to-use-python-manipulate-excel-spreadsheet/</url>
    <content><![CDATA[<p><img src="/images/python-automation-programming/excel-intro/excel-cover.png" alt="Python 自動化程式設計：如何使用 Python 程式操作 Excel 試算表"></p>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Excel 幾乎是所有職場工作者最常使用的 Office 軟體工具，小至同事間訂便當、飲料，大到進出貨訂單管理，應收應付賬款的財務報表等都有它的身影。在一般工作上，你可能常常需要在不同表單中複製貼上許多的欄位，或是從幾百個列表中挑選幾列依照某些條件來更新試算表內容等。事實上，這些工作很花時間，但實際上卻沒什麼技術含量。你是否曾想過但使用程式語言來加快你的工作效率，減輕瑣碎的重複性無聊工作但又不知道如何開始？</p>
<p>別擔心，這邊我們就要使用 Python 和 <code>Openyxl</code> 這個模組，讓讀者可以輕鬆使用 Python 來處理 Excel 試算表，解決工作上的繁瑣單調工作！</p>
<p><img src="/images/python-automation-programming/excel-intro/excel-intro.png" alt="Python 自動化程式設計：如何使用 Python 程式操作 Excel 試算表"></p>
<h1 id="Excel-試算表名詞介紹"><a href="#Excel-試算表名詞介紹" class="headerlink" title="Excel 試算表名詞介紹"></a>Excel 試算表名詞介紹</h1><p>在正式開始使用 Python 程式來操作 Excel 試算表前我們先來了解 Excel 常見名詞。首先來談一下基本定義，一般而言 Excel 試算表文件稱作活頁簿（workbook），而活頁簿我們會存在 <code>.xlsx</code> 的副檔名檔案中（若是比較舊版的 Excel 有可能會有其他 <code>.xls</code> 等檔名）。在每個活頁簿可以有多個工作表（worksheet），一般就是我們工作填寫資料的區域，多個資料表使用 tab 來進行區隔，正在使用的資料表（active worksheet）稱為使用中工作表。每個工作表中直的是欄（column）從和橫的是列（row）。在指定的欄和列的區域是儲存格（cell），也就是我們輸入資料的地方。一格格儲存格的網格和內含的資料就組成一份工作表。</p>
<h1 id="環境設定"><a href="#環境設定" class="headerlink" title="環境設定"></a>環境設定</h1><p>在開始撰寫程式之前，我們先準備好開發環境（根據你的作業系統安裝 <a href="https://www.anaconda.com/download/">Anaconda Python3</a>、<a href="https://virtualenv.pypa.io/en/stable/installation/">virtualenv 模組</a>、<a href="https://openpyxl.readthedocs.io/en/stable/">openyxl 模組</a>），關於開發環境設定可以參考：<a href="https://happycoder.org/2017/05/01/python-web-flask101-tutorial-introduction-and-environment-setup/">Python Web Flask 實戰開發教學 - 簡介與環境建置</a>，Windows 讀者開發環境可以參考 <a href="https://happycoder.org/2017/11/17/how-to-setup-python-development-environment-in-windows/">如何在 Windows 打造 Python 開發環境設定基礎入門教學</a>。</p>
<p><img src="/images/python-automation-programming/excel-intro/demo1.png" alt="Python 自動化程式設計：如何使用 Python 程式操作 Excel 試算表"></p>
<p>這邊我們使用 MacOS 環境搭配 <code>jupyter notebook</code> 做範例教學：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 創建並移動到資料夾</span><br><span class="line">$ mkdir pyexcel-example</span><br><span class="line">$ cd pyexcel-example</span><br><span class="line">$ jupyter notebook</span><br></pre></td></tr></table></figure>

<p>開啟 jupyter notebook 後新增一個 Python3 Notebook</p>
<p><img src="/images/python-automation-programming/excel-intro/demo2.png" alt="Python 自動化程式設計：如何使用 Python 程式操作 Excel 試算表"></p>
<p>首先先安裝 <code>openyxl</code> 套件（在 jupyter 使用 <code>$ !pip install &lt;your-package&gt;</code> 安裝套件）：</p>
<p>使用 <code>shift + enter</code> 可以執行指令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">!pip install openpyxl</span><br></pre></td></tr></table></figure>

<p>記得要先安裝 <code>openpyxl</code> 模組，若是沒安裝模組則會出現 <code>ModuleNotFoundError: No module named &#39;openpyxl&#39;</code> 錯誤訊息。</p>
<p><img src="/images/python-automation-programming/excel-intro/demo3.png" alt="Python 自動化程式設計：如何使用 Python 程式操作 Excel 試算表"></p>
<h1 id="讀取-Excel-檔案"><a href="#讀取-Excel-檔案" class="headerlink" title="讀取 Excel 檔案"></a>讀取 Excel 檔案</h1><ol>
<li><p>使用 Openpyxl 開啟 Excel 檔案（可以從這邊<a href="http://go.microsoft.com/fwlink/?LinkID=521962">下載範例 Excel 資料檔案</a>），下載後檔名改為 <code>sample.xlsx</code>，並放到和 jupyter Notebook 同樣位置的資料夾下：</p>
 <figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> openpyxl <span class="keyword">import</span> load_workbook</span><br><span class="line"></span><br><span class="line">wb = load_workbook(<span class="string">&#x27;sample.xlsx&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(wb.sheetnames)</span><br></pre></td></tr></table></figure>

<p> 執行後可以讀取活頁簿物件（類似讀取檔案）並印出這個範例檔案的工作表名稱：</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[&#x27;Sheet1&#x27;]</span><br></pre></td></tr></table></figure>
</li>
<li><p>從工作表中取得儲存格（取得 A1 儲存格資料）</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ws[&#x27;A1&#x27;].value</span><br></pre></td></tr></table></figure>
</li>
<li><p>從工作表中取得欄和列</p>
<p> 列出每一欄的值</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">for row in ws.rows:</span><br><span class="line">    for cell in row:</span><br><span class="line">        print(cell.value)</span><br></pre></td></tr></table></figure>

<p> 列出每一列的值</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">for column in ws.columns:</span><br><span class="line">    for cell in column:</span><br><span class="line">        print(cell.value)</span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="寫入-Excel-檔案"><a href="#寫入-Excel-檔案" class="headerlink" title="寫入 Excel 檔案"></a>寫入 Excel 檔案</h1><p><img src="/images/python-automation-programming/excel-intro/demo4.png" alt="Python 自動化程式設計：如何使用 Python 程式操作 Excel 試算表"></p>
<ol>
<li><p>創建並儲存 Excel 檔案</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from openpyxl import Workbook</span><br><span class="line"></span><br><span class="line"># 創建一個空白活頁簿物件</span><br><span class="line">wb = Workbook()</span><br></pre></td></tr></table></figure>
</li>
<li><p>建立工作表</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 選取正在工作中的表單</span><br><span class="line">ws = wb.active</span><br></pre></td></tr></table></figure>
</li>
<li><p>將值寫入儲存格內</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 指定值給 A1 儲存格</span><br><span class="line">ws[&#x27;A1&#x27;] = &#x27;我是儲存格&#x27;</span><br><span class="line"></span><br><span class="line"># 向下新增一列並連續插入值</span><br><span class="line">ws.append([1, 2, 3])</span><br><span class="line">ws.append([3, 2, 1])</span><br></pre></td></tr></table></figure>
</li>
<li><p>儲存檔案</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 儲存成 create_sample.xlsx 檔案</span><br><span class="line">wb.save(&#x27;create_sample.xlsx&#x27;)</span><br></pre></td></tr></table></figure></li>
</ol>
<p><img src="/images/python-automation-programming/excel-intro/demo5.png" alt="Python 自動化程式設計：如何使用 Python 程式操作 Excel 試算表"></p>
<h1 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h1><p>以上簡單介紹如何使用 Python 程式操作 Excel 試算表，透過 Python 可以讀取和寫入 Excel 檔案，相信只要能活用就能夠減少一般例行性的繁瑣工作。若需要更多 <code>openpyxl</code> 操作方式可以參考<a href="https://openpyxl.readthedocs.io/en/stable/index.html#">官方文件教學</a>，我們下回見囉！</p>
<h1 id="參考文件"><a href="#參考文件" class="headerlink" title="參考文件"></a>參考文件</h1><ol>
<li><a href="https://openpyxl.readthedocs.io/en/stable/index.html#module-openpyxl">openpyxl - A Python library to read&#x2F;write Excel 2010 xlsx&#x2F;xlsm files</a></li>
</ol>
<p>（image via <a href="https://www.google.com.tw/url?sa=i&rct=j&q=&esrc=s&source=images&cd=&cad=rja&uact=8&ved=2ahUKEwjNwbGM4OHdAhXGvrwKHQ7DBKsQjxx6BAgBEAI&url=https://products.office.com/zh-hk/excel&psig=AOvVaw3QGOaPdJF8pWlME7Vtbe1r&ust=1538363320894206">matplotlib</a></p>
]]></content>
      <tags>
        <tag>自學程式</tag>
        <tag>程式設計</tag>
        <tag>學程式</tag>
        <tag>程式教學</tag>
        <tag>程式</tag>
        <tag>Python</tag>
        <tag>教學</tag>
        <tag>excel</tag>
        <tag>試算表</tag>
        <tag>how-to</tag>
        <tag>tutorial</tag>
        <tag>spreadsheet</tag>
      </tags>
  </entry>
  <entry>
    <title>用 Python 自學資料科學與機器學習入門實戰：Numpy 基礎入門</title>
    <url>/2017/10/10/python-data-science-and-machine-learning-numpy-tutorial/</url>
    <content><![CDATA[<p><img src="/images/data-science101/numpy.jpg" alt=" 從零開始學資料科學：Numpy 基礎入門"></p>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本系列文章將透過系統介紹資料科學（Data Science）相關的知識，透過 Python 帶領讀者從零開始進入資料科學的世界。這邊我們將介紹 Numpy 這個強大的 Python 函式庫。</p>
<h1 id="什麼是-Numpy？"><a href="#什麼是-Numpy？" class="headerlink" title="什麼是 Numpy？"></a>什麼是 Numpy？</h1><p>Numpy 是 Python 的一個重要模組（Python 是一個高階語言也是一種膠水語言，可以透過整合其他低階語言同時擁有效能和高效率的開發），主要用於資料處理上。Numpy 底層以 C 和 Fortran 語言實作，所以能快速操作多重維度的陣列。當 Python 處理龐大資料時，其原生 list 效能表現並不理想（但可以動態存異質資料），而 Numpy 具備平行處理的能力，可以將操作動作一次套用在大型陣列上。此外 Python 其餘重量級的資料科學相關套件（例如：Pandas、SciPy、Scikit-learn 等）都幾乎是奠基在 Numpy 的基礎上。因此學會 Numpy 對於往後學習其他資料科學相關套件打好堅實的基礎。</p>
<h1 id="Numpy-基礎操作"><a href="#Numpy-基礎操作" class="headerlink" title="Numpy 基礎操作"></a>Numpy 基礎操作</h1><p><img src="/images/data-science101/arrays.png" alt=" 從零開始學資料科學：Numpy 基礎入門"></p>
<ol>
<li><p>Numpy 陣列<br> Numpy 的重點在於陣列的操作，其所有功能特色都建築在同質且多重維度的 <code>ndarray</code>（N-dimensional array）上。<code>ndarray</code> 的關鍵屬性是維度（ndim）、形狀（shape）和數值類型（dtype）。 一般我們稱一維陣列為 <code>vector</code> 而二維陣列為 <code>matrix</code>。一開始我們會引入 <code>numpy</code> 模組，透過傳入 <code>list</code> 到 <code>numpy.array()</code> 創建陣列。</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 引入 numpy 模組</span><br><span class="line">import numpy as np</span><br><span class="line">np1 = np.array([1, 2, 3])</span><br><span class="line">np2 = np.array([3, 4, 5])</span><br><span class="line"></span><br><span class="line"># 陣列相加</span><br><span class="line">print(np1 + np2) # [4 6 8]</span><br><span class="line"></span><br><span class="line"># 顯示相關資訊</span><br><span class="line">print(np1.ndim, np1.shape, np1.dtype) # 1 (3,) int64 =&gt; 一維陣列, 三個元素, 資料型別</span><br><span class="line"></span><br><span class="line">np3 = np.array([1, 2, 3, 4, 5, 6])</span><br></pre></td></tr></table></figure>

<p> 從檔案取資料：</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npd = np.genfromtxt(&#x27;data.csv&#x27;, delimiter=&#x27;,&#x27;)</span><br></pre></td></tr></table></figure>

<p> 改變陣列維度：</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">np3 = np3.reshape([2, 3])</span><br><span class="line">print(np3.ndim, np3.shape, np3.dtype) # 2 (2, 3) int64</span><br></pre></td></tr></table></figure>

<p> 改變陣列型別（bool、int、float、string）：</p>
<p> <code>bool</code> 可以包含 True、False，<code>int</code> 可以包含 int16、int32、int64。其中數字是指 <code>bits</code>。<code>float</code> 可以包含 16、32、64 表示小數點後幾位。<code>string</code> 可以是 string、unicode。<code>nan</code> 則表示遺失值。</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">np3 = np3.astype(&#x27;int64&#x27;)</span><br><span class="line">np3.dtype</span><br><span class="line"># dtype(&#x27;int64&#x27;)</span><br></pre></td></tr></table></figure>
</li>
<li><p>建立陣列<br> 建立填滿 0 或 1 的陣列：</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">np1 = np.zeros([2, 3]) # array([[ 0.,  0.,  0.], [ 0.,  0.,  0.]])</span><br><span class="line">np2 = np.ones([2, 3]) # array([[ 1.,  1.,  1.], [ 1.,  1.,  1.]])</span><br></pre></td></tr></table></figure></li>
</ol>
<p><img src="/images/data-science101/numpy_indexing.png" alt=" 從零開始學資料科學：Numpy 基礎入門"></p>
<ol start="3">
<li><p>陣列索引與切片<br> 一維陣列操作和 Python 原生 list 類似：</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">np3 = np.array([1, 2, 3, 4, 5, 6])</span><br><span class="line">print(np3[2]) # 3    </span><br></pre></td></tr></table></figure>

<p> 二維陣列：</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">np3 = np3.reshape([2, 3])</span><br><span class="line"></span><br><span class="line">print(np3[1, 0]) # 4</span><br></pre></td></tr></table></figure></li>
</ol>
<p><img src="/images/data-science101/axis.png" alt=" 從零開始學資料科學：Numpy 基礎入門"></p>
<ol start="4">
<li><p>基本操作<br> 使用布林遮罩來取值：</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">np3 = np.array([1, 2, 3, 4, 5, 6])</span><br><span class="line">print(np3 &gt; 3) # [False False False  True  True  True]</span><br><span class="line">print(np3[np3 &gt; 3]) # [4 5 6]</span><br></pre></td></tr></table></figure>

<p> 加總：</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">np3 = np3.reshape([2, 3])</span><br><span class="line">print(np3.sum(axis=1)) # 將 axis=1 橫向加總 [6 15]</span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h1><p>以上介紹了 Numpy 的基礎知識，建立了基本的 array 和 ndarray 的觀念。相信在熟悉 Numpy 之後 Pandas 的學習將會比較容易 （Pandas 的資料容器 DataFrame、Series 事實上是奠基在 Numpy 的陣列上）</p>
<h1 id="延伸閱讀"><a href="#延伸閱讀" class="headerlink" title="延伸閱讀"></a>延伸閱讀</h1><ol>
<li><a href="http://www.kdnuggets.com/2015/11/seven-steps-machine-learning-python.html">7 Steps to Mastering Machine Learning With Python</a></li>
<li><a href="http://changtw-blog.logdown.com/posts/895468-python-numpy-axis-concept-organize-notes">[python] numpy axis概念整理筆記</a></li>
<li><a href="https://wklchris.github.io/Py3-numpy.html">Python科学计算：numpy</a></li>
</ol>
<p>（image via <a href="https://bids.berkeley.edu/sites/default/files/styles/400x225/public/projects/numpy_project_page.jpg?itok=flrdydei">berkeley</a>、<a href="http://www.codingeek.com/wp-content/uploads/2017/01/2D-arrays.png">codingeek</a>、<a href="http://pages.physics.cornell.edu/~myers/teaching/ComputationalMethods/python/anatomyarray.png">cornell</a>、<a href="http://www.scipy-lectures.org/_images/numpy_fancy_indexing.png">scipy-lectures</a>）</p>
]]></content>
      <tags>
        <tag>Python</tag>
        <tag>Machine Learning</tag>
        <tag>機器學習</tag>
        <tag>AI</tag>
        <tag>Artificial Intelligence</tag>
        <tag>NLP</tag>
        <tag>Data Mining</tag>
        <tag>人工智慧</tag>
        <tag>監督式學習</tag>
        <tag>Supervised learning</tag>
        <tag>從零開始學資料科學</tag>
        <tag>Numpy</tag>
        <tag>資料科學</tag>
        <tag>data science</tag>
        <tag>data scientist</tag>
        <tag>pandas</tag>
        <tag>scikit-learn</tag>
      </tags>
  </entry>
  <entry>
    <title>用 Python 自學資料科學與機器學習入門實戰：Pandas 基礎入門</title>
    <url>/2017/10/11/python-data-science-and-machine-learning-pandas-tutorial/</url>
    <content><![CDATA[<p><img src="/images/data-science101/pandas.jpg" alt=" 如何使用 Python 學習機器學習（Machine Learning）"></p>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本系列文章將透過 Python 及其資料科學生態系（Numpy、Scipy、Pandas、Scikit-learn、Statsmodels、Matplotlib、Scrapy、Keras、TensorFlow 等）來系統性介紹資料科學和相關的知識，透過 Python 帶領讀者進入資料科學的世界和機器學習的世界。在這個單元中我們將介紹 Pandas 這個基於 Numpy 的資料處理和分析神兵利器。</p>
<p>事實上，真實世界並非如此美好，大部分資料分析的工作時間有很大一部分都是在處理髒資料，希望讓資料可以符合模型輸入的需求，而 Pandas 正是扮演這個資料預處理和資料清洗的核心角色，是 Python 在和 R 爭奪資料科學第一程式語言霸主時的生力軍，接下來我們將介紹 Pandas 核心功能和資料的操作方式。</p>
<p><img src="/images/data-science101/pandas_logo.png" alt=" 如何使用 Python 學習機器學習（Machine Learning）"></p>
<h1 id="Pandas-核心功能介紹"><a href="#Pandas-核心功能介紹" class="headerlink" title="Pandas 核心功能介紹"></a>Pandas 核心功能介紹</h1><h2 id="創建資料結構"><a href="#創建資料結構" class="headerlink" title="創建資料結構"></a>創建資料結構</h2><p>在 Pandas 中主要有兩大資料結構：Series、DataFrame，與 Numpy 中的 ndarray 比較不同的是 Pandas DataFrame 可以存異質資料（不同資料型別）。</p>
<p>Series 類似於 Python 本身的 list 資料結構，不同的是每個元素有自己的 index（可以自己命名）：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">%matplotlib inline</span><br><span class="line"><span class="comment"># 引入 numpy 和 pandas 模組</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np </span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">s1 = pd.Series([<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, np.nan, <span class="number">6</span>, <span class="number">8</span>]) <span class="comment"># 使用 Python lits 產生 Series，其中包含一個值為 NaN </span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(s1)</span><br></pre></td></tr></table></figure>

<pre><code>0    1.0
1    3.0
2    5.0
3    NaN
4    6.0
5    8.0
dtype: float64
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s2 = pd.Series(np.random.randint(<span class="number">2</span>, size=[<span class="number">3</span>])) <span class="comment"># 使用 np.random.randint 產生 3 個 0-2（不含 2）的數組</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(s2)</span><br></pre></td></tr></table></figure>

<pre><code>0    1
1    1
2    1
dtype: int64
</code></pre>
<p>DataFrame 可以使用 np.random.randn 產生值來創建，也可以使用 Python dict 進行創建：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 產生 20170101-20170106 的值，DatetimeIndex([&#x27;2017-01-01&#x27;, &#x27;2017-01-02&#x27;, &#x27;2017-01-03&#x27;, &#x27;2017-01-04&#x27;, &#x27;2017-01-05&#x27;, &#x27;2017-01-06&#x27;], dtype=&#x27;datetime64[ns]&#x27;, freq=&#x27;D&#x27;)</span></span><br><span class="line">dates = pd.date_range(<span class="string">&#x27;20170101&#x27;</span>, periods=<span class="number">6</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 產生 row6,column4 個 standard normal distribution 隨機值，使用 ABCD 當 columns，使用 dates 當 index</span></span><br><span class="line">df0 = pd.DataFrame(np.random.randn(<span class="number">6</span>,<span class="number">4</span>), index=dates, columns=<span class="built_in">list</span>(<span class="string">&#x27;ABCD&#x27;</span>)) </span><br><span class="line"><span class="built_in">print</span>(df0)</span><br></pre></td></tr></table></figure>

<pre><code>                   A         B         C         D
2017-01-01  1.112542 -0.142577  0.832830 -2.755133
2017-01-02 -0.218838 -0.304488  1.437599 -0.402454
2017-01-03  0.295245 -0.786898 -1.231896 -0.224959
2017-01-04 -0.346745 -1.582944 -0.464175 -0.410576
2017-01-05  0.163782  0.948795 -0.420505 -0.641032
2017-01-06  0.515806 -0.935421 -0.701349 -0.820109
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用 dict 來創建 DataFrame</span></span><br><span class="line">teams = [<span class="string">&#x27;Web&#x27;</span>, <span class="string">&#x27;Mobile&#x27;</span>, <span class="string">&#x27;Data&#x27;</span>]</span><br><span class="line">nums = [<span class="number">12</span>, <span class="number">14</span>, <span class="number">34</span>]</span><br><span class="line">rd_team_dict = &#123;</span><br><span class="line">                <span class="string">&#x27;teams&#x27;</span>: teams,</span><br><span class="line">                <span class="string">&#x27;nums&#x27;</span>: nums</span><br><span class="line">&#125;</span><br><span class="line">rd_team_df = pd.DataFrame(rd_team_dict)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(rd_team_df)</span><br></pre></td></tr></table></figure>

<pre><code>   nums   teams
0    12     Web
1    14  Mobile
2    34    Data
</code></pre>
<h1 id="觀察資料"><a href="#觀察資料" class="headerlink" title="觀察資料"></a>觀察資料</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 觀察資料型態、結構、內容值</span></span><br><span class="line">df = pd.DataFrame(&#123; <span class="string">&#x27;A&#x27;</span> : <span class="number">1.</span>,</span><br><span class="line">                    <span class="string">&#x27;B&#x27;</span> : pd.Timestamp(<span class="string">&#x27;20170102&#x27;</span>),</span><br><span class="line">                    <span class="string">&#x27;C&#x27;</span> : pd.Series(<span class="number">1</span>,index=<span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">4</span>)),dtype=<span class="string">&#x27;float32&#x27;</span>),</span><br><span class="line">                    <span class="string">&#x27;D&#x27;</span> : np.array([<span class="number">3</span>] * <span class="number">4</span>,dtype=<span class="string">&#x27;int32&#x27;</span>),</span><br><span class="line">                    <span class="string">&#x27;E&#x27;</span> : pd.Categorical([<span class="string">&quot;test&quot;</span>,<span class="string">&quot;train&quot;</span>,<span class="string">&quot;test&quot;</span>,<span class="string">&quot;train&quot;</span>]),</span><br><span class="line">                    <span class="string">&#x27;F&#x27;</span> : <span class="string">&#x27;foo&#x27;</span> &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 印出內容值資料型別</span></span><br><span class="line"><span class="built_in">print</span>(df.dtypes)</span><br></pre></td></tr></table></figure>

<pre><code>A           float64
B    datetime64[ns]
C           float32
D             int32
E          category
F            object
dtype: object
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 印出資料維度</span></span><br><span class="line"><span class="built_in">print</span>(df.shape)</span><br></pre></td></tr></table></figure>

<pre><code>(4, 6)
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 印出每行資料長度</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(df))</span><br></pre></td></tr></table></figure>

<pre><code>4
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 印出 DataFrame 資料概況</span></span><br><span class="line"><span class="built_in">print</span>(df.info())</span><br></pre></td></tr></table></figure>

<pre><code>&lt;class &#39;pandas.core.frame.DataFrame&#39;&gt;
Int64Index: 4 entries, 0 to 3
Data columns (total 6 columns):
A    4 non-null float64
B    4 non-null datetime64[ns]
C    4 non-null float32
D    4 non-null int32
E    4 non-null category
F    4 non-null object
dtypes: category(1), datetime64[ns](1), float32(1), float64(1), int32(1), object(1)
memory usage: 180.0+ bytes
None
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 印出基本敘述統計數據</span></span><br><span class="line"><span class="built_in">print</span>(df.describe())</span><br></pre></td></tr></table></figure>

<pre><code>         A    C    D
count  4.0  4.0  4.0
mean   1.0  1.0  3.0
std    0.0  0.0  0.0
min    1.0  1.0  3.0
25%    1.0  1.0  3.0
50%    1.0  1.0  3.0
75%    1.0  1.0  3.0
max    1.0  1.0  3.0
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 印出首 i 個數據</span></span><br><span class="line"><span class="built_in">print</span>(df.head(<span class="number">2</span>))</span><br></pre></td></tr></table></figure>

<pre><code>     A          B    C  D      E    F
0  1.0 2017-01-02  1.0  3   test  foo
1  1.0 2017-01-02  1.0  3  train  foo
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 印出尾 i 個數據</span></span><br><span class="line"><span class="built_in">print</span>(df.tail(<span class="number">2</span>))</span><br></pre></td></tr></table></figure>

<pre><code>     A          B    C  D      E    F
2  1.0 2017-01-02  1.0  3   test  foo
3  1.0 2017-01-02  1.0  3  train  foo
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 印出 index 值</span></span><br><span class="line"><span class="built_in">print</span>(df.index)</span><br></pre></td></tr></table></figure>

<pre><code>Int64Index([0, 1, 2, 3], dtype=&#39;int64&#39;)
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 印出 columns 值</span></span><br><span class="line"><span class="built_in">print</span>(df.columns)</span><br></pre></td></tr></table></figure>

<pre><code>Index([&#39;A&#39;, &#39;B&#39;, &#39;C&#39;, &#39;D&#39;, &#39;E&#39;, &#39;F&#39;], dtype=&#39;object&#39;)
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 印出 values 值</span></span><br><span class="line"><span class="built_in">print</span>(df.values)</span><br></pre></td></tr></table></figure>

<pre><code>[[1.0 Timestamp(&#39;2017-01-02 00:00:00&#39;) 1.0 3 &#39;test&#39; &#39;foo&#39;]
 [1.0 Timestamp(&#39;2017-01-02 00:00:00&#39;) 1.0 3 &#39;train&#39; &#39;foo&#39;]
 [1.0 Timestamp(&#39;2017-01-02 00:00:00&#39;) 1.0 3 &#39;test&#39; &#39;foo&#39;]
 [1.0 Timestamp(&#39;2017-01-02 00:00:00&#39;) 1.0 3 &#39;train&#39; &#39;foo&#39;]]
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 印出轉置 DataFrame</span></span><br><span class="line"><span class="built_in">print</span>(df.T)</span><br></pre></td></tr></table></figure>

<pre><code>                     0                    1                    2  \
A                    1                    1                    1   
B  2017-01-02 00:00:00  2017-01-02 00:00:00  2017-01-02 00:00:00   
C                    1                    1                    1   
D                    3                    3                    3   
E                 test                train                 test   
F                  foo                  foo                  foo   

                     3  
A                    1  
B  2017-01-02 00:00:00  
C                    1  
D                    3  
E                train  
F                  foo  
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># sort by the index labels。axis=0 使用 index 進行 sort，axis=1 使用 columns 進行 sort。ascending 決定是否由小到大</span></span><br><span class="line"><span class="built_in">print</span>(df.sort_index(axis=<span class="number">0</span>, ascending=<span class="literal">False</span>))</span><br></pre></td></tr></table></figure>

<pre><code>     A          B    C  D      E    F
3  1.0 2017-01-02  1.0  3  train  foo
2  1.0 2017-01-02  1.0  3   test  foo
1  1.0 2017-01-02  1.0  3  train  foo
0  1.0 2017-01-02  1.0  3   test  foo
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># sort by the values of columns</span></span><br><span class="line"><span class="built_in">print</span>(df.sort_values(by=<span class="string">&#x27;E&#x27;</span>))</span><br></pre></td></tr></table></figure>

<pre><code>     A          B    C  D      E    F
0  1.0 2017-01-02  1.0  3   test  foo
2  1.0 2017-01-02  1.0  3   test  foo
1  1.0 2017-01-02  1.0  3  train  foo
3  1.0 2017-01-02  1.0  3  train  foo
</code></pre>
<h2 id="選取資料"><a href="#選取資料" class="headerlink" title="選取資料"></a>選取資料</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 選取值的方式一般建議使用 1. loc, 2. iloc, 3. ix</span></span><br><span class="line"><span class="comment"># label-location based 行列標籤值取值，以下取出 index=1 那一欄，[列, 行]</span></span><br><span class="line"><span class="built_in">print</span>(df.loc[<span class="number">0</span>])</span><br></pre></td></tr></table></figure>

<pre><code>A                      1
B    2017-01-02 00:00:00
C                      1
D                      3
E                   test
F                    foo
Name: 0, dtype: object
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># iloc 則通過行列數字索引取值，[列，行]</span></span><br><span class="line"><span class="built_in">print</span>(df.iloc[<span class="number">0</span>:<span class="number">3</span>, <span class="number">1</span>:<span class="number">2</span>])</span><br></pre></td></tr></table></figure>

<pre><code>           B
0 2017-01-02
1 2017-01-02
2 2017-01-02
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 兼容 loc 和 iloc</span></span><br><span class="line"><span class="built_in">print</span>(df.ix[<span class="number">0</span>, <span class="string">&#x27;B&#x27;</span>])</span><br></pre></td></tr></table></figure>

<pre><code>2017-01-02 00:00:00
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 兼容 loc 和 iloc</span></span><br><span class="line"><span class="built_in">print</span>(df.ix[<span class="number">1</span>, <span class="number">3</span>])</span><br></pre></td></tr></table></figure>

<pre><code>3
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 布林取值，取出 A 行大於 0 的資料</span></span><br><span class="line"><span class="built_in">print</span>(df[df.A &gt; <span class="number">0</span>])</span><br></pre></td></tr></table></figure>

<pre><code>     A          B    C  D      E    F
0  1.0 2017-01-02  1.0  3   test  foo
1  1.0 2017-01-02  1.0  3  train  foo
2  1.0 2017-01-02  1.0  3   test  foo
3  1.0 2017-01-02  1.0  3  train  foo
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 產生 Series 值</span></span><br><span class="line">s1 = pd.Series([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>], index=pd.date_range(<span class="string">&#x27;20170102&#x27;</span>, periods=<span class="number">6</span>))</span><br><span class="line"><span class="built_in">print</span>(s1)</span><br></pre></td></tr></table></figure>

<pre><code>2017-01-02    1
2017-01-03    2
2017-01-04    3
2017-01-05    4
2017-01-06    5
2017-01-07    6
Freq: D, dtype: int64
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 更新值</span></span><br><span class="line">df.loc[:,<span class="string">&#x27;D&#x27;</span>] = np.array([<span class="number">5</span>] * <span class="built_in">len</span>(df))</span><br><span class="line"><span class="built_in">print</span>(df)</span><br></pre></td></tr></table></figure>

<pre><code>     A          B    C  D      E    F
0  1.0 2017-01-02  1.0  5   test  foo
1  1.0 2017-01-02  1.0  5  train  foo
2  1.0 2017-01-02  1.0  5   test  foo
3  1.0 2017-01-02  1.0  5  train  foo
</code></pre>
<h2 id="處理遺失資料"><a href="#處理遺失資料" class="headerlink" title="處理遺失資料"></a>處理遺失資料</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查缺補漏</span></span><br><span class="line">df2 = pd.DataFrame(index=dates[<span class="number">0</span>:<span class="number">4</span>], columns=<span class="built_in">list</span>(df.columns) + [<span class="string">&#x27;E&#x27;</span>])</span><br><span class="line"></span><br><span class="line">df2.loc[dates[<span class="number">0</span>]:dates[<span class="number">1</span>], :] = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># drop 掉 NaN 值</span></span><br><span class="line"><span class="built_in">print</span>(df2.dropna(how=<span class="string">&#x27;any&#x27;</span>))</span><br><span class="line"><span class="comment"># 補充 NaN 為 3</span></span><br><span class="line"><span class="built_in">print</span>(df2.fillna(value=<span class="number">3</span>))</span><br><span class="line"><span class="built_in">print</span>(df2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 回傳 NaN 布林值 </span></span><br><span class="line"><span class="built_in">print</span>(pd.isnull(df2))</span><br><span class="line"></span><br><span class="line"><span class="comment"># inplace 為 True 為直接操作資料，不是操作 copy 副本</span></span><br><span class="line">df2.dropna(how=<span class="string">&#x27;any&#x27;</span>, inplace=<span class="literal">True</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<pre><code>            A  B  C  D  E  F  E
2017-01-01  1  1  1  1  1  1  1
2017-01-02  1  1  1  1  1  1  1
            A  B  C  D  E  F  E
2017-01-01  1  1  1  1  1  1  1
2017-01-02  1  1  1  1  1  1  1
2017-01-03  3  3  3  3  3  3  3
2017-01-04  3  3  3  3  3  3  3
              A    B    C    D    E    F    E
2017-01-01    1    1    1    1    1    1    1
2017-01-02    1    1    1    1    1    1    1
2017-01-03  NaN  NaN  NaN  NaN  NaN  NaN  NaN
2017-01-04  NaN  NaN  NaN  NaN  NaN  NaN  NaN
                A      B      C      D      E      F      E
2017-01-01  False  False  False  False  False  False  False
2017-01-02  False  False  False  False  False  False  False
2017-01-03   True   True   True   True   True   True   True
2017-01-04   True   True   True   True   True   True   True
</code></pre>
<h2 id="資料操作"><a href="#資料操作" class="headerlink" title="資料操作"></a>資料操作</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 針對每一個值進行操作</span></span><br><span class="line">df.apply(<span class="keyword">lambda</span> x: x.<span class="built_in">max</span>() - x.<span class="built_in">min</span>())</span><br></pre></td></tr></table></figure>




<pre><code>A    2.696944
B    5.285329
C    1.948946
D    2.615037
dtype: float64
</code></pre>
<h2 id="串接資料"><a href="#串接資料" class="headerlink" title="串接資料"></a>串接資料</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 串接資料</span></span><br><span class="line"></span><br><span class="line">df = pd.DataFrame(np.random.randn(<span class="number">10</span>, <span class="number">4</span>))</span><br><span class="line"><span class="built_in">print</span>(df)</span><br><span class="line">pieces = [df[:<span class="number">3</span>], df[<span class="number">3</span>:<span class="number">7</span>], df[<span class="number">7</span>:]]</span><br><span class="line"><span class="built_in">print</span>(pieces)</span><br><span class="line"><span class="built_in">print</span>(pd.concat(pieces))</span><br></pre></td></tr></table></figure>

<pre><code>          0         1         2         3
0 -0.171208  2.200967  0.385574 -0.481588
1  1.447335  1.756239  0.083053  0.255434
2 -0.508576  0.818774 -0.438210 -0.819860
3  1.704828 -0.329642 -1.059202 -0.820319
4 -1.792491 -0.761873 -1.090574 -0.484552
5  0.166621  1.704577 -1.613185 -0.391985
6  0.806292  0.699608 -1.768223 -1.081318
7 -1.168532  0.768302  0.831701  0.422367
8  0.065940 -0.038649 -0.060712 -0.500365
9  0.623535  0.558461 -0.956861  1.229675
[          0         1         2         3
0 -0.171208  2.200967  0.385574 -0.481588
1  1.447335  1.756239  0.083053  0.255434
2 -0.508576  0.818774 -0.438210 -0.819860,           0         1         2         3
3  1.704828 -0.329642 -1.059202 -0.820319
4 -1.792491 -0.761873 -1.090574 -0.484552
5  0.166621  1.704577 -1.613185 -0.391985
6  0.806292  0.699608 -1.768223 -1.081318,           0         1         2         3
7 -1.168532  0.768302  0.831701  0.422367
8  0.065940 -0.038649 -0.060712 -0.500365
9  0.623535  0.558461 -0.956861  1.229675]
          0         1         2         3
0 -0.171208  2.200967  0.385574 -0.481588
1  1.447335  1.756239  0.083053  0.255434
2 -0.508576  0.818774 -0.438210 -0.819860
3  1.704828 -0.329642 -1.059202 -0.820319
4 -1.792491 -0.761873 -1.090574 -0.484552
5  0.166621  1.704577 -1.613185 -0.391985
6  0.806292  0.699608 -1.768223 -1.081318
7 -1.168532  0.768302  0.831701  0.422367
8  0.065940 -0.038649 -0.060712 -0.500365
9  0.623535  0.558461 -0.956861  1.229675
</code></pre>
<h2 id="合併資料"><a href="#合併資料" class="headerlink" title="合併資料"></a>合併資料</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 合併資料</span></span><br><span class="line">left = pd.DataFrame(&#123;<span class="string">&#x27;key&#x27;</span>: [<span class="string">&#x27;foo&#x27;</span>, <span class="string">&#x27;foo&#x27;</span>], <span class="string">&#x27;lval&#x27;</span>: [<span class="number">1</span>, <span class="number">2</span>]&#125;)</span><br><span class="line">right = pd.DataFrame(&#123;<span class="string">&#x27;key&#x27;</span>: [<span class="string">&#x27;foo&#x27;</span>, <span class="string">&#x27;foo&#x27;</span>], <span class="string">&#x27;rval&#x27;</span>: [<span class="number">4</span>, <span class="number">5</span>]&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(pd.merge(left, right, on=<span class="string">&#x27;key&#x27;</span>))</span><br></pre></td></tr></table></figure>

<pre><code>   key  lval  rval
0  foo     1     4
1  foo     1     5
2  foo     2     4
3  foo     2     5
</code></pre>
<h2 id="新增資料"><a href="#新增資料" class="headerlink" title="新增資料"></a>新增資料</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 新增資料於最後</span></span><br><span class="line">df = pd.DataFrame(np.random.randn(<span class="number">8</span>, <span class="number">4</span>), columns=[<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;B&#x27;</span>,<span class="string">&#x27;C&#x27;</span>,<span class="string">&#x27;D&#x27;</span>])</span><br><span class="line"><span class="built_in">print</span>(df)</span><br><span class="line">s = df.iloc[<span class="number">3</span>]</span><br><span class="line"><span class="built_in">print</span>(df.append(s, ignore_index=<span class="literal">True</span>))</span><br></pre></td></tr></table></figure>

<pre><code>          A         B         C         D
0  1.780499  1.207626  0.631475 -1.747506
1 -0.603999 -2.364099  1.153066  0.504784
2  0.721924  0.199784 -0.158318 -0.882946
3 -0.378070 -0.379311  0.478997  0.271056
4  0.620888 -0.366262 -0.738695 -0.380854
5 -0.587604 -1.728096  0.279645 -0.927843
6 -0.916445  2.921231 -0.795880  0.867531
7 -0.373190  1.526771  0.136712  0.015765
          A         B         C         D
0  1.780499  1.207626  0.631475 -1.747506
1 -0.603999 -2.364099  1.153066  0.504784
2  0.721924  0.199784 -0.158318 -0.882946
3 -0.378070 -0.379311  0.478997  0.271056
4  0.620888 -0.366262 -0.738695 -0.380854
5 -0.587604 -1.728096  0.279645 -0.927843
6 -0.916445  2.921231 -0.795880  0.867531
7 -0.373190  1.526771  0.136712  0.015765
8 -0.378070 -0.379311  0.478997  0.271056
</code></pre>
<h2 id="群組操作"><a href="#群組操作" class="headerlink" title="群組操作"></a>群組操作</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 群組操作</span></span><br><span class="line"><span class="built_in">print</span>(df.groupby([<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;B&#x27;</span>]).<span class="built_in">sum</span>())</span><br></pre></td></tr></table></figure>

<pre><code>                            C         D
A         B                            
-1.232691  0.489020  0.436602 -1.439868
-0.259460 -0.269874  1.655001  0.530137
-0.256261 -0.743254  0.128837  1.050430
 0.015723  0.596866 -0.232503  1.247810
 0.049633 -0.093130  0.895723  1.049938
 0.458667  0.348883 -0.681931 -0.517437
 1.446492  0.007736  0.208870  0.211517
 2.357912 -0.187805 -0.376578 -0.459085
</code></pre>
<h2 id="繪圖"><a href="#繪圖" class="headerlink" title="繪圖"></a>繪圖</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 印出圖表</span></span><br><span class="line">ts = pd.Series(np.random.randn(<span class="number">1000</span>), index=pd.date_range(<span class="string">&#x27;1/1/2000&#x27;</span>, periods=<span class="number">1000</span>))</span><br><span class="line">ts = ts.cumsum()</span><br><span class="line">ts.plot()</span><br></pre></td></tr></table></figure>

<pre><code>&lt;matplotlib.axes._subplots.AxesSubplot at 0x11bc50f98&gt;
</code></pre>
<p><img src="/images/data-science101/pandas_output.png" alt="png"></p>
<h2 id="輸入-輸出"><a href="#輸入-輸出" class="headerlink" title="輸入&#x2F;輸出"></a>輸入&#x2F;輸出</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 讀取檔案/輸出檔案，支援 csv, h5, xlsx 檔案格式</span></span><br><span class="line">df.to_csv(<span class="string">&#x27;foo.csv&#x27;</span>)</span><br><span class="line">pd.read_csv(<span class="string">&#x27;foo.csv&#x27;</span>)</span><br><span class="line">df.to_excel(<span class="string">&#x27;foo.xlsx&#x27;</span>, sheet_name=<span class="string">&#x27;Sheet1&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(pd.read_excel(<span class="string">&#x27;foo.xlsx&#x27;</span>, <span class="string">&#x27;Sheet1&#x27;</span>, index_col=<span class="literal">None</span>, na_values=[<span class="string">&#x27;NA&#x27;</span>]))</span><br></pre></td></tr></table></figure>

<pre><code>          A         B         C         D
0  1.446492  0.007736  0.208870  0.211517
1  0.049633 -0.093130  0.895723  1.049938
2 -1.232691  0.489020  0.436602 -1.439868
3 -0.259460 -0.269874  1.655001  0.530137
4  0.015723  0.596866 -0.232503  1.247810
5  0.458667  0.348883 -0.681931 -0.517437
6  2.357912 -0.187805 -0.376578 -0.459085
7 -0.256261 -0.743254  0.128837  1.050430
</code></pre>
<h1 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h1><p>以上整理了一些 Pandas 核心功能和如何操作資料，接下來我們將介紹其他 Python 資料科學和機器學習生態系和相關工具。</p>
<h1 id="延伸閱讀"><a href="#延伸閱讀" class="headerlink" title="延伸閱讀"></a>延伸閱讀</h1><ol>
<li><a href="http://pandas.pydata.org/pandas-docs/stable/10min.html">10 Minutes to pandas</a></li>
<li><a href="http://wiki.jikexueyuan.com/project/start-learning-python/311.html">Pandas 使用 (1)</a></li>
<li><a href="https://stackoverflow.com/questions/43893457/python-pandas-understanding-inplace-true">Python Pandas - Understanding inplace&#x3D;True</a></li>
<li><a href="http://x-wei.github.io/pandas%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.html">pandas学习笔记</a></li>
<li><a href="http://www.cnblogs.com/en-heng/p/5630849.html">【Python实战】Pandas：让你像写SQL一样做数据分析（一）</a></li>
</ol>
<p>（image via <a href="http://pandas.pydata.org/_static/pandas_logo.png">pydata</a>、<a href="https://media4.s-nbcnews.com/j/newscms/2016_36/1685951/ss-160826-twip-05_8cf6d4cb83758449fd400c7c3d71aa1f.nbcnews-ux-2880-1000.jpg">nbcnews</a>）</p>
]]></content>
      <tags>
        <tag>Python</tag>
        <tag>Machine Learning</tag>
        <tag>機器學習</tag>
        <tag>AI</tag>
        <tag>Artificial Intelligence</tag>
        <tag>NLP</tag>
        <tag>Data Mining</tag>
        <tag>人工智慧</tag>
        <tag>監督式學習</tag>
        <tag>Supervised learning</tag>
        <tag>從零開始學資料科學</tag>
        <tag>Numpy</tag>
        <tag>資料科學</tag>
        <tag>data science</tag>
        <tag>data scientist</tag>
        <tag>pandas</tag>
        <tag>scikit-learn</tag>
      </tags>
  </entry>
  <entry>
    <title>用 Python 自學資料科學與機器學習入門實戰：Scikit Learn 基礎入門</title>
    <url>/2017/10/14/python-data-science-and-machine-learning-scikit-learn-basic-tutorial/</url>
    <content><![CDATA[<p><img src="/images/data-science101/scikit-learn/scikit-learn-logo.png" alt=" 如何使用 Python 學習機器學習（Machine Learning）"></p>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本系列文章將透過 Python 及其資料科學與機器學習生態系（Numpy、Scipy、Pandas、scikit-learn、Statsmodels、Matplotlib、Scrapy、Keras、TensorFlow 等）來系統性介紹資料科學與機器學習相關的知識。在這個單元中我們將介紹 scikit-learn 這個機器學習和資料分析神兵利器和基本的機器學習工作流程。接下來我們的範例將會使用 Ananconda、Python3 和 Jupyter Notebook 開發環境進行，若還沒安裝環境的讀者記得先行安裝。首先我們先來認識一下基本機器學習工作流程，讓讀者對於機器學習工作流有基本而全面的認識。</p>
<h1 id="基本機器學習工作流程（Machine-Learning-Workflow）"><a href="#基本機器學習工作流程（Machine-Learning-Workflow）" class="headerlink" title="基本機器學習工作流程（Machine Learning Workflow）"></a>基本機器學習工作流程（Machine Learning Workflow）</h1><p><img src="/images/data-science101/scikit-learn/ml-workflow1.jpg" alt=" 如何使用 Python 學習機器學習（Machine Learning）"></p>
<ol>
<li>明確定義問題 (Problem Definition)</li>
<li>獲取資料與探索性資料分析 (Get Data &amp; Exploratory Data Analysis)</li>
<li>資料預處理與特徵工程 (Data Clean&#x2F;Preprocessing &amp; Feature Engineering)</li>
<li>訓練模型與校調 (Model Training)</li>
<li>模型驗證 (Model Predict &amp; Testing)</li>
<li>模型優化 (Model Optimization)</li>
<li>上線運行 (Deploy Model)</li>
</ol>
<h1 id="明確定義問題-Problem-Definition"><a href="#明確定義問題-Problem-Definition" class="headerlink" title="明確定義問題 (Problem Definition)"></a>明確定義問題 (Problem Definition)</h1><p><img src="/images/data-science101/scikit-learn/iris.jpg" alt=" 如何使用 Python 學習機器學習（Machine Learning）"></p>
<p>明確定義問題是進行機器學習工作流的第一步。由於機器學習和一般的 Web 網頁應用程式開發比較不一樣，其需要的運算資源和時間成本比較高，若能一開始就定義好問題並將問題抽象為數學問題將有助於我們要蒐集的資料集和節省工作流程的時間。</p>
<p>舉例來說，本篇文章範例希望預測 Iris 鳶尾花屬於哪一個類別（setosa 山鳶尾、versicolor 變色鳶尾、virginica 維吉尼亞鳶尾），這邊我們就可以決定是要進行有對應結果的監督式學習：二元分類問題（binary classification）、多類別分類問題（multi-classification）還是連續量的迴歸問題（regression），或是沒有標籤結果的非監督式學習（例如：clustering）等，我們這邊假設這是一個多類別分類問題：給定未知資料希望能預測花朵屬於哪一類。換句話說，就是說我們先定義好我們想要解決或是預測的問題，然後去蒐集對應的資料。</p>
<h1 id="獲取資料與探索性資料分析-Get-Data-Exploratory-Data-Analysis"><a href="#獲取資料與探索性資料分析-Get-Data-Exploratory-Data-Analysis" class="headerlink" title="獲取資料與探索性資料分析 (Get Data &amp; Exploratory Data Analysis)"></a>獲取資料與探索性資料分析 (Get Data &amp; Exploratory Data Analysis)</h1><p><img src="/images/data-science101/scikit-learn/irises.png" alt=" 如何使用 Python 學習機器學習（Machine Learning）"></p>
<p>基本上資料集的完整性某種程度決定了預測結果是否能發揮模型最大功效。由於我們是教學文章，這邊我們的範例使用 scikit-learn 內建的玩具資料集 Iris（鳶尾花）的花萼、花蕊長寬進行花朵類別判別（setosa 山鳶尾、versicolor 變色鳶尾、virginica 維吉尼亞鳶尾）。在這個資料集中已經幫我們標註好每筆資料對應的類別，所以我們可以視為多類別分類問題（multi-classification）。</p>
<p><img src="/images/data-science101/scikit-learn/iris-feature.gif" alt=" 如何使用 Python 學習機器學習（Machine Learning）"></p>
<p>引入模組</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 引入 numpy、pd 和 sklearn(scikit-learn) 模組</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> datasets</span><br><span class="line"><span class="comment"># 引入 train_test_split 分割方法，注意在 sklearn v0.18 後 train_test_split 從 sklearn.cross_validation 子模組搬到 sklearn.model_selection 中</span></span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"><span class="comment"># 引入 KNeighbors 模型</span></span><br><span class="line"><span class="keyword">from</span> sklearn.neighbors <span class="keyword">import</span> KNeighborsClassifier</span><br><span class="line"><span class="keyword">from</span> sklearn.svm <span class="keyword">import</span> LinearSVC</span><br></pre></td></tr></table></figure>

<p>引入資料集並進行探索性資料分析</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 引入 iris 資料集</span></span><br><span class="line">raw_iris = datasets.load_iris()</span><br><span class="line"><span class="comment"># 探索性分析 Exploratory data analysis，了解資料集內容</span></span><br><span class="line"><span class="comment"># 先印出 key 值，列出有哪些值：[&#x27;data&#x27;, &#x27;target&#x27;, &#x27;target_names&#x27;, &#x27;DESCR&#x27;, &#x27;feature_names&#x27;]</span></span><br><span class="line"><span class="built_in">print</span>(raw_iris.keys())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 印出 feature 值</span></span><br><span class="line"><span class="built_in">print</span>(raw_iris[<span class="string">&#x27;data&#x27;</span>])</span><br><span class="line"><span class="comment"># 印出目標值，分別對應的是三種花的類別：[&#x27;setosa 山鳶尾&#x27; &#x27;versicolor 變色鳶尾&#x27; &#x27;virginica 維吉尼亞鳶尾&#x27;]</span></span><br><span class="line"><span class="built_in">print</span>(raw_iris[<span class="string">&#x27;target&#x27;</span>])</span><br><span class="line"><span class="comment"># 印出目標標籤，三種花的類別：[&#x27;setosa&#x27; &#x27;versicolor&#x27; &#x27;virginica&#x27;]</span></span><br><span class="line"><span class="built_in">print</span>(raw_iris[<span class="string">&#x27;target_names&#x27;</span>])</span><br><span class="line"><span class="comment"># 印出資料集內容描述</span></span><br><span class="line"><span class="built_in">print</span>(raw_iris[<span class="string">&#x27;DESCR&#x27;</span>])</span><br><span class="line"><span class="comment"># 印出屬性名稱，[&#x27;sepal length 花萼長度 (cm)&#x27;, &#x27;sepal width 花萼寬度 (cm)&#x27;, &#x27;petal length 花蕊長度 (cm)&#x27;, &#x27;petal width 花蕊寬度 (cm)&#x27;]</span></span><br><span class="line"><span class="built_in">print</span>(raw_iris[<span class="string">&#x27;feature_names&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 類別種類</span></span><br><span class="line"><span class="built_in">print</span>(np.unique(raw_iris.target))</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<pre><code>dict_keys([&#39;data&#39;, &#39;target&#39;, &#39;target_names&#39;, &#39;DESCR&#39;, &#39;feature_names&#39;])
[[ 5.1  3.5  1.4  0.2]
 [ 4.9  3.   1.4  0.2]
 [ 4.7  3.2  1.3  0.2]
 [ 4.6  3.1  1.5  0.2]
 [ 5.   3.6  1.4  0.2]
 [ 5.4  3.9  1.7  0.4]
 [ 4.6  3.4  1.4  0.3]
 [ 5.   3.4  1.5  0.2]
 [ 4.4  2.9  1.4  0.2]
 [ 4.9  3.1  1.5  0.1]
 [ 5.4  3.7  1.5  0.2]
 [ 4.8  3.4  1.6  0.2]
 [ 4.8  3.   1.4  0.1]
 [ 4.3  3.   1.1  0.1]
 [ 5.8  4.   1.2  0.2]
 [ 5.7  4.4  1.5  0.4]
 [ 5.4  3.9  1.3  0.4]
 [ 5.1  3.5  1.4  0.3]
 [ 5.7  3.8  1.7  0.3]
 [ 5.1  3.8  1.5  0.3]
 [ 5.4  3.4  1.7  0.2]
 [ 5.1  3.7  1.5  0.4]
 [ 4.6  3.6  1.   0.2]
 [ 5.1  3.3  1.7  0.5]
 [ 4.8  3.4  1.9  0.2]
 [ 5.   3.   1.6  0.2]
 [ 5.   3.4  1.6  0.4]
 [ 5.2  3.5  1.5  0.2]
 [ 5.2  3.4  1.4  0.2]
 [ 4.7  3.2  1.6  0.2]
 [ 4.8  3.1  1.6  0.2]
 [ 5.4  3.4  1.5  0.4]
 [ 5.2  4.1  1.5  0.1]
 [ 5.5  4.2  1.4  0.2]
 [ 4.9  3.1  1.5  0.1]
 [ 5.   3.2  1.2  0.2]
 [ 5.5  3.5  1.3  0.2]
 [ 4.9  3.1  1.5  0.1]
 [ 4.4  3.   1.3  0.2]
 [ 5.1  3.4  1.5  0.2]
 [ 5.   3.5  1.3  0.3]
 [ 4.5  2.3  1.3  0.3]
 [ 4.4  3.2  1.3  0.2]
 [ 5.   3.5  1.6  0.6]
 [ 5.1  3.8  1.9  0.4]
 [ 4.8  3.   1.4  0.3]
 [ 5.1  3.8  1.6  0.2]
 [ 4.6  3.2  1.4  0.2]
 [ 5.3  3.7  1.5  0.2]
 [ 5.   3.3  1.4  0.2]
 [ 7.   3.2  4.7  1.4]
 [ 6.4  3.2  4.5  1.5]
 [ 6.9  3.1  4.9  1.5]
 [ 5.5  2.3  4.   1.3]
 [ 6.5  2.8  4.6  1.5]
 [ 5.7  2.8  4.5  1.3]
 [ 6.3  3.3  4.7  1.6]
 [ 4.9  2.4  3.3  1. ]
 [ 6.6  2.9  4.6  1.3]
 [ 5.2  2.7  3.9  1.4]
 [ 5.   2.   3.5  1. ]
 [ 5.9  3.   4.2  1.5]
 [ 6.   2.2  4.   1. ]
 [ 6.1  2.9  4.7  1.4]
 [ 5.6  2.9  3.6  1.3]
 [ 6.7  3.1  4.4  1.4]
 [ 5.6  3.   4.5  1.5]
 [ 5.8  2.7  4.1  1. ]
 [ 6.2  2.2  4.5  1.5]
 [ 5.6  2.5  3.9  1.1]
 [ 5.9  3.2  4.8  1.8]
 [ 6.1  2.8  4.   1.3]
 [ 6.3  2.5  4.9  1.5]
 [ 6.1  2.8  4.7  1.2]
 [ 6.4  2.9  4.3  1.3]
 [ 6.6  3.   4.4  1.4]
 [ 6.8  2.8  4.8  1.4]
 [ 6.7  3.   5.   1.7]
 [ 6.   2.9  4.5  1.5]
 [ 5.7  2.6  3.5  1. ]
 [ 5.5  2.4  3.8  1.1]
 [ 5.5  2.4  3.7  1. ]
 [ 5.8  2.7  3.9  1.2]
 [ 6.   2.7  5.1  1.6]
 [ 5.4  3.   4.5  1.5]
 [ 6.   3.4  4.5  1.6]
 [ 6.7  3.1  4.7  1.5]
 [ 6.3  2.3  4.4  1.3]
 [ 5.6  3.   4.1  1.3]
 [ 5.5  2.5  4.   1.3]
 [ 5.5  2.6  4.4  1.2]
 [ 6.1  3.   4.6  1.4]
 [ 5.8  2.6  4.   1.2]
 [ 5.   2.3  3.3  1. ]
 [ 5.6  2.7  4.2  1.3]
 [ 5.7  3.   4.2  1.2]
 [ 5.7  2.9  4.2  1.3]
 [ 6.2  2.9  4.3  1.3]
 [ 5.1  2.5  3.   1.1]
 [ 5.7  2.8  4.1  1.3]
 [ 6.3  3.3  6.   2.5]
 [ 5.8  2.7  5.1  1.9]
 [ 7.1  3.   5.9  2.1]
 [ 6.3  2.9  5.6  1.8]
 [ 6.5  3.   5.8  2.2]
 [ 7.6  3.   6.6  2.1]
 [ 4.9  2.5  4.5  1.7]
 [ 7.3  2.9  6.3  1.8]
 [ 6.7  2.5  5.8  1.8]
 [ 7.2  3.6  6.1  2.5]
 [ 6.5  3.2  5.1  2. ]
 [ 6.4  2.7  5.3  1.9]
 [ 6.8  3.   5.5  2.1]
 [ 5.7  2.5  5.   2. ]
 [ 5.8  2.8  5.1  2.4]
 [ 6.4  3.2  5.3  2.3]
 [ 6.5  3.   5.5  1.8]
 [ 7.7  3.8  6.7  2.2]
 [ 7.7  2.6  6.9  2.3]
 [ 6.   2.2  5.   1.5]
 [ 6.9  3.2  5.7  2.3]
 [ 5.6  2.8  4.9  2. ]
 [ 7.7  2.8  6.7  2. ]
 [ 6.3  2.7  4.9  1.8]
 [ 6.7  3.3  5.7  2.1]
 [ 7.2  3.2  6.   1.8]
 [ 6.2  2.8  4.8  1.8]
 [ 6.1  3.   4.9  1.8]
 [ 6.4  2.8  5.6  2.1]
 [ 7.2  3.   5.8  1.6]
 [ 7.4  2.8  6.1  1.9]
 [ 7.9  3.8  6.4  2. ]
 [ 6.4  2.8  5.6  2.2]
 [ 6.3  2.8  5.1  1.5]
 [ 6.1  2.6  5.6  1.4]
 [ 7.7  3.   6.1  2.3]
 [ 6.3  3.4  5.6  2.4]
 [ 6.4  3.1  5.5  1.8]
 [ 6.   3.   4.8  1.8]
 [ 6.9  3.1  5.4  2.1]
 [ 6.7  3.1  5.6  2.4]
 [ 6.9  3.1  5.1  2.3]
 [ 5.8  2.7  5.1  1.9]
 [ 6.8  3.2  5.9  2.3]
 [ 6.7  3.3  5.7  2.5]
 [ 6.7  3.   5.2  2.3]
 [ 6.3  2.5  5.   1.9]
 [ 6.5  3.   5.2  2. ]
 [ 6.2  3.4  5.4  2.3]
 [ 5.9  3.   5.1  1.8]]
[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2
 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
 2 2]
[&#39;setosa&#39; &#39;versicolor&#39; &#39;virginica&#39;]
Iris Plants Database
====================

Notes
-----
Data Set Characteristics:
    :Number of Instances: 150 (50 in each of three classes)
    :Number of Attributes: 4 numeric, predictive attributes and the class
    :Attribute Information:
        - sepal length in cm
        - sepal width in cm
        - petal length in cm
        - petal width in cm
        - class:
                - Iris-Setosa
                - Iris-Versicolour
                - Iris-Virginica
    :Summary Statistics:

    ============== ==== ==== ======= ===== ====================
                    Min  Max   Mean    SD   Class Correlation
    ============== ==== ==== ======= ===== ====================
    sepal length:   4.3  7.9   5.84   0.83    0.7826
    sepal width:    2.0  4.4   3.05   0.43   -0.4194
    petal length:   1.0  6.9   3.76   1.76    0.9490  (high!)
    petal width:    0.1  2.5   1.20  0.76     0.9565  (high!)
    ============== ==== ==== ======= ===== ====================

    :Missing Attribute Values: None
    :Class Distribution: 33.3% for each of 3 classes.
    :Creator: R.A. Fisher
    :Donor: Michael Marshall (MARSHALL%PLU@io.arc.nasa.gov)
    :Date: July, 1988

This is a copy of UCI ML iris datasets.
http://archive.ics.uci.edu/ml/datasets/Iris

The famous Iris database, first used by Sir R.A Fisher

This is perhaps the best known database to be found in the
pattern recognition literature.  Fisher&#39;s paper is a classic in the field and
is referenced frequently to this day.  (See Duda &amp; Hart, for example.)  The
data set contains 3 classes of 50 instances each, where each class refers to a
type of iris plant.  One class is linearly separable from the other 2; the
latter are NOT linearly separable from each other.

References
----------
   - Fisher,R.A. &quot;The use of multiple measurements in taxonomic problems&quot;
     Annual Eugenics, 7, Part II, 179-188 (1936); also in &quot;Contributions to
     Mathematical Statistics&quot; (John Wiley, NY, 1950).
   - Duda,R.O., &amp; Hart,P.E. (1973) Pattern Classification and Scene Analysis.
     (Q327.D83) John Wiley &amp; Sons.  ISBN 0-471-22361-1.  See page 218.
   - Dasarathy, B.V. (1980) &quot;Nosing Around the Neighborhood: A New System
     Structure and Classification Rule for Recognition in Partially Exposed
     Environments&quot;.  IEEE Transactions on Pattern Analysis and Machine
     Intelligence, Vol. PAMI-2, No. 1, 67-71.
   - Gates, G.W. (1972) &quot;The Reduced Nearest Neighbor Rule&quot;.  IEEE Transactions
     on Information Theory, May 1972, 431-433.
   - See also: 1988 MLC Proceedings, 54-64.  Cheeseman et al&quot;s AUTOCLASS II
     conceptual clustering system finds 3 classes in the data.
   - Many, many more ...

[&#39;sepal length (cm)&#39;, &#39;sepal width (cm)&#39;, &#39;petal length (cm)&#39;, &#39;petal width (cm)&#39;]
[0 1 2]
</code></pre>
<h1 id="資料預處理與特徵工程-Data-Clean-Preprocessing-Feature-Engineering"><a href="#資料預處理與特徵工程-Data-Clean-Preprocessing-Feature-Engineering" class="headerlink" title="資料預處理與特徵工程 (Data Clean&#x2F;Preprocessing &amp; Feature Engineering)"></a>資料預處理與特徵工程 (Data Clean&#x2F;Preprocessing &amp; Feature Engineering)</h1><p><img src="/images/data-science101/scikit-learn/ml-pipeline.png" alt=" 如何使用 Python 學習機器學習（Machine Learning）"></p>
<p>良好的資料輸入取決於資料預處理與特徵工程，而好的輸入將大大影響到模型是否可以發揮其理論正常水準。以下把資料轉成 DataFrame 格式方便進行操作。由於這邊的資料集已經是相當完整的資料集，所以我們這邊就不用特別進行資料預處理和特徵工程的部份，然而在真實世界中，真正在進行機器學習工作流程的時候資料預處理往往是最花時間的部份。同時為了方便模型的校調，我們這邊把資料集分為 70% 訓練資料，30% 驗證資料。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 將資料轉為 pandas DataFrame</span></span><br><span class="line"><span class="comment"># data 為觀察目標變數</span></span><br><span class="line">df_X = pd.DataFrame(raw_iris.data)</span><br><span class="line"><span class="comment"># target 為預測變數</span></span><br><span class="line">df_y = pd.DataFrame(raw_iris.target)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 將資料切分為 training data 和 testing data，其中 random_state 若設為 0 或不設則即便實例不同但因種子相同產生同樣隨機編號，若設為 1 則每次隨機產生不同編號</span></span><br><span class="line"><span class="comment"># test_size 為切分 training data 和 testing data 的比例</span></span><br><span class="line">X_train, X_test, y_train, y_test = train_test_split(df_X, df_y, test_size=<span class="number">0.3</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 印出所有資料集筆數</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(df_y))</span><br></pre></td></tr></table></figure>
<pre><code>150
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 印出切分 y_train 的數量為所有資料集的 70%，共 105 筆</span></span><br><span class="line"><span class="built_in">print</span>(y_train)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(y_train))</span><br></pre></td></tr></table></figure>
<pre><code>     0
39   0
106  2
99   1
0    0
16   0
118  2
80   1
29   0
11   0
104  2
100  2
72   1
108  2
42   0
20   0
31   0
115  2
111  2
89   1
83   1
130  2
41   0
66   1
120  2
113  2
6    0
126  2
62   1
23   0
97   1
..  ..
10   0
76   1
129  2
144  2
137  2
12   0
79   1
123  2
127  2
36   0
74   1
37   0
131  2
110  2
22   0
32   0
147  2
134  2
102  2
75   1
88   1
148  2
33   0
56   1
28   0
90   1
82   1
25   0
121  2
13   0

[105 rows x 1 columns]
105
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 印出切分的 y_test 資料為所有資料集的 30%，共 45 筆</span></span><br><span class="line"><span class="built_in">print</span>(y_test)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(y_test))</span><br></pre></td></tr></table></figure>
<pre><code>     0
102  2
53   1
143  2
70   1
61   1
67   1
24   0
124  2
36   0
92   1
114  2
31   0
120  2
87   1
74   1
47   0
69   1
56   1
93   1
16   0
144  2
133  2
29   0
57   1
116  2
50   1
86   1
44   0
3    0
21   0
82   1
99   1
134  2
111  2
135  2
4    0
2    0
91   1
85   1
122  2
127  2
11   0
27   0
79   1
51   1
45
</code></pre>
<h1 id="訓練模型與校調-Model-Training"><a href="#訓練模型與校調-Model-Training" class="headerlink" title="訓練模型與校調 (Model Training)"></a>訓練模型與校調 (Model Training)</h1><p><img src="/images/data-science101/scikit-learn/scikit-learn-map.png" alt=" 如何使用 Python 學習機器學習（Machine Learning）"></p>
<p>上面是 scikit-learn 提供的演算法 cheat-sheet，當你面對琳琅滿目的模型一開始不知道要選擇什麼的話可以按圖索驥參考，另外這邊提供<a href="http://scikit-learn.org/stable/tutorial/machine_learning_map/index.html">大圖支援連結</a>。</p>
<p>這邊我們參考上圖來選擇適合模型：</p>
<ol>
<li>樣本資料是否大於 50 筆：範例資料集總共有 150 筆資料，大於 50</li>
<li>是否為分類問題：Iris 花朵類別預測是多類別分類問題</li>
<li>是否有標籤好的資料：已經有 label 資料</li>
<li>樣本資料是否小於 100K：資料小於 100K</li>
<li>選擇 Linear SVC 模型（第一個選擇的模型）</li>
<li>是否是文字資料：不是</li>
<li>選擇 KNeighborsClassifier 模型（第二個選擇的模型）</li>
<li>後續優化 &#x2F; SVC &#x2F; Ensemble</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 初始化 LinearSVC 實例</span></span><br><span class="line">lin_clf = LinearSVC()</span><br><span class="line"><span class="comment"># 使用 fit 來建置模型，其參數接收 training data matrix, testing data array，所以進行 y_train.values.ravel() Data Frame 轉換</span></span><br><span class="line">lin_clf.fit(X_train, y_train.values.ravel()) </span><br></pre></td></tr></table></figure>
<pre><code>LinearSVC(C=1.0, class_weight=None, dual=True, fit_intercept=True,
     intercept_scaling=1, loss=&#39;squared_hinge&#39;, max_iter=1000,
     multi_class=&#39;ovr&#39;, penalty=&#39;l2&#39;, random_state=None, tol=0.0001,
     verbose=0)
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 初始化 KNeighborsClassifier 實例</span></span><br><span class="line">knn = KNeighborsClassifier()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 fit 來建置模型，其參數接收 training data matrix, testing data array，所以進行 y_train.values.ravel() 轉換</span></span><br><span class="line">knn.fit(X_train, y_train.values.ravel())</span><br></pre></td></tr></table></figure>

<pre><code>KNeighborsClassifier(algorithm=&#39;auto&#39;, leaf_size=30, metric=&#39;minkowski&#39;,
           metric_params=None, n_jobs=1, n_neighbors=5, p=2,
           weights=&#39;uniform&#39;)
</code></pre>
<h1 id="模型驗證-Model-Predict-Testing"><a href="#模型驗證-Model-Predict-Testing" class="headerlink" title="模型驗證 (Model Predict &amp; Testing)"></a>模型驗證 (Model Predict &amp; Testing)</h1><p><img src="/images/data-science101/scikit-learn/train-test-phase.png" alt=" 如何使用 Python 學習機器學習（Machine Learning）"></p>
<p>監督式學習的分類問題通常會分為訓練模型和驗證模型，這邊我們使用 predict 去產生對應的目標值，此時和正確答案（已經標籤好的目標值）比較可以知道模型預測的正確率。我們可以看到 KNeighborsClassifier 在正確率（accuracy）表現上相對比較好一點（0.98 比 0.93）。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用 X_test 來預測結果</span></span><br><span class="line"><span class="built_in">print</span>(lin_clf.predict(X_test))</span><br></pre></td></tr></table></figure>

<pre><code>[1 1 0 2 1 2 0 1 1 2 2 1 0 2 0 0 2 1 2 0 0 1 2 0 2 1 2 0 0 0 1 0 2 1 1 0 0
 0 1 0 1 2 2 1 1]
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 印出預測準確率</span></span><br><span class="line"><span class="built_in">print</span>(lin_clf.score(X_test, y_test))</span><br></pre></td></tr></table></figure>

<pre><code>0.933333333333
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用 X_test 來預測結果</span></span><br><span class="line"><span class="built_in">print</span>(knn.predict(X_test))</span><br></pre></td></tr></table></figure>

<pre><code>[1 1 0 1 1 2 0 1 1 2 2 1 0 2 0 0 2 1 2 0 0 1 2 0 2 1 2 0 0 0 1 0 1 1 1 0 0
 0 1 0 1 2 2 1 1]
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 印出 testing data 預測標籤機率</span></span><br><span class="line"><span class="built_in">print</span>(knn.predict_proba(X_test))</span><br></pre></td></tr></table></figure>

<pre><code>[[ 0.   1.   0. ]
 [ 0.   1.   0. ]
 [ 1.   0.   0. ]
 [ 0.   0.8  0.2]
 [ 0.   1.   0. ]
 [ 0.   0.   1. ]
 [ 1.   0.   0. ]
 [ 0.   1.   0. ]
 [ 0.   1.   0. ]
 [ 0.   0.   1. ]
 [ 0.   0.   1. ]
 [ 0.   1.   0. ]
 [ 1.   0.   0. ]
 [ 0.   0.   1. ]
 [ 1.   0.   0. ]
 [ 1.   0.   0. ]
 [ 0.   0.   1. ]
 [ 0.   1.   0. ]
 [ 0.   0.   1. ]
 [ 1.   0.   0. ]
 [ 1.   0.   0. ]
 [ 0.   1.   0. ]
 [ 0.   0.   1. ]
 [ 1.   0.   0. ]
 [ 0.   0.2  0.8]
 [ 0.   1.   0. ]
 [ 0.   0.   1. ]
 [ 1.   0.   0. ]
 [ 1.   0.   0. ]
 [ 1.   0.   0. ]
 [ 0.   1.   0. ]
 [ 1.   0.   0. ]
 [ 0.   1.   0. ]
 [ 0.   1.   0. ]
 [ 0.   1.   0. ]
 [ 1.   0.   0. ]
 [ 1.   0.   0. ]
 [ 1.   0.   0. ]
 [ 0.   0.6  0.4]
 [ 1.   0.   0. ]
 [ 0.   1.   0. ]
 [ 0.   0.   1. ]
 [ 0.   0.   1. ]
 [ 0.   1.   0. ]
 [ 0.   1.   0. ]]
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 印出預測準確率</span></span><br><span class="line"><span class="built_in">print</span>(knn.score(X_test, y_test))</span><br></pre></td></tr></table></figure>
<pre><code>0.977777777778
</code></pre>
<h1 id="模型優化-Model-Optimization"><a href="#模型優化-Model-Optimization" class="headerlink" title="模型優化 (Model Optimization)"></a>模型優化 (Model Optimization)</h1><p>由於本文是簡易範例，這邊就沒有示範如何進行模型優化（這邊可以嘗試使用 SVC 和 Ensemble 方法）。不過一般來說在分類模型優化上，讓模型預測表現的更好的方法大約有幾種：</p>
<ol>
<li>特徵工程：選擇更適合特徵值或是更好的資料清理，某種程度上很需要專業知識的協助（domain konwledge）去發現和整合出更好的 feature</li>
<li>調整模型參數：調整模型的參數</li>
<li>模型融合：結合幾個弱分類器結果來變成強的分類器</li>
</ol>
<h1 id="上線運行-Deploy-Model"><a href="#上線運行-Deploy-Model" class="headerlink" title="上線運行 (Deploy Model)"></a>上線運行 (Deploy Model)</h1><p>當模型優化完畢就可以進行上線運行，其中 Python 比 R 更具優勢的地方，那就是 Python 很容易跟現有的系統進行整合，Python 也有許多好用的 Web 框架可以使用，也因為 Python 是膠水語言，若要進行效能優化也可以很容易呼叫 C&#x2F;C++ 進行操作，提昇執行效能。</p>
<h1 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h1><p>以上用一個簡單的範例介紹了 Python 機器學習套件 Scikit Learn 的基本功能和機器學習整個基本 Workflow。由於是基礎範例所以省略一些比較繁瑣的資料處理部分，事實上，真實世界資料大多是非結構化資料的髒資料，而資料分析的過程往往需要花上許多時間進行資料預處理和資料清理上。接下來我們將介紹其他 Python 資料科學和機器學習生態系和相關工具。</p>
<h1 id="延伸閱讀"><a href="#延伸閱讀" class="headerlink" title="延伸閱讀"></a>延伸閱讀</h1><ol>
<li><a href="https://zhuanlan.zhihu.com/p/23191325">机器学习实战 之 kNN 分类</a></li>
<li><a href="http://www.chengweihuang.com/machine-learning-workflow.html">Machine Learning Workflow</a></li>
<li><a href="https://www.leiphone.com/news/201709/zYIOJqMzR0mJARzj.html">Kaggle机器学习之模型融合（stacking）心得</a></li>
<li><a href="https://www.kaggle.com/benhamner/d/uciml/iris/python-data-visualizations">Python 資料視覺化</a></li>
<li><a href="http://insidebigdata.com/wp-content/uploads/2016/06/MathWorks1.jpg">Train &amp; Predict workflow</a></li>
<li><a href="http://www.nd.com/wp-content/uploads/2016/12/classification-pipeline-1.png">Sample Classification Pipeline workflow</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/25836678">【机器学习】模型融合方法概述</a></li>
</ol>
<p>（image via <a href="https://cdn-images-1.medium.com/max/2000/1*KzmIUYPmxgEHhXX7SlbP4w.jpeg">medium</a>、<a href="https://mapr.com/blog/predicting-breast-cancer-using-apache-spark-machine-learning-logistic-regression/assets/blogimages/bcmlprocess.png">mapr</a>、<a href="https://silvrback.s3.amazonaws.com/uploads/408cfbbb-9e9b-4590-9501-9b2775f0d9c9/ml_pipeline_large.png">silvrback</a>、<a href="https://camo.githubusercontent.com/a560481c1c29e98437016be493a236cb826c757d/687474703a2f2f312e62702e626c6f6773706f742e636f6d2f2d4d45323465507a707a494d2f55514c57547775726658492f4141414141414141414e772f573345455449726f4138302f73313630302f64726f705f736861646f77735f6261636b67726f756e642e706e67">camo</a>、<a href="http://www.scipy-lectures.org/_images/scikit-learn-logo.png">scipy</a>、<a href="http://mirlab.org/jang/books/dcpr/image/iris.gif">mirlab</a>、<a href="http://articles.concreteinteractive.com/wp-content/uploads/2015/03/irises.png">concreteinteractive</a>、<a href="http://hgtvhome.sndimg.com/content/dam/images/grdn/fullset/2014/2/5/0/12-waltersgardens-hi14643-irisautumn-circus.jpg.rend.hgtvcom.1280.853.suffix/1452644697576.jpeg">sndimg</a>）</p>
]]></content>
      <tags>
        <tag>Python</tag>
        <tag>Machine Learning</tag>
        <tag>機器學習</tag>
        <tag>AI</tag>
        <tag>Artificial Intelligence</tag>
        <tag>NLP</tag>
        <tag>Data Mining</tag>
        <tag>人工智慧</tag>
        <tag>監督式學習</tag>
        <tag>Supervised learning</tag>
        <tag>從零開始學資料科學</tag>
        <tag>Numpy</tag>
        <tag>資料科學</tag>
        <tag>data science</tag>
        <tag>data scientist</tag>
        <tag>pandas</tag>
        <tag>scikit-learn</tag>
      </tags>
  </entry>
  <entry>
    <title>用 Python 自學資料科學與機器學習入門實戰：入門導論</title>
    <url>/2017/10/07/python-data-science-and-machine-learning-tutorial-introduction/</url>
    <content><![CDATA[<p><img src="/images/data-science101/intro/machine_learning.jpg" alt=" 如何使用 Python 學習機器學習（Machine Learning）"></p>
<p>隨著資料科學（Data Science）技術的興起，<a href="https://en.wikipedia.org/wiki/Artificial_intelligence">人工智慧（Artificial Intelligence）</a>、<a href="https://en.wikipedia.org/wiki/Machine_learning">機器學習（Machine Learning）</a> 成為近幾年來電腦科學界十分熱門的研究領域，如今在實體和線上的學習機器學習的資源有很多，本文整理了一些好用學習資源希望幫助初學者能更容易使用 Python 入門機器學習的領域中，從零開始學習機器學習。若是對於資料科學不熟悉的讀者可以先參考<a href="https://azure.microsoft.com/zh-tw/documentation/articles/machine-learning-data-science-for-beginners-the-5-questions-data-science-answers/">適用於初學者的資料科學影片</a> ，讓自己對於資料科學有初步的認識。</p>
<p><img src="/images/data-science101/intro/ai-history.png" alt=" 如何使用 Python 學習機器學習（Machine Learning）"></p>
<h1 id="人工智慧的發展"><a href="#人工智慧的發展" class="headerlink" title="人工智慧的發展"></a>人工智慧的發展</h1><p><a href="https://en.wikipedia.org/wiki/Artificial_intelligence">「人工智慧」（Artificial Intelligence）</a>這專有名稱正式出現在西元 1956 年，在美國達特茅斯學院 (Dartmouth College）召開的第一次人工智慧會議。根據維基百科的定義，人工智慧係指由機器所展現的智慧，一般而言人工智慧又分為「強人工智慧」（Strong AI）和「弱人工智慧」（Weak AI） 兩種不同的主張。所謂的強人工智慧指的是有自我意識、有知覺可以自己推理和解決問題的機器智慧，而「弱人工智慧」只能模擬人類的思維與行為表現，但缺乏真正的推理與解決問題的能力，也不具有自主意識。人工智慧在歷史上經歷了幾次熱潮和寒冬，從最早的邏輯推理到後來的專家系統，再到目前的機器學習&#x2F;深度學習，機器學習可以視為人工智慧的一個實現方式或是發展的一個歷程。</p>
<p>事實上，人工智慧或是機器學習都是一門跨領域的學門，牽涉了電腦科學、數學、神經學、心理學、經濟學、統計學等層面，也有許多相關的學門：</p>
<p><img src="/images/data-science101/intro/ai-ml-dm.png" alt=" 如何使用 Python 學習機器學習（Machine Learning）"></p>
<p>隨著運算資源（雲端運算、GPU 等）、海量資料（目前還有許多資料還沒被創造，等待我們去發掘呢）以及機器學習&#x2F;深度學習的發展，生活上許多產品已經可以看到人工智慧的應用。但人工智慧最美好的境界莫過於人機之間的互動以及相輔相成，以 AlphaGO 為例，雖然人類在圍棋領域輸給人機器，但也從機器的思考方式去重新思考了圍棋的真諦和有別於人類的思考方式。</p>
<blockquote>
<blockquote>
<p>「就因為某樣東西思考的方式跟你不一樣，就代表它沒在思考嗎？」 “Just because something thinks differently from you, does it mean it’s not thinking?” —《模仿遊戲》《Imitation Game》(2015)</p>
</blockquote>
</blockquote>
<p><img src="/images/data-science101/intro/ai-plus.png" alt=" 如何使用 Python 學習機器學習（Machine Learning）"></p>
<h1 id="什麼是機器學習（Machine-Learning）？"><a href="#什麼是機器學習（Machine-Learning）？" class="headerlink" title="什麼是機器學習（Machine Learning）？"></a>什麼是機器學習（Machine Learning）？</h1><p>機器學習是一種資料科學的技術也是一種實現人工智慧的一種方式，協助電腦從現有的資料學習，以便預測未來的行為、結果和趨勢。根據學習的方式又可以分為需要解答的<a href="https://en.wikipedia.org/wiki/Supervised_learning">監督式學習（Supervised learning）</a>、<a href="https://en.wikipedia.org/wiki/Unsupervised_learning">非監督式學習（Unsupervised learning）</a>和<a href="https://en.wikipedia.org/wiki/Reinforcement_learning">增強學習（Reinforcement learning）</a>等（還有一種混合式的半監督式學習）等子類別。機器學習技術可以應用的範圍十分廣泛，總的來說機器學習可以解決以下幾種問題：</p>
<ol>
<li><p>分類問題：這是 A 類 或 B 類嗎？</p>
</li>
<li><p>異常值判斷：這很奇怪嗎？</p>
</li>
<li><p>預測性分析：有多少？</p>
</li>
<li><p>分群問題：這是如何組織的？</p>
</li>
<li><p>增強學習協助決策：我接下來該怎麼辦？</p>
</li>
</ol>
<p>當我們蒐集到相關、精確、連貫、足夠資料就可以挑選合適的演算法進行模型的的建置。</p>
<h1 id="為什麼選擇-Python？"><a href="#為什麼選擇-Python？" class="headerlink" title="為什麼選擇 Python？"></a>為什麼選擇 Python？</h1><p>在資料科學和機器學習領域最重要的兩大程式語言就是 Python 和 R，Python 簡潔易學、應用範圍廣（不限於數據分析）且學習曲線平緩，適合作為第一個入門的程式語言，透過 pandas、SciPy&#x2F;NumPy、sckikit-learn、matplotlib 和 statsmodels 可以進行數據分析的工作，適合工程任務和需要和網路應用程式整合的專案。至於 R 由於是統計學家開發的程式語言，則是擅長於統計分析、圖表繪製，常用於學術研究領域，建議也要有一定程度的掌握。一般情況下 Python 和 R 並非互斥，而是互補，許多資料工程師、科學家往往是在 Python 和 R 兩個語言中轉換，小量模型驗證、統計分析和圖表繪製使用 R，當要撰寫演算法和資料庫、網路服務互動等情況時在移轉到 Python。為了降低學習成本。</p>
<p>此外 Python 本身是一種通用語言，除了資料科學外也可以廣泛使用在網路開發、網站建置、遊戲開發、網路爬蟲等領域，當你需要整合系統產品服務時，可以擔任一站式的開發語言，更重要的是 Python 也可以當成膠水語言非常輕易和 C&#x2F;C++ 等效能較佳的語言整合。簡而言之，Python 是一種簡潔易學但功能強大，值得投資的程式語言，所以我們這邊先使用 Python 進行介紹。</p>
<p>若對於 Python 和 R 比較，這邊有兩篇文章可以參考 <a href="http://bi.dataguru.cn/article-7257-1.html">数据科学界华山论剑：R与Python巅峰对决</a>、<a href="https://www.quora.com/Which-is-better-for-data-analysis-R-or-Python">Which is better for data analysis: R or Python?</a>。</p>
<h1 id="如何開始入門機器學習？"><a href="#如何開始入門機器學習？" class="headerlink" title="如何開始入門機器學習？"></a>如何開始入門機器學習？</h1><p>事實上，資料科學是個跨領域學門，在學習如何使用 Python 進行機器學習過程中通常必須掌握以下知識：</p>
<ul>
<li>機器學習演算法</li>
<li>Python 程式語言和資料分析函式庫</li>
<li>線性代數&#x2F;統計學等相關學門</li>
<li>專業領域的領域知識（Domain Knowledge）</li>
</ul>
<p>為了掌握以上三大領域知識（我們先把焦點放在機器學習核心技法，暫時忽略資料科學中對於領域知識的掌握），具體來說我們可以有以下步驟可以參考：</p>
<ol>
<li><p>掌握基礎 Python 程式語言知識</p>
<p> 線上學習資源：</p>
<ul>
<li><a href="https://www.codecademy.com/learn/python">Codecademy</a></li>
<li><a href="https://www.datacamp.com/">DataCamp</a> （也可以學 R）</li>
<li><a href="https://learnxinyminutes.com/docs/python/">Learn X in Y Minutes (X &#x3D; Python)</a></li>
<li><a href="https://learnpythonthehardway.org/book/">Learn Python the Hard Way</a></li>
</ul>
</li>
<li><p>了解基礎數學&#x2F;統計學和機器學習基礎知識</p>
<ul>
<li><p><a href="https://www.khanacademy.org/math/algebra">可汗學院線性代數</a></p>
</li>
<li><p><a href="https://www.udacity.com/course/intro-to-descriptive-statistics--ud827">Intro to Descriptive Statistics</a></p>
</li>
<li><p><a href="https://www.udacity.com/course/intro-to-inferential-statistics--ud201">Intro to Inferential Statistics</a>	</p>
</li>
<li><p><a href="https://www.coursera.org/learn/machine-learning">Andrew Ng 機器學習課程</a></p>
</li>
<li><p><a href="http://www.holehouse.org/mlclass/">Andrew Ng 機器學習筆記</a></p>
</li>
<li><p><a href="http://www.cs.cmu.edu/~ninamf/courses/601sp15/lectures.shtml">Carnegie Mellon University Machine Learning</a></p>
</li>
<li><p><a href="https://www.youtube.com/playlist?list=PLXVfgk9fNX2I7tB6oIINGBmW50rrmFTqf">Machine Learning Foundations (機器學習基石)</a></p>
</li>
</ul>
</li>
<li><p>知道如何使用 Python 科學計算函式庫和套件</p>
<p> 推薦安裝 <a href="https://docs.continuum.io/anaconda/install">Anaconda</a>，支援跨平台多種版本 Python，預設將數據分析、科學計算的套件裝好，自帶 spyder 編輯器、Jupyter Notebook（IPython Notebook），可以提供一個網頁版介面，讓使用者可以透過瀏覽器進行 Julia、Python 或 R 程式的開發與維護。</p>
<ul>
<li>numpy：科學分析，<a href="http://www.scipy-lectures.org/">Scipy Lecture Notes 教學文件</a></li>
<li>pandas：資料分析</li>
<li>matplotlib：會製圖瞟</li>
<li>scikit-learn：機器學習工具</li>
</ul>
</li>
<li><p>使用 scikit-learn 學習 Python 機器學習應用</p>
<ul>
<li><a href="https://www.gitbook.com/book/htygithub/machine-learning-python">Machine Learning: Python 機器學習：使­用Pytho­n</a></li>
</ul>
</li>
<li><p>運用 Python 實作機器學習演算法</p>
<ul>
<li>感知器</li>
<li>決策樹</li>
<li>線性迴歸</li>
<li>k-means 分群</li>
</ul>
</li>
<li><p>實作進階機器學習演算法</p>
<ul>
<li>SVM</li>
<li>KNN</li>
<li>Random Forests</li>
<li>降低維度</li>
<li>驗證模型</li>
</ul>
</li>
<li><p>了解深度學習（Deep Learning）在 Python 的實作和應用</p>
<ul>
<li><a href="https://www.csie.ntu.edu.tw/~yvchen/f105-adl/index.html">NTU Applied Deep Learning</a></li>
<li><a href="http://deeplearning.stanford.edu/tutorial/">Stanford Deep Learning</a></li>
<li><a href="https://dt42.github.io/2016/04/27/deep-learning-material-recommendations/">深度學習(Deep Learning)自學素材推薦</a></li>
<li><a href="http://www.jerrynest.com/deep-learning-resource/">深度學習 Deep Learning：中文學習資源整理</a></li>
</ul>
</li>
</ol>
<h1 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h1><p>以上整理了一些機器學習網路學習資源，若你累積一些小小經驗後，不妨挑戰一下 <a href="https://www.kaggle.com/">Kaggle</a> 或是 <a href="http://www.kdd.org/kdd2017/">KDD</a> 測試一下自己的實力並累積更多數據分析的經驗。</p>
<h1 id="延伸閱讀"><a href="#延伸閱讀" class="headerlink" title="延伸閱讀"></a>延伸閱讀</h1><ol>
<li><a href="http://www.kdnuggets.com/2015/11/seven-steps-machine-learning-python.html">7 Steps to Mastering Machine Learning With Python</a></li>
<li><a href="https://buzzorange.com/techorange/2016/02/02/plan-to-be-a-data-scientist-in-new-year/">人人都可成為資料科學大師！一整年的網路自學清單就在這了</a></li>
<li><a href="https://www.analyticsvidhya.com/">Analytics Vidhya</a></li>
<li><a href="http://datasci.tw/">台灣資料科學年會</a></li>
<li><a href="http://dataology.blogspot.tw/">「2016 台灣資料科學愛好者年會」精彩資料總整理(持續更新中)</a></li>
<li><a href="http://www.bnext.com.tw/article/view/id/40220">大數據會消失，資料科學不會！你該知道的資料科學第一堂課</a></li>
<li><a href="https://azure.microsoft.com/zh-tw/documentation/articles/machine-learning-algorithm-choice/">如何選擇 Microsoft Azure Machine Learning 的演算法</a></li>
<li><a href="https://azure.microsoft.com/zh-tw/documentation/services/machine-learning/">Microsoft Azure Machine Learning 機器學習服務文件</a></li>
<li><a href="http://www.kdnuggets.com/">Kdnuggets</a></li>
<li><a href="http://www.bigdatafinance.tw/">Bigdatafinance</a></li>
<li><a href="http://www.kdnuggets.com/2015/12/using-python-r-together.html">Using Python and R together: 3 main approaches</a></li>
<li><a href="http://blog.csdn.net/shadow_mi/article/details/51829389">机器学习最佳入门学习资源</a></li>
<li><a href="https://github.com/ty4z2008/Qix/blob/master/dl.md">机器学习(Machine Learning)&amp;深度学习(Deep Learning)资料(Chapter 1)</a></li>
<li><a href="https://www.udacity.com/course/deep-learning-nanodegree-foundation--nd101">SIRAJ RAVAL’S DEEP LEARNING</a></li>
</ol>
<p>（image via <a href="http://respondr.io/wp-content/uploads/2016/03/machine_learning-1024x724.jpg">respondr</a>）</p>
]]></content>
      <tags>
        <tag>Python</tag>
        <tag>Machine Learning</tag>
        <tag>機器學習</tag>
        <tag>AI</tag>
        <tag>Artificial Intelligence</tag>
        <tag>NLP</tag>
        <tag>Data Mining</tag>
        <tag>人工智慧</tag>
        <tag>監督式學習</tag>
        <tag>Supervised learning</tag>
        <tag>從零開始學資料科學</tag>
        <tag>Numpy</tag>
        <tag>資料科學</tag>
        <tag>data science</tag>
        <tag>data scientist</tag>
        <tag>pandas</tag>
        <tag>scikit-learn</tag>
      </tags>
  </entry>
  <entry>
    <title>Python Web Flask 實戰開發教學 - 簡介與環境建置</title>
    <url>/2017/05/01/python-web-flask101-tutorial-introduction-and-environment-setup/</url>
    <content><![CDATA[<p><img src="/images/flask101/python-logo.png" alt="Python Web Flask 實戰開發教學 - 簡介與環境建置"> </p>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Web 開發涉及層面很廣，包含了前後端開發、資料庫優化、平行處理、負載平衡、高可用性、資訊安全、雲端伺服器部屬等議題，本系列文章將透過介紹 Python Web Flask 實戰開發來學習現代化網站開發的方方面面。一開始先從簡介和環境建置開始吧！</p>
<h1 id="什麼是-Python？"><a href="#什麼是-Python？" class="headerlink" title="什麼是 Python？"></a>什麼是 Python？</h1><p><a href="https://zh.wikipedia.org/wiki/Python">Python</a> 是一種物件導向、直譯式的跨平台電腦程式語言，它包含了一組功能完備的標準庫和豐富套件生態系，可以輕鬆完成很多常見的任務（例如：讀寫檔案、自然語言處理、網路爬蟲、網站開發、機器學習等），因為它可以很輕易整合其他底層語言（例如：C&#x2F;C++ 等），所以又稱為膠水語言。它的語法簡單，與其它大多數程式設計語言使用大括弧不一樣，它使用空白縮進來定義語句塊。由於具備簡潔易學等特性，許多開發者推薦 Python 為初學者第一個學習的程式語言。由於版本更迭，我們接下來討論的主要是以 Python3 為主，若電腦沒有安裝的話，你可以在<a href="https://www.python.org/">官方網站下載</a>，若你不是安裝 <a href="https://www.continuum.io/downloads">Anaconda</a> 這個 all-in-one 版本的話（自帶許多套件和科學運算工具，也可以建立虛擬開發環境），記得要安裝 <a href="https://pypi.python.org/pypi/pip">pip</a>、<a href="https://ipython.org/">IPython</a>。 </p>
<p>接下來我們將以 Anaconda 這個開發環境為主要講解環境。由於我們假定讀者已經有一些 Python 基礎，所以我們會跳過有關 Python 語法的基本較邵，若您對於 Python 入門基礎較不熟悉的話建議參考 <a href="/2016/12/31/python101-tutorial/">Python 101 快速入門教學</a> ，此外我們也提供了 <a href="http://pics.ee/c34g">Python Web 程式設計入門實戰線上課程</a> 可以參考。那就讓我們開始吧！</p>
<h1 id="什麼是-Flask？"><a href="#什麼是-Flask？" class="headerlink" title="什麼是 Flask？"></a>什麼是 Flask？</h1><p><img src="/images/flask101/flask-index.png" alt="Python Web Flask 實戰開發教學 - 簡介與環境建置"> </p>
<p><a href="http://flask.pocoo.org/">Flask</a> 是一個使用 Python 撰寫的輕量級 Web 應用程式框架，由於其輕量特性，也稱為 micro-framework（微框架）。Flask 核心十分簡單，主要是由 <a href="http://werkzeug.pocoo.org/">Werkzeug WSGI 工具箱</a>和 <a href="http://jinja.pocoo.org/docs/2.9/">Jinja2 模板引擎</a>所組成，Flask 和 Django 不同的地方在於 Flask 給予開發者非常大的彈性（當然你也可以說是需要思考更多事情），可以選用不同的用的 extension 來增加其功能。相比之下，Django 雖然完善但技術選擇相對不彈性，不論是 ORM、表單驗證或是模版引擎都有自己的作法。事實上沒有最好的框架，只有合適的使用情境，Django 相比之下適合需要快速的開發大型的應用程式，和 Ruby 中的 <a href="http://rubyonrails.org/">Ruby on Rails</a> 相似，而 Flask 則是相對輕量彈性，更像是 Ruby 界的 <a href="http://www.sinatrarb.com/">Sinatra</a>。若讀者想先體驗看看 Flask 的程式狀況，以下是 Flask 簡易運行的程式，啟動測試伺服器後，可以在瀏覽器中（<a href="http://localhost:5000/%EF%BC%89%E5%8D%B0%E5%87%BA">http://localhost:5000/）印出</a> <code>Hello World!</code>。</p>
<figure class="highlight python"><figcaption><span>index.py</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Hello World!&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure>

<h1 id="Python-Web-開發環境建置"><a href="#Python-Web-開發環境建置" class="headerlink" title="Python Web 開發環境建置"></a>Python Web 開發環境建置</h1><p>所謂工欲善其事，必先利其器，要開發好的應用程式必須先準備好開發環境才行。以下介紹我們在接下來開發 Python Flask Web 應用程式所需要安裝的開發環境工具（以下以 Mac OS 等 Unix-like 作業系統為示範，若是 Windows 使用者建議安裝 Virtualbox 並運行 Linux Ubuntu 作業系統，<a href="http://blog.xuite.net/yh96301/blog/432341564-VirtualBox+5.1%E5%AE%89%E8%A3%9DUbuntu+16.04">參考安裝文件</a>）：</p>
<ol>
<li><p>Microsoft VSCode 編輯器<br> Microsoft VSCode 是 Microsoft 推出的編輯器（非整合開發環境 IDE），夾帶著 Microsoft 過去打造 Visual studio 整合開發環境的豐富經驗，相比 Sublime Text 和其他編輯器，VSCode 的優勢在於開源且活躍的開發社群、內建 debugger 框架、原生 Git 整合、套件整合容易等特性。所以對於初學者來說 VSCode 是一個蠻適合入門的開發環境。它的安裝方式也十分簡易，在官網下載後按照指示安裝完成即可。</p>
<p> <img src="/images/flask101/vscode-index.png" alt="Python Web Flask 實戰開發教學 - 簡介與環境建置"> </p>
<p> 我們可以安裝 Python 語法和格式檢查的相關 Python 套件幫助除錯：</p>
<p> <img src="/images/flask101/vscode-python.png" alt="Python Web Flask 實戰開發教學 - 簡介與環境建置"> </p>
</li>
<li><p>終端機環境（iTterm&#x2F;內建 terminal）<br> terminal（終端機）是我們下指令的地方，許多時候我們進行程式開發時不會使用 GUI 的介面而是使用下指令方式請電腦做相對應的行為。在 Linux 和 Mac 裡面都有內建的 terminal 的應用程式，若你是 Mac 用戶想使用更便利的工具（分割視窗、熱鍵、搜尋、自動補完等）可以額外安裝 <a href="https://www.iterm2.com/index.html">iterm2</a> 做使用。</p>
<p> <img src="/images/flask101/iterm2.png" alt="Python Web Flask 實戰開發教學 - 簡介與環境建置"> </p>
<p> 下指令（$ 為提示字元，不用輸入）：</p>
<p> <img src="/images/flask101/iterm2-example.png" alt="Python Web Flask 實戰開發教學 - 簡介與環境建置"> </p>
<p> 對於有志於從事程式開發相關工作的讀者建議可以多熟悉指令碼的輸入，更多指令碼可以參考鳥哥撰寫的 <a href="http://linux.vbird.org/linux_basic/redhat6.1/linux_06command.php">Linux 基本指令介紹</a> 和 <a href="http://www.linux.org.tw/resource.html">Linux 學習資源</a>。</p>
</li>
<li><p>Git 版本控制系統&#x2F;註冊 GitHub 帳戶<br> Git 是一種分散式版本控制系統，可以讓我們可以更方便地管理我們的程式碼。在網路上有非常多優秀的 Git 教學文件（<a href="https://backlogtool.com/git-guide/tw/">連猴子都能懂的Git入門指南</a>、<a href="https://www.slideshare.net/littlebtc/git-5528339">寫給大家的 Git 教學</a>、<a href="https://www.slideshare.net/lkiral/git-34157836">初心者 Git 上手攻略</a>）。安裝 Git 方式是到官網下載軟體，依照指示安裝。</p>
<p> <img src="/images/flask101/git-index.png" alt="Python Web Flask 實戰開發教學 - 簡介與環境建置"> </p>
<p> 互動式語法學習：</p>
<p> <img src="/images/flask101/try-git.png" alt="Python Web Flask 實戰開發教學 - 簡介與環境建置"> </p>
<p> 在介紹完 git 之後我們來了解一下 GitHub。GitHub 是一個可以存放 git 程式碼專案的平台，透過 GitHub 我們可以接觸到最新的開放原始碼資訊，也可以將我們的程式碼開源出來。</p>
<p> <img src="/images/flask101/github-index.png" alt="Python Web Flask 實戰開發教學 - 簡介與環境建置"> </p>
<p> 從 GitHub 上複製程式碼</p>
<p> <img src="/images/flask101/github-clone.png" alt="Python Web Flask 實戰開發教學 - 簡介與環境建置"> </p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 複製一份到本地端</span><br><span class="line">$ git clone https://github.com/kdchang/flask101.git</span><br><span class="line"># 移動到資料夾</span><br><span class="line">$ cd flask101</span><br></pre></td></tr></table></figure>

<p> 常見 Git 指令：</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 初始化專案</span><br><span class="line">$ git init</span><br><span class="line"># 查看狀態</span><br><span class="line">$ git status</span><br><span class="line"># 檢查差異</span><br><span class="line">$ git diff </span><br><span class="line"># 將變更檔案放入暫存區</span><br><span class="line">$ git add index.py</span><br><span class="line"># 使用 commit -m 提交變更</span><br><span class="line">$ git -a -m &#x27;init commit&#x27;</span><br><span class="line"># 查看歷史</span><br><span class="line">$ git log</span><br><span class="line"># 放棄已經 commit 的檔案重回暫存區</span><br><span class="line">$ git reset HEAD index.py</span><br><span class="line"># 放棄檔案變更</span><br><span class="line">$ git checkout index.py</span><br></pre></td></tr></table></figure>
</li>
<li><p>Anaconda Python3 版本<br> Anaconda 是一個 all-in-one 的 Python 開發環境，對於初學者來說是個十分合適的開發環境包。Anaconda 具備了幾項特點：</p>
<ul>
<li>便於安裝許多流行的科學、數學、工程、數據分析的 Python 模組  </li>
<li>開源和免費</li>
<li>跨平台支持：Linux、Windows、Mac</li>
<li>支持 Python 版本切換，方便建立不同的虛擬開發環境</li>
<li>內建 Spyder 編輯器和 Jupyter Notebook 環境</li>
</ul>
<p> 安裝流程也十分簡單，進入 Anaconda 首頁，選擇對應作業系統（這邊使用 Mac OS）：<br> <img src="/images/flask101/anaconda-index.png" alt="Python Web Flask 實戰開發教學 - 簡介與環境建置"></p>
<p> 選擇對應 Python 版本下載，我們使用 Graphical Installer（圖像介面安裝方式），接著在下載完成時按照預設的安裝方式完成安裝；<br> <img src="/images/flask101/anaconda-install.png" alt="Python Web Flask 實戰開發教學 - 簡介與環境建置"> </p>
<p> 若是完整安裝成功，可以打開終端機輸入，若是顯示 Python 3.6.0 :: Anaconda 4.3.0 (x86_64) 版本號即安裝成功：</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ python -V</span><br><span class="line">Python 3.6.0 :: Anaconda 4.3.0 (x86_64)</span><br></pre></td></tr></table></figure>

<p> 接著要建立我們專案虛擬環境，這樣在安裝操作套件時比較不容易被污染到 root 的環境，啟動後會出現（套件名稱）的提示字元：</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 顯示目前虛擬環境列表</span><br><span class="line">$ conda info -e </span><br><span class="line"># 創建虛擬環境</span><br><span class="line">$ conda create -n 套件名稱 python=3.6</span><br><span class="line"># 進入虛擬環境（若是 Windows cmder 環境不用加 source） ，成功後提示字元變成：（套件名稱）$</span><br><span class="line">$ source activate 套件名稱</span><br><span class="line"># 離開虛擬環境（若是 Windows cmder 環境不用加 source） </span><br><span class="line">$ source deactivate </span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="建立第一個-Flask-開發專案"><a href="#建立第一個-Flask-開發專案" class="headerlink" title="建立第一個 Flask 開發專案"></a>建立第一個 Flask 開發專案</h1><h2 id="使用-pip-管理-Python-模組"><a href="#使用-pip-管理-Python-模組" class="headerlink" title="使用 pip 管理 Python 模組"></a>使用 pip 管理 Python 模組</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 安裝模組</span><br><span class="line">$ pip install 模組名</span><br><span class="line"># 移除模組</span><br><span class="line">$ pip uninstall 模組名</span><br><span class="line"># 搜尋模組</span><br><span class="line">$ pip search 模組名</span><br></pre></td></tr></table></figure>

<p>通常開發專案時我們會將已安裝模組名稱和版本號存成一個列表，以便下次安裝使用：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ pip freeze &gt; requirements.txt</span><br></pre></td></tr></table></figure>

<p>根據 <code>requirements.txt</code> 列表安裝模組：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ pip install -r requirements.txt</span><br></pre></td></tr></table></figure>

<h2 id="建立虛擬環境"><a href="#建立虛擬環境" class="headerlink" title="建立虛擬環境"></a>建立虛擬環境</h2><p>在了解 pip 套件管理工具後我們正式來建立一個 Flask 的專案：</p>
<p>建立專案資料夾</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ mkdir python-flask-todo-app</span><br><span class="line">$ cd python-flask-todo-app</span><br></pre></td></tr></table></figure>

<p>建立獨立虛擬環境</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ conda create -n python-flask-todo-app python=3.6</span><br><span class="line">$ source activate python-flask-todo-app</span><br></pre></td></tr></table></figure>

<p>安裝 Flask 模組</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ pip install flask</span><br></pre></td></tr></table></figure>

<h2 id="設定-Config-設定檔案"><a href="#設定-Config-設定檔案" class="headerlink" title="設定 Config 設定檔案"></a>設定 Config 設定檔案</h2><p>建立設定檔 <code>config.py</code> 檔案在專案資料夾的根目錄中：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Config</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ProdConfig</span>(<span class="title class_ inherited__">Config</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DevConfig</span>(<span class="title class_ inherited__">Config</span>):</span><br><span class="line">    DEBUG = <span class="literal">True</span></span><br></pre></td></tr></table></figure>

<p>建立一個 <code>main.py</code> 檔案初始化 Flask App 和使用其 API，若是一切正常在終端機執行 <code>python main.py</code> 會在瀏覽器網址列輸入 <code>localhost:5000</code> 後看到 <code>Hello World</code> 了！</p>
<figure class="highlight python"><figcaption><span>main.py</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> config <span class="keyword">import</span> DevConfig</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化 Flask 類別成為 instance</span></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.config.from_object(DevConfig)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 路由和處理函式配對</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Hello World!&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 判斷自己執行非被當做引入的模組，因為 __name__ 這變數若被當做模組引入使用就不會是 __main__</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure>

<h2 id="使用-Flask-Script"><a href="#使用-Flask-Script" class="headerlink" title="使用 Flask Script"></a>使用 Flask Script</h2><p><a href="https://flask-script.readthedocs.io/en/latest/">Flask Script</a> 是 Flask 常用的 extensions，可以讓我們使用指令列來操作 Flask 程式並在 shell 環境下操作 app context，使用方式如下：</p>
<p>安裝模組</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ pip install flask-script</span><br></pre></td></tr></table></figure>

<p>建立 <code>manage.py</code> 於根目錄</p>
<figure class="highlight python"><figcaption><span>manage.py</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask_script <span class="keyword">import</span> Manager, Server</span><br><span class="line"><span class="keyword">from</span> main <span class="keyword">import</span> app</span><br><span class="line"></span><br><span class="line"><span class="comment"># 設定你的 app</span></span><br><span class="line">manager = Manager(app)</span><br><span class="line"><span class="comment"># 設定 python manage.py runserver 為啟動 server 指令</span></span><br><span class="line">manager.add_command(<span class="string">&#x27;runserver&#x27;</span>, Server())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 設定 python manage.py shell 為啟動互動式指令 shell 的指令 </span></span><br><span class="line"><span class="meta">@manager.shell</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">make_shell_context</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">dict</span>(app=app)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    manager.run()</span><br></pre></td></tr></table></figure>

<p>當執行 <code>$ python manage.py runserver</code> 即會執行測試伺服器，<code>$ python manage.py shell</code> 可以在對話指令列中中輸入 <code>app</code> 找到被引入的 <code>&lt;Flask &#39;main&#39;&gt;</code>，可以讓我們在互動式指令對話框中測試操作使用。</p>
<h1 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h1><p>本文介紹了如何建置 Python Web 開發環境，我們也實際完成了我們第一個 Python Flask 程式。在接下來章節中我們將持續介紹 Python Web Flask 實戰開發，並學習現代化網站開發的方方面面。</p>
<h1 id="延伸閱讀"><a href="#延伸閱讀" class="headerlink" title="延伸閱讀"></a>延伸閱讀</h1><ol>
<li><a href="https://en.wikipedia.org/wiki/Flask_(web_framework)">Wiki Flask (web framework)</a></li>
<li><a href="http://pics.ee/c34g">Python Web 程式設計入門實戰線上課程</a></li>
</ol>
<p>（image via <a href="https://cdn.fedoramagazine.org/wp-content/uploads/2015/11/Python_logo.png">fedoramagazine</a>）</p>
]]></content>
      <tags>
        <tag>Python</tag>
        <tag>教學</tag>
        <tag>Django</tag>
        <tag>MVC</tag>
        <tag>Web</tag>
        <tag>MTV</tag>
        <tag>Web Backend</tag>
        <tag>Web Framework</tag>
        <tag>Flask</tag>
        <tag>框架</tag>
        <tag>網站開發</tag>
        <tag>Anaconda</tag>
      </tags>
  </entry>
  <entry>
    <title>Python Web Flask 實戰開發教學 - SQLAlchemy 與 ORM</title>
    <url>/2017/05/02/python-web-flask101-tutorial-sqlalchemy-orm-database-models/</url>
    <content><![CDATA[<p><img src="/images/flask101/python-logo.png" alt="Python Web Flask 實戰開發教學"> </p>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Web 開發涉及層面很廣，包含了前後端開發、資料庫優化、平行處理、負載平衡、高可用性、資訊安全、雲端伺服器部屬等議題，本系列文章將透過介紹 Python Web Flask 實戰開發來學習現代化網站開發的方方面面。上一篇我們完成了環境建置，這一單元我們將進入 MVC 架構的 Models 部分並學習如何使用 SQLAlchemy 建立和資料庫互動的 ORM 機制。</p>
<p><img src="/images/flask101/mvc_role_diagram.png" alt="Python Web Flask 實戰開發教學"> </p>
<h1 id="什麼是-MVC？"><a href="#什麼是-MVC？" class="headerlink" title="什麼是 MVC？"></a>什麼是 MVC？</h1><p>MVC 模式（Model–view–controller）是軟體工程中的一種軟體架構模式，把軟體系統分為三個基本部分：模型（Model）、視圖（View）和控制器（Controller）。</p>
<ul>
<li>控制器（Controller）- 對 Request&#x2F;Response 進行處理並透過 Controller 把 Model 的資料串接到 View（Templates）。 </li>
<li>視圖（View） - 直接面對使用者的使用者介面設計。</li>
<li>模型（Model） - 負責和資料庫互動，儲存資料。</li>
</ul>
<p>使用 MVC 的好處在於可以用更高階的角度去思考整個程式架構提高程式可重用性和降低程式耦合性。 事實上 Django、Rails 和 ASP.NET MVC 等較成熟的 Web 框架也是參考 MVC 的架構去設計。</p>
<h1 id="什麼是關聯式資料庫（RDB）？"><a href="#什麼是關聯式資料庫（RDB）？" class="headerlink" title="什麼是關聯式資料庫（RDB）？"></a>什麼是關聯式資料庫（RDB）？</h1><p>Database 資料庫一個資料儲存的集合，方便我們去讀取新增刪除修改，而 Relational Database（關聯式資料庫）廣泛應用資料庫應用程式中，它把資料儲存在行列表格中，有可能不同資料表的內容會彼此依賴關聯。常見的關聯式資料庫，例如：MySQL、Postgres、Oracle、MSSSQL、SQLite，本文我們將使用 SQLite 這個輕量級的關聯式資料庫來當做範例教學。</p>
<h1 id="什麼是-ORM？"><a href="#什麼是-ORM？" class="headerlink" title="什麼是 ORM？"></a>什麼是 ORM？</h1><p>ORM 指的是 Object Relational Mapping（物件關聯對應），是一種程式設計技術，用於實現物件導向程式語言裡不同類型系統的資料之間的轉換。一般而言物件導向是從軟體工程基本原則（例如：耦合、聚合、封裝）的基礎上發展起來的，然而關聯式資料庫則是從數學理論發展而來的，兩套理論存在顯著的區別。為了解決這個不符合的現象，物件關聯對映技術搬演著中介層的角色，讓開發可以使用物件方式來操作資料庫，而不用使用 SQL 語法，當然若是要使用複雜的操作，仍需要使用到 SQL 語法。</p>
<p>更多 SQL 語法學習：<a href="http://www.1keydata.com/tw/sql/sql.html">SQL語法教學- 1Keydata</a></p>
<p><img src="/images/flask101/Flask-SQLAlchemy.png" alt="Python Web Flask 實戰開發教學"> </p>
<h1 id="Flask-SQLAlchemy-使用設定"><a href="#Flask-SQLAlchemy-使用設定" class="headerlink" title="Flask SQLAlchemy 使用設定"></a>Flask SQLAlchemy 使用設定</h1><p>SQLAlchemy 是 Python 社群最廣泛使用的 ORM 套件。為了方便使用 ORM 來操作資料庫，我們使用 <a href="https://www.sqlalchemy.org/">SQLAlchemy</a> 的封裝 <a href="http://flask-sqlalchemy.pocoo.org/2.1/">Flask SQLAlchemy</a> 來進行 Models 的建立（當然你也可以單獨使用 SQLAlchemy）。以下是 SQLAlchemy 使用的簡單範例：</p>
<figure class="highlight python"><figcaption><span>main.py</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> flask_sqlalchemy <span class="keyword">import</span> SQLAlchemy</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"><span class="comment"># 設定資料庫位置，並建立 app</span></span><br><span class="line">app.config[<span class="string">&#x27;SQLALCHEMY_DATABASE_URI&#x27;</span>] = <span class="string">&#x27;sqlite:////tmp/test.db&#x27;</span></span><br><span class="line">db = SQLAlchemy(app)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><figcaption><span>models.py</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment"># 建立資料表欄位</span></span><br><span class="line"><span class="keyword">from</span> main <span class="keyword">import</span> db</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Todo</span>(db.Model):</span><br><span class="line">    <span class="comment"># __table__name = &#x27;user_table&#x27;，若不寫則看 class name</span></span><br><span class="line">    <span class="comment"># 設定 primary_key</span></span><br><span class="line">    <span class="built_in">id</span> = db.Column(db.Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">    content = db.Column(db.String(<span class="number">80</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, content</span>):</span><br><span class="line">        <span class="variable language_">self</span>.content = content</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__repr__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&lt;Todo %r&gt;&#x27;</span> % <span class="variable language_">self</span>.content</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><figcaption><span>manage.py</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask_script <span class="keyword">import</span> Manager, Server</span><br><span class="line"><span class="keyword">from</span> main <span class="keyword">import</span> app</span><br><span class="line"><span class="keyword">from</span> models <span class="keyword">import</span> Todo</span><br><span class="line"></span><br><span class="line"><span class="comment"># 設定你的 app</span></span><br><span class="line">manager = Manager(app)</span><br><span class="line"><span class="comment"># 設定 python manage.py runserver 為啟動 server 指令</span></span><br><span class="line">manager.add_command(<span class="string">&#x27;runserver&#x27;</span>, Server())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 設定 python manage.py shell 為啟動互動式指令 shell 的指令 </span></span><br><span class="line"><span class="meta">@manager.shell</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">make_shell_context</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">dict</span>(app=app, Todo=Todo)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    manager.run()</span><br></pre></td></tr></table></figure>

<p>操作指令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ python manage.py shell</span><br><span class="line">&gt;&gt;&gt; db.create_all()</span><br></pre></td></tr></table></figure>

<h1 id="CRUD-操作設計"><a href="#CRUD-操作設計" class="headerlink" title="CRUD 操作設計"></a>CRUD 操作設計</h1><p>CRUD 是一般網路應用程式<a href="https://zh.wikipedia.org/wiki/%E8%B3%87%E6%96%99%E6%93%8D%E7%B8%B1%E8%AA%9E%E8%A8%80">最常見的資料庫操作</a>（create, read, update, delete），接著我們要使用 session 來操作我們的 CRUD 功能，首先先在終端機中輸入 <code>$ python manage.py shell</code> 後進行資料庫指令模擬操作（要注意的是 Flask SQLAlchemy 針對每個 request 會創建一個新的 session，若沒有 commit 的操作即被丟棄）：</p>
<ol>
<li><p>新增（Create）<br> 新增一筆資料後將它加到 db.session 中，完成 commit：</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; todo = Todo(content=&#x27;hacking&#x27;)</span><br><span class="line">&gt;&gt;&gt; db.session.add(todo)</span><br><span class="line">&gt;&gt;&gt; db.session.commit()</span><br></pre></td></tr></table></figure>
</li>
<li><p>讀取（Read）<br>Model.query 是 db.session.query(Model) 的簡寫，所以我們可以使用以下方式讀取資料庫資料：</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 取得所有 todo 資料</span><br><span class="line">&gt;&gt;&gt; todos = Todo.query.all()</span><br><span class="line">&gt;&gt;&gt; todos</span><br><span class="line"># 限制 1 筆資料</span><br><span class="line">&gt;&gt;&gt; todos = Todo.query.limit(1).all()</span><br><span class="line"># 正向/逆向排序</span><br><span class="line">&gt;&gt;&gt; todos = Todo.query.order_by(Todo.content).all()</span><br><span class="line">&gt;&gt;&gt; todos = Todo.query.order_by(Todo.content.desc()).all()</span><br><span class="line"># 取得第一筆資料</span><br><span class="line">&gt;&gt;&gt; todo = Todo.query.first()</span><br><span class="line"># 取得 primary key=1 一筆資料</span><br><span class="line">&gt;&gt;&gt; todo = Todo.query.get(1)</span><br></pre></td></tr></table></figure>

<ul>
<li>分頁（Pagination）</li>
</ul>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; todos = Todo.query.paginate(1, 10)</span><br><span class="line"># 總頁數</span><br><span class="line">&gt;&gt;&gt; todos.pages</span><br><span class="line"># 上/下一頁</span><br><span class="line">&gt;&gt;&gt; todos.prev()</span><br><span class="line">&gt;&gt;&gt; todos.next()</span><br><span class="line">&gt;&gt;&gt; </span><br></pre></td></tr></table></figure>

<ul>
<li>條件查詢（Filter）</li>
</ul>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; todo = Todo.query.filter_by(content=&#x27;hacking&#x27;).first()</span><br></pre></td></tr></table></figure>

 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; todos = Todo.query.filter(Todo.id &gt; 1).all()</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改（Update）</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; todo = Todo.query.filter_by(contant=&#x27;hacking&#x27;).update(&#123;</span><br><span class="line">    &#x27;content&#x27;: &#x27;reading&#x27;</span><br><span class="line">&#125;)</span><br><span class="line">&gt;&gt;&gt; db.session.commit()</span><br></pre></td></tr></table></figure>
</li>
<li><p>刪除（Delete）</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; todo = Todo.query.filter_by(content=&#x27;reading&#x27;).first()</span><br><span class="line">&gt;&gt;&gt; db.session.delete(todo)</span><br><span class="line">&gt;&gt;&gt; db.session.commit()</span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="資料庫關聯用法"><a href="#資料庫關聯用法" class="headerlink" title="資料庫關聯用法"></a>資料庫關聯用法</h1><p>在關聯式資料庫中，最重要的就是資料表之間的關聯，透過關聯的使用，可以讓我們取得我們想要的資料。舉例而言，一篇部落格文章通常會對應多則評論，所以若是建立好關係則可以透過文章去取得所有和這篇文章有關的評論。同理，一篇文章通常會有多個 tag，而一個 tag 通常對應多篇文章，所以是個多對多關係。</p>
<ul>
<li>一對多</li>
</ul>
<figure class="highlight python"><figcaption><span>models.py</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment"># 建立資料表欄位</span></span><br><span class="line"><span class="keyword">from</span> main <span class="keyword">import</span> db</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Todo</span>(db.Model):</span><br><span class="line">    <span class="comment"># __table__name = &#x27;user_table&#x27;，若不寫則看 class name</span></span><br><span class="line">    <span class="comment"># 設定 primary_key</span></span><br><span class="line">    <span class="built_in">id</span> = db.Column(db.Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">    content = db.Column(db.String(<span class="number">80</span>))</span><br><span class="line">    user_id = db.Column(db.String(<span class="number">80</span>), db.ForeignKey(<span class="string">&#x27;user.id))</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    def __init__(self, content):</span></span><br><span class="line"><span class="string">        self.content = content</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    def __repr__(self):</span></span><br><span class="line"><span class="string">        return &#x27;</span>&lt;Todo %r&gt;<span class="string">&#x27; % self.content</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">class User(db.Model):</span></span><br><span class="line"><span class="string">    id = db.Column(db.Integer, primary_key=True)</span></span><br><span class="line"><span class="string">    name = db.Column(db.String(80))</span></span><br><span class="line"><span class="string">    todos = db.relationship(</span></span><br><span class="line"><span class="string">        &#x27;</span>Todo<span class="string">&#x27;,</span></span><br><span class="line"><span class="string">        backref=&#x27;</span>use<span class="string">r&#x27;, # ref 可以讓我們使用 Todo.user 進行對 User 操作</span></span><br><span class="line"><span class="string">        lazy=&#x27;</span>dynamic<span class="string">&#x27; # 有使用才載入，提昇效能</span></span><br><span class="line"><span class="string">    )</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    def __init__(self, name):</span></span><br><span class="line"><span class="string">        self.name = name</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    def __repr__(self):</span></span><br><span class="line"><span class="string">        return &#x27;</span>&lt;User %r&gt;<span class="string">&#x27; % self.name</span></span><br></pre></td></tr></table></figure>

<p>操作方式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; user = User.query.get(1)</span><br><span class="line">&gt;&gt;&gt; new_todo = Todo(&#x27;Booking&#x27;)</span><br><span class="line">&gt;&gt;&gt; new_todo.user_id = user.id</span><br><span class="line">&gt;&gt;&gt; db.session.add(new_todo)</span><br><span class="line">&gt;&gt;&gt; db.session.commit()</span><br><span class="line">&gt;&gt;&gt; user.todos</span><br></pre></td></tr></table></figure>


<ul>
<li>多對多</li>
</ul>
<figure class="highlight python"><figcaption><span>models.py</span></figcaption><table><tr><td class="code"><pre><span class="line">tags = db.Table(<span class="string">&#x27;todo_tags&#x27;</span>,</span><br><span class="line">    db.Column(<span class="string">&#x27;todo_id&#x27;</span>, db.Integer, db.ForeignKey(<span class="string">&#x27;todo.id&#x27;</span>)),</span><br><span class="line">    db.Column(<span class="string">&#x27;tag_id&#x27;</span>, db.Integer, db.ForeignKey(<span class="string">&#x27;tag.id&#x27;</span>))</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 建立資料表欄位</span></span><br><span class="line"><span class="keyword">from</span> main <span class="keyword">import</span> db</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Post</span>(db.Model):</span><br><span class="line">    <span class="comment"># __table__name = &#x27;user_table&#x27;，若不寫則看小寫 class name</span></span><br><span class="line">    <span class="comment"># 設定 primary_key</span></span><br><span class="line">    <span class="built_in">id</span> = db.Column(db.Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">    title = db.Column(db.String(<span class="number">80</span>))</span><br><span class="line">    content = db.Column(db.String(<span class="number">80</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, title, content</span>):</span><br><span class="line">        <span class="variable language_">self</span>.title = title</span><br><span class="line">        <span class="variable language_">self</span>.content = content</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__repr__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&lt;Todo %r&gt;&#x27;</span> % <span class="variable language_">self</span>.content</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Tag</span>(db.Model):</span><br><span class="line">    <span class="comment"># __table__name = &#x27;user_table&#x27;，若不寫則看 class name</span></span><br><span class="line">    <span class="comment"># 設定 primary_key</span></span><br><span class="line">    <span class="built_in">id</span> = db.Column(db.Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">    title = db.Column(db.String(<span class="number">80</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, title</span>):</span><br><span class="line">        <span class="variable language_">self</span>.title = title</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__repr__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&lt;Tag %r&gt;&#x27;</span> % <span class="variable language_">self</span>.title</span><br></pre></td></tr></table></figure>

<p>操作方式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 創建 3 個 todo</span><br><span class="line">&gt;&gt;&gt; todo_1 = Todo(&#x27;Python&#x27;)</span><br><span class="line">&gt;&gt;&gt; todo_2 = Todo(&#x27;JS&#x27;)</span><br><span class="line">&gt;&gt;&gt; todo_3 = Todo(&#x27;R&#x27;)</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; tag_1 = Tag(&#x27;coding&#x27;)</span><br><span class="line">&gt;&gt;&gt; tag_1.tags = [todo_1, todo_2]</span><br><span class="line">&gt;&gt;&gt; db.session.add()</span><br><span class="line">&gt;&gt;&gt; db.session.commit()</span><br></pre></td></tr></table></figure>

<p><img src="/images/flask101/Flask-Migration.png" alt="Python Web Flask 實戰開發教學"> </p>
<h1 id="Flask-Migration（Alembic）使用"><a href="#Flask-Migration（Alembic）使用" class="headerlink" title="Flask Migration（Alembic）使用"></a>Flask Migration（<a href="http://alembic.zzzcomputing.com/en/latest/index.html">Alembic</a>）使用</h1><p>隨著網路應用程式的發展，我們的 models 會不斷變更，為了記錄所有有關 models 的改動，我們使用 <code>Flask-Migrate</code> 這個 extensions。所有 models 改動都會記錄在 migration 檔案中，就像是資料庫的 git 一樣方便版本控制。</p>
<p>安裝 <code>Flask-Migrate</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ pip install Flask-Migrate</span><br></pre></td></tr></table></figure>

<p>將 db 加入 Flask-Migrate 控制：</p>
<figure class="highlight python"><figcaption><span>manage.py</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask_migrate <span class="keyword">import</span> Migrate, MigrateCommand</span><br><span class="line"><span class="keyword">from</span> flask_script <span class="keyword">import</span> Manager, Server</span><br><span class="line"><span class="keyword">from</span> main <span class="keyword">import</span> app</span><br><span class="line"><span class="keyword">from</span> models <span class="keyword">import</span> Todo</span><br><span class="line"></span><br><span class="line"><span class="comment"># 設定你的 app</span></span><br><span class="line">manager = Manager(app)</span><br><span class="line"><span class="comment"># 設定 python manage.py db 來管理 models</span></span><br><span class="line">manager.add_command(<span class="string">&#x27;db&#x27;</span>, MigrateCommand)</span><br><span class="line"><span class="comment"># 設定 python manage.py runserver 為啟動 server 指令</span></span><br><span class="line">manager.add_command(<span class="string">&#x27;runserver&#x27;</span>, Server())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 設定 python manage.py shell 為啟動互動式指令 shell 的指令 </span></span><br><span class="line"><span class="meta">@manager.shell</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">make_shell_context</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">dict</span>(app=app, Todo=Todo)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    manager.run()    </span><br></pre></td></tr></table></figure>

<p>使用 <code>Flask-Migrate</code> 操作 DB：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 初始化</span><br><span class="line">$ python manage.py db init</span><br><span class="line"># 記錄 model 變化</span><br><span class="line">$ python manage.py db migrate</span><br><span class="line"># 更新同步到 db</span><br><span class="line">$ python manage.py db upgrade</span><br><span class="line"># 查詢指令</span><br><span class="line">$ python manage.py db --help</span><br></pre></td></tr></table></figure>

<h1 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h1><p>本文介紹了資料庫、關聯式資料庫、ORM 的概念，我們也實際使用了 Flask SQLAlchemy 和 Flask-Migrate 來操作我們的資料庫。在接下來章節中我們將持續介紹 Python Web Flask 實戰開發，並學習現代化網站開發的方方面面。</p>
<h1 id="延伸閱讀"><a href="#延伸閱讀" class="headerlink" title="延伸閱讀"></a>延伸閱讀</h1><ol>
<li><a href="https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller">Wiki MVC</a></li>
<li><a href="http://pics.ee/c34g">Python Web 程式設計入門實戰線上課程</a></li>
</ol>
<p>（image via <a href="https://basicsofwebdevelopment.files.wordpress.com/2015/01/mvc_role_diagram.png">basicsofwebdevelopment</a>）</p>
]]></content>
      <tags>
        <tag>程式教學</tag>
        <tag>Python</tag>
        <tag>Django</tag>
        <tag>MVC</tag>
        <tag>Web</tag>
        <tag>MTV</tag>
        <tag>Web Backend</tag>
        <tag>Web Framework</tag>
        <tag>Flask</tag>
        <tag>框架</tag>
        <tag>網站開發</tag>
        <tag>Anaconda</tag>
        <tag>ORM</tag>
        <tag>SQLAlchemy</tag>
        <tag>Database</tag>
        <tag>Models</tag>
        <tag>資料庫</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 101 快速入門教學</title>
    <url>/2016/12/31/python101-tutorial/</url>
    <content><![CDATA[<p><img src="/images/python-logo.png" alt="Python 101 快速入門教學 "> </p>
<p><a href="http://pics.ee/c34g">Python Web 程式設計入門實戰課程準備上課囉！</a></p>
<h1 id="什麼是-Python？"><a href="#什麼是-Python？" class="headerlink" title="什麼是 Python？"></a>什麼是 Python？</h1><p><a href="https://zh.wikipedia.org/wiki/Python">Python</a> 是一種物件導向、直譯式的跨平台電腦程式語言，它包含了一組功能完備的標準庫和豐富套件生態系，可以輕鬆完成很多常見的任務（例如：讀寫檔案、自然語言處理、網路爬蟲、網站開發、機器學習等），因為它可以很輕易整合其他底層語言，所以又稱為膠水語言。它的語法簡單，與其它大多數程式設計語言使用大括弧不一樣，它使用縮進來定義語句塊。由於具備簡潔易學等特性，許多開發者推薦 Python 為初學者第一個學習的程式語言。由於版本更迭，我們接下來討論的主要是以 Python3 為主，若電腦沒有安裝的話，你可以在<a href="https://www.python.org/">官方網站下載</a>，若你不是安裝 <a href="https://www.continuum.io/downloads">Anaconda</a> 這個 all-in-one 版本的話（自帶許多套件和科學運算工具），記得要安裝 <a href="https://pypi.python.org/pypi/pip">pip</a>、<a href="https://ipython.org/">IPython</a>。 </p>
<h1 id="Python-設計風格"><a href="#Python-設計風格" class="headerlink" title="Python 設計風格"></a>Python 設計風格</h1><p>Python 主要設計的原則和特色就在於簡潔：應該會有一種明顯的作法（最好也只有一種），可以完成工作。</p>
<p>更多有關 Python 設計風格可以在終端機進入 python3 互動模式後輸入 <code>import this</code>：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">python3</span></span><br><span class="line">Python 3.5.2 (default, Oct 11 2016, 05:00:16)</span><br><span class="line">[GCC 4.2.1 Compatible Apple LLVM 7.0.2 (clang-700.1.81)] on darwin</span><br><span class="line">Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; import this</span></span><br><span class="line"></span><br><span class="line">The Zen of Python, by Tim Peters</span><br><span class="line"></span><br><span class="line">Beautiful is better than ugly.</span><br><span class="line">Explicit is better than implicit.</span><br><span class="line">Simple is better than complex.</span><br><span class="line">Complex is better than complicated.</span><br><span class="line">Flat is better than nested.</span><br><span class="line">Sparse is better than dense.</span><br><span class="line">Readability counts.</span><br><span class="line">Special cases aren&#x27;t special enough to break the rules.</span><br><span class="line">Although practicality beats purity.</span><br><span class="line">Errors should never pass silently.</span><br><span class="line">Unless explicitly silenced.</span><br><span class="line">In the face of ambiguity, refuse the temptation to guess.</span><br><span class="line">There should be one-- and preferably only one --obvious way to do it.</span><br><span class="line">Although that way may not be obvious at first unless you&#x27;re Dutch.</span><br><span class="line">Now is better than never.</span><br><span class="line">Although never is often better than *right* now.</span><br><span class="line">If the implementation is hard to explain, it&#x27;s a bad idea.</span><br><span class="line">If the implementation is easy to explain, it may be a good idea.</span><br><span class="line">Namespaces are one honking great idea -- let&#x27;s do more of those!</span><br></pre></td></tr></table></figure>

<h1 id="空白格式"><a href="#空白格式" class="headerlink" title="空白格式"></a>空白格式</h1><p>首先，我們要了解 Python 和其他語言最大的不同就是使用縮排來切分程式碼，這和其他語言使用 {} 不同。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]:</span><br><span class="line">	<span class="built_in">print</span>(i)</span><br><span class="line">	<span class="keyword">for</span> j <span class="keyword">in</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]:</span><br><span class="line">		<span class="built_in">print</span>(j + i)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;finish&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>不過初學者很容易在縮排遇到問題，若是出現以下訊息就可以檢視是否哪裡縮排有問題：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">IndentationError: expected an indented block</span><br></pre></td></tr></table></figure>

<h1 id="模組"><a href="#模組" class="headerlink" title="模組"></a>模組</h1><p>在 Python 生態系中有豐富的模組和工具。一般情況預設不會載入任何模組，但當你有特定開發需求可以使用第三方工具將模組匯入（import）。若是當模組名稱很長時通常我們會使用別名。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import re as regex</span><br><span class="line"></span><br><span class="line">my_regex = regex.compile(&#x27;[0-9]+&#x27;, regex.I)</span><br></pre></td></tr></table></figure>

<p>若是只是需要模組中的特定功能，也可以使用比較精準的引入方式 <code>from import</code>，引入到整個命名空間中，使用時前面就不用寫模組名（但要注意有可能覆寫）：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from collections import defaultdict, Counter</span><br><span class="line">lookup = defaultdict(int)</span><br><span class="line">my_counter = Counter()</span><br></pre></td></tr></table></figure>

<h1 id="資料型別"><a href="#資料型別" class="headerlink" title="資料型別"></a>資料型別</h1><p>在 Python 有以下幾種內建的資料型別，基本資料型別有 Number、String、Boolean</p>
<ol>
<li><p>數字（Number）</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">num1 = <span class="number">3</span></span><br><span class="line">num2 = <span class="number">2</span></span><br><span class="line">num3 = num1 / num2</span><br></pre></td></tr></table></figure>
</li>
<li><p>字串（String）<br> 字串使用上會使用單引號或雙引號成對包起（’, “）</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">str = &#x27;data engineer&#x27;</span><br><span class="line"># 字串長度</span><br><span class="line">len(str)</span><br><span class="line"># 原始字元</span><br><span class="line">es_str = r&#x27;\t&#x27;</span><br><span class="line"># 2</span><br><span class="line">len(es_str)</span><br></pre></td></tr></table></figure>

<p> 若是多行的情形：</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">multi_line_str = &quot;&quot;&quot;</span><br><span class="line">多行</span><br><span class="line">多行</span><br><span class="line">&quot;&quot;&quot; </span><br></pre></td></tr></table></figure>
</li>
<li><p>布林值（Boolean）<br> 決定邏輯判斷，<code>True</code> 或 <code>False</code>。注意在 Python 中布林值首字是大寫</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">is_num_bigger_than_one = <span class="number">1</span> &lt; <span class="number">2</span></span><br></pre></td></tr></table></figure>

<p> 在 Python 中 <code>None</code> 地位類似於 <code>null</code></p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = <span class="literal">None</span></span><br><span class="line"><span class="built_in">print</span>(x == <span class="literal">None</span>)</span><br></pre></td></tr></table></figure>
<p> 以下為 Python 的 Falsy 值：</p>
<ul>
<li>False </li>
<li>None</li>
<li>[]</li>
<li>{}</li>
<li>“”</li>
<li>set()</li>
<li>0</li>
<li>0.0</li>
</ul>
<p> 可以搭配 and, or, not 使用</p>
</li>
<li><p>列表（List）<br> 列表可以說是 Python 中最基礎的一種資料結構。所謂列表指的就是一群按照順序排序的元素（類似於其他程式語言的 array，但多一些額外功能）。</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list_num = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="built_in">list</span> = [<span class="string">&#x27;string&#x27;</span>, <span class="number">1</span>, [], list_num]</span><br><span class="line">list_length = <span class="built_in">len</span>(list_num)	</span><br><span class="line">num_sum = <span class="built_in">sum</span>(list_num)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(list_length)</span><br><span class="line"><span class="built_in">print</span>(num_sum)</span><br></pre></td></tr></table></figure>

<p> 運用 [] 取值（index 從 0 開始）：</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = <span class="built_in">range</span>(<span class="number">10</span>) <span class="comment"># [0, 1, 2, ..., 9]</span></span><br><span class="line">zero = x[<span class="number">0</span>] <span class="comment"># 0</span></span><br><span class="line">nine = x[-<span class="number">1</span>] <span class="comment"># 9</span></span><br><span class="line">x[<span class="number">0</span>] = -<span class="number">1</span></span><br></pre></td></tr></table></figure>

<p> 切割（[起始 index, 結束 index 但不包含]）：</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(x[:<span class="number">3</span>]) <span class="comment"># [-1, 1, 2]</span></span><br><span class="line"><span class="built_in">print</span>(x[<span class="number">3</span>:]) <span class="comment"># [3, 4, 5,..., 9]</span></span><br><span class="line"><span class="built_in">print</span>(x[<span class="number">1</span>:<span class="number">5</span>]) <span class="comment"># [1, 2, 3, 4]</span></span><br><span class="line"><span class="built_in">print</span>(x[<span class="number">0</span>:-<span class="number">1</span>]) <span class="comment"># [1, 2, ..., 8]</span></span><br><span class="line"><span class="built_in">print</span>(x[-<span class="number">1</span>:-<span class="number">1</span>]) <span class="comment"># [-1, 1, ..., 9]</span></span><br></pre></td></tr></table></figure>

<p> 檢查元素是否在列表中（逐一檢查，效率較差）：</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> <span class="keyword">in</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>] <span class="comment"># True</span></span><br></pre></td></tr></table></figure>

<p> 串接列表：</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">x.extend([<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>])</span><br></pre></td></tr></table></figure>

 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">y = x + [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br></pre></td></tr></table></figure>

 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">x.append(<span class="number">0</span>) <span class="comment"># [1, 2, 3, 0]</span></span><br></pre></td></tr></table></figure>

<p> 賦值方式：</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x, y = [<span class="number">1</span>, <span class="number">2</span>]</span><br></pre></td></tr></table></figure>

 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">_, y = [<span class="number">1</span>, <span class="number">2</span>]</span><br></pre></td></tr></table></figure>
</li>
<li><p>元組（Tuple）<br> Tuple 類似於 List 的兄弟，比較大差別在於 Tuple 是 immutable，也就是說宣告後不能修改。列表使用 []，而元組使用 ()</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">my_list = [<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">my_tuple = (<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">my_list[<span class="number">1</span>] = <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">	my_tuple[<span class="number">1</span>] = <span class="number">4</span></span><br><span class="line"><span class="keyword">except</span> TypeError:</span><br><span class="line">	<span class="built_in">print</span>(<span class="string">&#x27;cannot modify a tuple&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p> 多重賦值</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">x, y = 1, 2</span><br><span class="line">x, y = y, x # x == 2, y == 1</span><br></pre></td></tr></table></figure>
</li>
<li><p>字典（Dictionary）</p>
<p> 字典類似 map，包含鍵值與對應的值，可以快速取出對應值：</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dict1 = &#123;&#125; <span class="comment"># 建議寫法</span></span><br><span class="line">dirct2 = <span class="built_in">dict</span>()</span><br><span class="line">grades = &#123; <span class="string">&#x27;Mark&#x27;</span>: <span class="number">70</span>, <span class="string">&#x27;Jack&#x27;</span>: <span class="number">40</span> &#125;</span><br><span class="line"></span><br><span class="line">grades[<span class="string">&#x27;Mark&#x27;</span>]</span><br></pre></td></tr></table></figure>

<p> 給定值：</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">grades[<span class="string">&#x27;KD&#x27;</span>] = <span class="number">100</span></span><br><span class="line"><span class="built_in">len</span>(grades) <span class="comment"># 3</span></span><br></pre></td></tr></table></figure>

<p> 使用事先檢驗鍵或是使用 get 方法：</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">	grade = grades[<span class="string">&#x27;XD&#x27;</span>]</span><br><span class="line"><span class="keyword">except</span> KeyError:</span><br><span class="line">	<span class="built_in">print</span>(<span class="string">&#x27;no grade for XD&#x27;</span>)</span><br><span class="line"></span><br><span class="line">grades.get(<span class="string">&#x27;XD&#x27;</span>, <span class="number">40</span>) <span class="comment"># 若無則使用 default 值</span></span><br></pre></td></tr></table></figure>

<p> 取出所有值：</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">grades = &#123; &#x27;Mark&#x27;: 70, &#x27;Jack&#x27;: 40 &#125;</span><br><span class="line">grades.keys() # 所有鍵值組成的 list</span><br><span class="line">grades.values() # 所有值組成的 list</span><br><span class="line">grades.items() # 所有鍵值組成的 tuple of list [(&#x27;Mark&#x27;, 70)]</span><br></pre></td></tr></table></figure>

<p> <code>defaultdict</code>：</p>
<p> 當你檢查一個不存在的鍵值時，會用零參數函式添加一個事先設定的新值，這是一種比較優雅的作法</p>
<p> 在介紹 defaultdict 之前先介紹一般作法</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 例外處理</span></span><br><span class="line">word_counts = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> word <span class="keyword">in</span> document:</span><br><span class="line">	<span class="keyword">try</span>:</span><br><span class="line">		word_counts[word] += <span class="number">1</span></span><br><span class="line">	<span class="keyword">except</span> KeyError:</span><br><span class="line">		word_counts[word] = <span class="number">1</span></span><br><span class="line"><span class="comment"># 使用 get</span></span><br><span class="line">word_counts = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> word <span class="keyword">in</span> document:</span><br><span class="line">	previous = word_counts.get(word, <span class="number">0</span>)</span><br><span class="line">	word_counts[word] = previous_count + <span class="number">1</span></span><br></pre></td></tr></table></figure>

<p> defaultdict 作法（不用每次檢查鍵直視否存在）</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 匯入 defaultdict</span></span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> defaultdict</span><br><span class="line"></span><br><span class="line">word_counts = defaultdict(<span class="built_in">int</span>) <span class="comment"># 會生成 0</span></span><br><span class="line"><span class="keyword">for</span> word <span class="keyword">in</span> document:</span><br><span class="line">	word_counts[word] += <span class="number">1</span></span><br></pre></td></tr></table></figure>

<p> 也可以使用 list 或 dict 甚至是自己定義的函式來做為 defaultdict 的零參數函式：</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dd_list = defaultdict(<span class="built_in">list</span>)</span><br><span class="line">dd_list[<span class="number">1</span>].append(<span class="number">2</span>) <span class="comment"># &#123; 1: [2] &#125;</span></span><br><span class="line"></span><br><span class="line">dd_list = defaultdict(<span class="built_in">list</span>)</span><br><span class="line">dd_list[<span class="string">&#x27;Mark&#x27;</span>][<span class="string">&#x27;City&#x27;</span>] = <span class="string">&#x27;Bay Area&#x27;</span> <span class="comment"># &#123; &#x27;Mark&#x27;: &#123; &#x27;City&#x27;: &#x27;Bay Area&#x27;&#125; &#125;</span></span><br><span class="line"></span><br><span class="line">dd_list = defaultdict(<span class="keyword">lambda</span>: [<span class="number">0</span>, <span class="number">0</span>])</span><br><span class="line">dd_pair[<span class="number">2</span>][<span class="number">1</span>] = <span class="number">1</span></span><br></pre></td></tr></table></figure>

<p> Counter：可以把一系列值轉成類似 defaultdict(int) 的東西，裡面每個值都對應到相應的數量，主要會使用來建立直方圖 </p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Counter</span><br><span class="line"></span><br><span class="line">c = Counter([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>]) <span class="comment"># &#123; 0: 2, 1: 1, 2: 1 &#125; </span></span><br><span class="line">word_counts = Counter(document)</span><br></pre></td></tr></table></figure>

<p> 每個 Counter 實例都有個 most_common 的方法</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> word, count <span class="keyword">in</span> word_counts.most_common(<span class="number">10</span>):</span><br><span class="line">	<span class="built_in">print</span>(word, count)</span><br></pre></td></tr></table></figure>
</li>
<li><p>集合（Set）<br> 集合類似數學中的集合，裡面包含不重複的元素值</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = <span class="built_in">set</span>()</span><br><span class="line">s.add(<span class="number">1</span>) <span class="comment"># &#123; 1 &#125;</span></span><br><span class="line">s.add(<span class="number">2</span>) <span class="comment"># &#123; 1, 2 &#125;</span></span><br><span class="line">s.add(<span class="number">2</span>) <span class="comment"># &#123; 1, 2 &#125;</span></span><br><span class="line"><span class="built_in">len</span>(s) <span class="comment"># 2 </span></span><br><span class="line"><span class="number">1</span> <span class="keyword">in</span> s <span class="comment"># True</span></span><br></pre></td></tr></table></figure>

<p> 集合在判斷元素是否存在的效率相對較好，此外，對於判斷不重複值也很方便</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list_item = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">set_item = <span class="built_in">set</span>(list_item) <span class="comment"># &#123;1, 2, 3&#125;</span></span><br><span class="line">lsit(set_item) <span class="comment"># [1, 2, 3]</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="解析式列表（comprehensive-list）"><a href="#解析式列表（comprehensive-list）" class="headerlink" title="解析式列表（comprehensive list）"></a>解析式列表（comprehensive list）</h1><p>在 Python 我們通常會需要把某個 list 轉換成另外一個 list，比如只挑選其中幾個元素，或是對期中某些元素進行轉換。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">even_numbers = [x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>) <span class="keyword">if</span> x % <span class="number">2</span> == <span class="number">0</span>]</span><br><span class="line">squares = [x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>) <span class="keyword">if</span> x % <span class="number">2</span> == <span class="number">0</span>]</span><br><span class="line">even_squares = [x * x <span class="keyword">for</span> x even_numbers]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 不操作值的話</span></span><br><span class="line">zeros = [<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> even_numbers] <span class="comment"># 和 even_numbers 長度一樣值都為 0 的串列</span></span><br></pre></td></tr></table></figure>

<p>建立 set 和 dict</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">square_dict = &#123; x : x * x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>) &#125;</span><br><span class="line">square_set = &#123; x * x <span class="keyword">for</span> x <span class="keyword">in</span> [<span class="number">1</span>, -<span class="number">1</span>] &#125; <span class="comment"># &#123; 1 &#125;</span></span><br><span class="line"></span><br><span class="line">pairs = [(x, y) <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>) <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)] <span class="comment"># (0, 0), (0, 1)</span></span><br><span class="line">p = [(x, y) <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>) <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>( x + <span class="number">1</span>, <span class="number">10</span>)]</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="函式"><a href="#函式" class="headerlink" title="函式"></a>函式</h1><p>函式（function）是重複使用的程式區塊，有輸入輸出。在 Python 中我們會使用 def 來定義函式：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">sum</span>(<span class="params">x, y</span>):</span><br><span class="line">	<span class="keyword">return</span> x + y </span><br></pre></td></tr></table></figure>

<p>Python 的函數和 JavaScript 一樣，屬於一級函式（first-class）。我們可以將函數指定給某個變數，然後把它傳給某個函數中，就像是平常把參數傳入函式一樣。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">apply_f</span>(<span class="params">fun</span>):</span><br><span class="line">	<span class="keyword">return</span> fun(<span class="number">3</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sum</span>(<span class="params">x, y</span>):</span><br><span class="line">	<span class="keyword">return</span> x + y </span><br><span class="line"></span><br><span class="line">sum_fun = <span class="built_in">sum</span></span><br><span class="line">num = apply_f(<span class="built_in">sum</span>)</span><br><span class="line"><span class="built_in">print</span>(num) // <span class="number">5</span></span><br></pre></td></tr></table></figure>

<p>匿名函數使用方式（類似 ES6 arrow function 簡化寫法，前面是參數後面是操作）：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">y = apply_f(<span class="keyword">lambda</span> x: x + <span class="number">4</span>)</span><br></pre></td></tr></table></figure>

<p>函式參數預設值：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">my_print</span>(<span class="params">message=<span class="string">&quot;default&quot;</span></span>):</span><br><span class="line">	<span class="built_in">print</span>(message)</span><br><span class="line"></span><br><span class="line">my_print(<span class="string">&quot;hello python&quot;</span>)</span><br><span class="line">my_print() </span><br></pre></td></tr></table></figure>

<h1 id="args-與-kwargs"><a href="#args-與-kwargs" class="headerlink" title="args 與 kwargs"></a>args 與 kwargs</h1><p>若我們希望函式可以接受任意參數，我們可以使用 <code>args</code>（由無名稱參數組成的元組） 和 <code>kwargs</code>（由無名稱參數組成的字典）：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">magic</span>(<span class="params">*args, **kwargs</span>):</span><br><span class="line">	<span class="built_in">print</span>(<span class="string">&#x27;unnamed args:&#x27;</span>, args)</span><br><span class="line">	<span class="built_in">print</span>(<span class="string">&#x27;keywords args:&#x27;</span>, kwargs)</span><br><span class="line">magic(<span class="number">1</span>, <span class="number">2</span>, key=<span class="string">&#x27;word&#x27;</span>, key2=<span class="string">&#x27;word2&#x27;</span>) </span><br><span class="line"></span><br><span class="line"><span class="comment"># unnamed args: (1, 2)</span></span><br><span class="line"><span class="comment"># keywords args: &#123;&#x27;key&#x27;: &#x27;word&#x27;, &#x27;key2&#x27;: &#x27;word2&#x27;&#125;</span></span><br></pre></td></tr></table></figure>

<p>可以用來協助建立以函式當做參數的高階函式：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">double</span>(<span class="params">f</span>):</span><br><span class="line">	<span class="keyword">def</span> <span class="title function_">g</span>(<span class="params">*args, **kwargs</span>):</span><br><span class="line">		<span class="keyword">return</span> <span class="number">2</span> * f(*args, **kwargs)</span><br><span class="line">	<span class="keyword">return</span> g</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f2</span>(<span class="params">x, y</span>):</span><br><span class="line">	<span class="keyword">return</span> x + y</span><br><span class="line"></span><br><span class="line">g = doubler_correct(f2)</span><br><span class="line"><span class="built_in">print</span>(g(<span class="number">1</span>, <span class="number">2</span>))</span><br></pre></td></tr></table></figure>

<h1 id="常見內建函式"><a href="#常見內建函式" class="headerlink" title="常見內建函式"></a>常見內建函式</h1><p>除了自己可以建立函式外，Python 本身也提供許多好用的內建函式：</p>
<ul>
<li><p>all：列表中所有元素為真</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">all</span>([<span class="literal">True</span>, <span class="number">1</span>, &#123; <span class="number">3</span> &#125;]) <span class="comment"># True</span></span><br><span class="line"><span class="built_in">all</span>([<span class="literal">True</span>, <span class="number">1</span>, &#123; &#125;]) <span class="comment"># False</span></span><br><span class="line"><span class="built_in">all</span>([]) <span class="comment"># True，沒有元素為假</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>any：列表中只要有任何元素為真</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">any</span>([<span class="literal">True</span>, <span class="number">1</span>, &#123;&#125;]) <span class="comment"># True</span></span><br><span class="line"><span class="built_in">any</span>([]) <span class="comment"># False，沒有元素為真</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>enumerate：列舉</p>
<p>  我們常需要反覆取得列表中每個元素及其索引值</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># choice 1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(documents)):</span><br><span class="line">	document = documents[i]</span><br><span class="line">	do_something(i, document)</span><br><span class="line"></span><br><span class="line"><span class="comment"># choice 2</span></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> document <span class="keyword">in</span> documents:</span><br><span class="line">	do_something(i, document)</span><br><span class="line">	i += <span class="number">1</span></span><br></pre></td></tr></table></figure>

<p>  使用 enumerate：</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i, document <span class="keyword">in</span> <span class="built_in">enumerate</span>(documents):</span><br><span class="line">	do_something(i, document)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 僅需要 index</span></span><br><span class="line"><span class="keyword">for</span> i, _ <span class="keyword">in</span> <span class="built_in">enumerate</span>(documents): do_something(i)</span><br></pre></td></tr></table></figure>
</li>
<li><p>zip：合併將多個 list 合併成 tuple of list</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list1 = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>]</span><br><span class="line">list2 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="built_in">zip</span>(list1, list2) <span class="comment"># [(&#x27;a&#x27;, 1), (&#x27;b&#x27;, 2)]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">zip</span>(*[(<span class="string">&#x27;a&#x27;</span>, <span class="number">1</span>), (<span class="string">&#x27;b&#x27;</span>, <span class="number">2</span>), (<span class="string">&#x27;c&#x27;</span>, <span class="number">3</span>)]) == <span class="built_in">zip</span>((<span class="string">&#x27;a&#x27;</span>, <span class="number">1</span>), (<span class="string">&#x27;b&#x27;</span>, <span class="number">2</span>), (<span class="string">&#x27;c&#x27;</span>, <span class="number">3</span>)) <span class="comment"># [(&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;), (&#x27;1&#x27;, &#x27;2&#x27;, &#x27;3&#x27;)]</span></span><br></pre></td></tr></table></figure>

  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># * 可以參數拆分</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">a, b</span>): <span class="keyword">return</span> a + b</span><br><span class="line">add(<span class="number">1</span>, <span class="number">3</span>) <span class="comment"># 4</span></span><br><span class="line">add([<span class="number">1</span>, <span class="number">3</span>]) <span class="comment"># TypeError</span></span><br><span class="line">add(*[<span class="number">1</span>, <span class="number">3</span>]) <span class="comment"># 4</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>range：取得一序列</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">range</span>(<span class="number">0</span>, <span class="number">10</span>) <span class="comment"># 0, 1, 2, ... 9</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>random：生成隨機數字</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">randoms = [random.random() <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>)] <span class="comment"># 生成長度為 4 內涵值為 0 - 1 不含 0 的 list</span></span><br></pre></td></tr></table></figure>

<p>  事實上，random 產生的是偽隨機數字，透過 seed 設定可以取得同樣值</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line">random.seed(<span class="number">10</span>) <span class="comment"># 把 seed 設為 10</span></span><br><span class="line"><span class="built_in">print</span>(random.random()) <span class="comment"># 0.5714025946899135</span></span><br><span class="line">random.seed(<span class="number">10</span>) <span class="comment"># 把 seed 設為 10</span></span><br><span class="line"><span class="built_in">print</span>(random.random()) <span class="comment"># 0.5714025946899135 </span></span><br></pre></td></tr></table></figure>

<p>  隨機產生範圍內數字：</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">random.randrange(<span class="number">10</span>)</span><br><span class="line">random.randrange(<span class="number">3</span>, <span class="number">6</span>)</span><br></pre></td></tr></table></figure>

<p>  針對列表隨機排列：</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">num = <span class="built_in">range</span>(<span class="number">10</span>)</span><br><span class="line">random.shuffle(num)</span><br></pre></td></tr></table></figure>

  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">random.choice([<span class="string">&#x27;Mark&#x27;</span>, <span class="string">&#x27;Bob&#x27;</span>, <span class="string">&#x27;Jack&#x27;</span>])</span><br></pre></td></tr></table></figure>

<p>  隨機取樣不放回：</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">nums = <span class="built_in">range</span>(<span class="number">10</span>)</span><br><span class="line">random.sample(nums, <span class="number">3</span>)</span><br></pre></td></tr></table></figure>

<p>  隨機取樣放回：</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">nums = <span class="built_in">range</span>(<span class="number">10</span>)</span><br><span class="line">random.choice(nums, <span class="number">3</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>sort：針對 list 進行排序（由小到大），會改變原來的 list。sorted 不會改變原來 list</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = [<span class="number">4</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">y = <span class="built_in">sorted</span>(x) <span class="comment"># [1, 2, 3, 4] 不會改變到 x</span></span><br><span class="line">x.sort() <span class="comment"># x 變成 [1, 2, 3, 4]</span></span><br></pre></td></tr></table></figure>

<p>  若想改成由大到小排序</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = <span class="built_in">sorted</span>([-<span class="number">4</span>, <span class="number">1</span>, -<span class="number">2</span>, <span class="number">3</span>, key=<span class="built_in">abs</span>, reverse=<span class="literal">True</span>]) <span class="comment"># [-4, 3, -3, 2] 絕對值由大到小</span></span><br></pre></td></tr></table></figure>

<p>  若是在 key 指定一個函數，就會用這個函數結果去做排序</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">wc = <span class="built_in">sorted</span>(word_counts.items(), key=<span class="keyword">lambda</span> (word, count): count, reverse=<span class="literal">True</span>) <span class="comment"># 針對單字數量多到小排序</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>partial：使用函式工具創建另一個函式</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> partial</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">exp</span>(<span class="params">base, power</span>):</span><br><span class="line">	<span class="keyword">return</span> base ** power</span><br><span class="line">two_to_the = partial(exp, <span class="number">2</span>)</span><br><span class="line">print_two_the(<span class="number">3</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>map：</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">multiply</span>(<span class="params">x, y</span>):</span><br><span class="line">	<span class="keyword">return</span> x * y</span><br><span class="line"><span class="built_in">map</span>(multiply, [<span class="number">1</span>, <span class="number">2</span>], [<span class="number">1</span>, <span class="number">2</span>]) <span class="comment"># [1, 4]</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>filter：</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">is_even</span>(<span class="params">x</span>):</span><br><span class="line">	<span class="keyword">return</span> x % <span class="number">2</span> == <span class="number">0</span></span><br><span class="line"><span class="built_in">filter</span>(is_even, [<span class="number">2</span>, <span class="number">5</span>, <span class="number">6</span>]) <span class="comment"># [2, 6]</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>reduce：</p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def multiply(x, y):</span><br><span class="line">	return x * y</span><br><span class="line">reduce(multiply, [1, 2, 3]) # 1 * 2 * 3</span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="控制流程"><a href="#控制流程" class="headerlink" title="控制流程"></a>控制流程</h1><ol>
<li><p>if…elif…else</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="number">1</span> &gt; <span class="number">2</span>:</span><br><span class="line">	message = <span class="string">&#x27;if onlt 1 were greater than two&#x27;</span></span><br><span class="line"><span class="keyword">elif</span> <span class="number">1</span> &gt; <span class="number">3</span>: </span><br><span class="line">	message = <span class="string">&#x27;elif == else if&#x27;</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">	message = <span class="string">&#x27;else&#x27;</span></span><br></pre></td></tr></table></figure>

<p> 三元運算子：</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">parity = <span class="string">&#x27;even&#x27;</span> <span class="keyword">if</span> x % <span class="number">2</span> == <span class="number">0</span> <span class="keyword">else</span> <span class="string">&#x27;odd&#x27;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>for…in </p>
<p> 較複雜情況我們會搭配 continue 和 break 使用：</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>): <span class="comment"># 0...9 不含 10</span></span><br><span class="line">	<span class="keyword">if</span> x == <span class="number">3</span>:</span><br><span class="line">		<span class="keyword">continue</span></span><br><span class="line">	<span class="keyword">if</span> x == <span class="number">5</span>:</span><br><span class="line">		<span class="keyword">break</span></span><br><span class="line">	<span class="built_in">print</span>(x)</span><br></pre></td></tr></table></figure>
</li>
<li><p>while</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> x &lt; <span class="number">10</span>:</span><br><span class="line">	<span class="built_in">print</span>(<span class="string">&#x27;x is less than 10&#x27;</span>)</span><br><span class="line">	x += <span class="number">1</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="生成器（generator）與迭代操作"><a href="#生成器（generator）與迭代操作" class="headerlink" title="生成器（generator）與迭代操作"></a>生成器（generator）與迭代操作</h1><p>事實上，list 有個問題就是很容易變得很大。例如：range(1000000) 就會製造出一個包含一百萬的元素的 list。若是想要使用其中幾個元素，效能就會變得很差。此時使用生成器（generator）就是一個每次只生成所需數值的一種 lazy 作法。</p>
<p>使用函式和 yield</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">lazy_range</span>(<span class="params">n</span>):</span><br><span class="line">	i = <span class="number">0</span></span><br><span class="line">	<span class="keyword">while</span> i &lt; n:</span><br><span class="line">		<span class="keyword">yield</span> i</span><br><span class="line">		i += i</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> lazy_range(<span class="number">10</span>):</span><br><span class="line">	do_something(i)</span><br></pre></td></tr></table></figure>

<p>或是在小括號使用運算解析式</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">lazy_evens_below_20 = (i <span class="keyword">for</span> i <span class="keyword">in</span> lazy_range(<span class="number">20</span>) <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">另外，每個 <span class="built_in">dict</span> 都有一個叫做 items() 的方法</span><br><span class="line"></span><br><span class="line">iteritems() <span class="comment"># 可以一次生成一個鍵值對</span></span><br></pre></td></tr></table></figure>

<h1 id="裝飾器（decorator）"><a href="#裝飾器（decorator）" class="headerlink" title="裝飾器（decorator）"></a>裝飾器（decorator）</h1><p>裝飾器本身是一個函式，主要是借助閉包力量產生一個可以修飾函式的函式：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@print_fun(<span class="params">title=<span class="string">&#x27;title:&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">*tup</span>):</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">sum</span>(tup)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 以下兩者相同</span></span><br><span class="line">add(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">add = print_fun(title=<span class="string">&#x27;title:&#x27;</span>)(add)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 裝飾器撰寫</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">print_fun</span>(<span class="params">title</span>):</span><br><span class="line">	<span class="keyword">def</span> <span class="title function_">decorator</span>(<span class="params">func</span>):</span><br><span class="line">		<span class="keyword">def</span> <span class="title function_">modified_func</span>(<span class="params">*args, **kwargs</span>):</span><br><span class="line">			result = func(*args, ** kwargs)</span><br><span class="line">			<span class="built_in">print</span>(title, result)</span><br><span class="line">		<span class="keyword">return</span> modified_func</span><br><span class="line">	<span class="keyword">return</span> decorator</span><br></pre></td></tr></table></figure>

<h1 id="正規表達式"><a href="#正規表達式" class="headerlink" title="正規表達式"></a>正規表達式</h1><p>與許多程式語言一樣，Python 同樣提供正規表達式的用法，可以方便擷取文字。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>.<span class="built_in">all</span>([</span><br><span class="line">re.<span class="keyword">match</span>(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;cat&#x27;</span>),</span><br><span class="line">re.search(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;cat&#x27;</span>)])</span><br></pre></td></tr></table></figure>

<h1 id="物件導向程式設計（OOP）"><a href="#物件導向程式設計（OOP）" class="headerlink" title="物件導向程式設計（OOP）"></a>物件導向程式設計（OOP）</h1><p>Python 也是物件導向程式語言：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Set</span>:</span><br><span class="line">	<span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, values=<span class="literal">None</span></span>):</span><br><span class="line">		<span class="comment"># 建構函數</span></span><br><span class="line">		s1 = <span class="type">Set</span>()</span><br><span class="line">		s2 = <span class="type">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line">		<span class="variable language_">self</span>.<span class="built_in">dict</span> = &#123;&#125; </span><br><span class="line">		<span class="keyword">if</span> values <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">			<span class="keyword">for</span> value <span class="keyword">in</span> values:</span><br><span class="line">				<span class="variable language_">self</span>.add(value)</span><br><span class="line">	<span class="keyword">def</span> <span class="title function_">__repr__</span>(<span class="params">self</span>):</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;Set&quot;</span> + <span class="built_in">str</span>(<span class="variable language_">self</span>.<span class="built_in">dict</span>.keys())</span><br><span class="line">	<span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">self, value</span>):</span><br><span class="line">		<span class="variable language_">self</span>.<span class="built_in">dict</span>[value] = <span class="literal">True</span></span><br><span class="line">	<span class="keyword">def</span> <span class="title function_">contains</span>(<span class="params">self, value</span>):</span><br><span class="line">		<span class="keyword">return</span> value <span class="keyword">in</span> <span class="variable language_">self</span>.<span class="built_in">dict</span></span><br><span class="line">	<span class="keyword">def</span> <span class="title function_">remove</span>(<span class="params">self, value</span>):</span><br><span class="line">		<span class="keyword">del</span> <span class="variable language_">self</span>.<span class="built_in">dict</span>[value]</span><br><span class="line"><span class="comment"># 使用物件</span></span><br><span class="line">s = <span class="type">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line"></span><br><span class="line">s.add(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(s.contains(<span class="number">4</span>))</span><br></pre></td></tr></table></figure>

<h1 id="例外狀況"><a href="#例外狀況" class="headerlink" title="例外狀況"></a>例外狀況</h1><p>若是程式出現錯誤的話會送出 exception，若不妥善處理的話程式很有可能會掛掉，在 Python 中例外處理可以使用 try…except：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">	<span class="built_in">print</span>(<span class="number">1</span>/<span class="number">0</span>)</span><br><span class="line"><span class="keyword">except</span> ZeroDivisionError:  </span><br><span class="line">	<span class="built_in">print</span>(<span class="string">&#x27;cannot divide by zero&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h1 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h1><p>本文快速介紹了 Python 的基礎概念，當讀者學會了 Python 後，事實上可以嘗試使用 Python 開發不同的網路應用程式或是資料科學，甚至是自然語言處理的應用。更多 Python 教學內容都在 <a href="http://pics.ee/c34g">Python Web 程式設計！</a></p>
<h1 id="延伸閱讀"><a href="#延伸閱讀" class="headerlink" title="延伸閱讀"></a>延伸閱讀</h1><ol>
<li><a href="https://www.codementor.io/python/tutorial/essential-python-interview-questions">15 Essential Python Interview Questions</a></li>
<li><a href="https://www.toptal.com/python/interview-questions">8 Essential Python Interview Questions*</a></li>
<li><a href="https://www.tutorialspoint.com/python/python_interview_questions.htm">Python Interview Questions</a></li>
<li><a href="https://www.quora.com/What-are-good-Python-interview-questions">What are good Python interview questions?</a></li>
<li><a href="http://career.guru99.com/top-25-python-interview-questions/">Top 40 Python Interview Questions &amp; Answers </a></li>
<li><a href="https://intellipaat.com/interview-question/python-interview-questions/">Top Python Interview Questions And Answers</a></li>
<li><a href="https://www.interviewcake.com/python-interview-questions">Python Interview Questions</a></li>
<li><a href="http://foofish.net/python-decorator.html">12步教你理解Python装饰器</a></li>
</ol>
<p>（image via <a href="https://cdn.fedoramagazine.org/wp-content/uploads/2015/11/Python_logo.png">fedoramagazine</a>）</p>
]]></content>
      <tags>
        <tag>程式教學</tag>
        <tag>Python</tag>
        <tag>Django</tag>
        <tag>MVC</tag>
        <tag>Web</tag>
        <tag>MTV</tag>
        <tag>Web Backend</tag>
        <tag>Web Framework</tag>
        <tag>Flask</tag>
        <tag>框架</tag>
      </tags>
  </entry>
  <entry>
    <title>如何在 Windows 打造 Python Web 開發環境入門教學 Part1</title>
    <url>/2017/12/20/python101-windows-dev-environment-setup-tutorial-part1/</url>
    <content><![CDATA[<p><img src="/images/python101/python-logo.png" alt="如何在 Windows 打造 Python Web 開發環境"></p>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>所謂工欲善其事，必先利其器。我們開發程式之前我們最重要的就是要設定好開發環境，接下來我們將帶領讀者體驗如何在 Windows 打造 Python Web 開發環境。</p>
<h1 id="安裝軟體步驟"><a href="#安裝軟體步驟" class="headerlink" title="安裝軟體步驟"></a>安裝軟體步驟</h1><ol>
<li>下載安裝 <a href="https://www.google.com.tw/chrome/browser/desktop/index.html">google chrome</a> 瀏覽器</li>
<li>下載安裝 <a href="https://code.visualstudio.com/">Visual Studio Code</a> 或 <a href="https://www.sublimetext.com/">Sublime text</a> 文字編輯器</li>
<li>下載安裝 <a href="http://cmder.net/">cmder</a> terminal 終端機程式 (請下載含 git 的 full 完整版本)</li>
<li>下載安裝 <a href="https://www.anaconda.com/download/">anaconda for windows</a> (請依你的作業系統位元 32&#x2F;64 下載對應程式，記得安裝時要勾選加入環境變數)</li>
<li>在終端機輸入 (若正確顯示版本即為安裝成功)：<code>python -V</code></li>
<li>輸入 <code>python</code> 可進入互動式對話環境，可以執行 <code>python</code> 程式</li>
</ol>
<h1 id="撰寫第一個-Python-程式"><a href="#撰寫第一個-Python-程式" class="headerlink" title="撰寫第一個 Python 程式"></a>撰寫第一個 Python 程式</h1><ol>
<li>打開 Visual Studio Code 或 Sublime text 並建立一個 hello.py 檔案：</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">print(&#x27;hello python&#x27;)</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>到 cmder 終端機移動到 <code>hello.py</code> 資料夾下輸入 <code>python hello.py</code></li>
</ol>
<p>就可以看到你撰寫的第一個 Python 程式 <code>hello python</code> 啦！</p>
<h1 id="影片教學"><a href="#影片教學" class="headerlink" title="影片教學"></a>影片教學</h1><div class="video-container">
    <iframe width="560" height="315" src="https://www.youtube.com/embed/FQw0S7-WShE" frameborder="0" gesture="media" allow="encrypted-media" allowfullscreen></iframe>
</div>

]]></content>
      <tags>
        <tag>自學程式</tag>
        <tag>自學程式設計</tag>
        <tag>程式設計</tag>
        <tag>線上自學</tag>
        <tag>coding</tag>
        <tag>coder</tag>
        <tag>programming</tag>
        <tag>computer</tag>
        <tag>computer science</tag>
        <tag>code</tag>
        <tag>電腦科學</tag>
        <tag>學寫程式</tag>
        <tag>學程式</tag>
        <tag>linux</tag>
        <tag>指令</tag>
        <tag>命令列</tag>
        <tag>command line</tag>
        <tag>軟體工程師</tag>
        <tag>軟體工程</tag>
        <tag>software engineering</tag>
        <tag>bash</tag>
        <tag>shell</tag>
        <tag>svn</tag>
        <tag>version control</tag>
        <tag>VCS</tag>
        <tag>github</tag>
        <tag>git</tag>
        <tag>cvs</tag>
        <tag>自學程式心得</tag>
        <tag>環境設定</tag>
        <tag>Windows</tag>
        <tag>環境建置</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>如何在 Windows 打造 Python Web 開發環境入門教學 Part2</title>
    <url>/2017/12/21/python101-windows-dev-environment-setup-tutorial-part2/</url>
    <content><![CDATA[<p><img src="/images/python101/python-logo.png" alt="如何在 Windows 打造 Python Web 開發環境"></p>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>所謂工欲善其事，必先利其器。我們開發程式之前我們最重要的就是要設定好開發環境，接下來我們將帶領讀者體驗如何在 Windows 打造 Python Web 開發環境。</p>
<h1 id="撰寫第一個-Python-Django-程式"><a href="#撰寫第一個-Python-Django-程式" class="headerlink" title="撰寫第一個 Python Django 程式"></a>撰寫第一個 Python Django 程式</h1><ol>
<li>創建虛擬開發環境：<code>conda create -n &lt;自定義虛擬環境名稱&gt; python=3.5</code></li>
<li>觀看已建立的虛擬環境：<code>conda info -e</code> </li>
<li>進入虛擬環境：<code>activate &lt;自定義虛擬環境名稱&gt;</code></li>
<li>安裝套件：<code>pip install django</code></li>
<li>觀看已安裝套件：<code>pip list</code></li>
<li>建立第一個 django 專案：<code>django-admin startproject my_first_app</code></li>
<li>啟動伺服器：<code>python manage.py runserver</code></li>
<li>到瀏覽器觀看成果！<code>http://localhost:8000</code> 或 <code>http://127.0.0.1:8000</code></li>
</ol>
<h1 id="其他常用指令"><a href="#其他常用指令" class="headerlink" title="其他常用指令"></a>其他常用指令</h1><ol>
<li>離開虛擬環境：<code>deactivate</code></li>
<li>移除虛擬環境：<code>conda remove &lt;自定義虛擬環境名稱&gt; -n --all</code></li>
<li><code>pip uninstall</code> 套件名稱</li>
</ol>
<h1 id="影片教學"><a href="#影片教學" class="headerlink" title="影片教學"></a>影片教學</h1><div class="video-container">
    <iframe width="560" height="315" src="https://www.youtube.com/embed/NCss_yvb5ZM" frameborder="0" gesture="media" allow="encrypted-media" allowfullscreen></iframe>
</div>]]></content>
      <tags>
        <tag>自學程式</tag>
        <tag>自學程式設計</tag>
        <tag>程式設計</tag>
        <tag>線上自學</tag>
        <tag>coding</tag>
        <tag>coder</tag>
        <tag>programming</tag>
        <tag>computer</tag>
        <tag>computer science</tag>
        <tag>code</tag>
        <tag>電腦科學</tag>
        <tag>學寫程式</tag>
        <tag>學程式</tag>
        <tag>linux</tag>
        <tag>指令</tag>
        <tag>命令列</tag>
        <tag>command line</tag>
        <tag>軟體工程師</tag>
        <tag>軟體工程</tag>
        <tag>software engineering</tag>
        <tag>bash</tag>
        <tag>shell</tag>
        <tag>svn</tag>
        <tag>version control</tag>
        <tag>VCS</tag>
        <tag>github</tag>
        <tag>git</tag>
        <tag>cvs</tag>
        <tag>自學程式心得</tag>
        <tag>環境設定</tag>
        <tag>Windows</tag>
        <tag>環境建置</tag>
        <tag>Python</tag>
      </tags>
  </entry>
</search>
